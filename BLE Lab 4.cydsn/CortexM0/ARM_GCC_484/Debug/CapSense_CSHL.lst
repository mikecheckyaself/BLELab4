ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CapSense_CSHL.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	CapSense_rawFilterData1,2,4
  18              		.global	CapSense_sensorBaseline
  19              		.bss
  20              		.align	2
  21              		.type	CapSense_sensorBaseline, %object
  22              		.size	CapSense_sensorBaseline, 2
  23              	CapSense_sensorBaseline:
  24 0000 0000     		.space	2
  25              		.global	CapSense_sensorBaselineLow
  26 0002 0000     		.align	2
  27              		.type	CapSense_sensorBaselineLow, %object
  28              		.size	CapSense_sensorBaselineLow, 1
  29              	CapSense_sensorBaselineLow:
  30 0004 00       		.space	1
  31              		.global	CapSense_sensorSignal
  32 0005 000000   		.align	2
  33              		.type	CapSense_sensorSignal, %object
  34              		.size	CapSense_sensorSignal, 1
  35              	CapSense_sensorSignal:
  36 0008 00       		.space	1
  37              		.global	CapSense_sensorOnMask
  38 0009 000000   		.align	2
  39              		.type	CapSense_sensorOnMask, %object
  40              		.size	CapSense_sensorOnMask, 1
  41              	CapSense_sensorOnMask:
  42 000c 00       		.space	1
  43              		.comm	CapSense_lowBaselineResetCnt,1,4
  44              		.global	CapSense_lowBaselineReset
  45              		.data
  46              		.align	2
  47              		.type	CapSense_lowBaselineReset, %object
  48              		.size	CapSense_lowBaselineReset, 1
  49              	CapSense_lowBaselineReset:
  50 0000 05       		.byte	5
  51              		.global	CapSense_enableRawFilters
  52              		.type	CapSense_enableRawFilters, %object
  53              		.size	CapSense_enableRawFilters, 1
  54              	CapSense_enableRawFilters:
  55 0001 01       		.byte	1
  56              		.global	CapSense_fingerThreshold
  57 0002 0000     		.align	2
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 2


  58              		.type	CapSense_fingerThreshold, %object
  59              		.size	CapSense_fingerThreshold, 1
  60              	CapSense_fingerThreshold:
  61 0004 50       		.byte	80
  62              		.global	CapSense_noiseThreshold
  63 0005 000000   		.align	2
  64              		.type	CapSense_noiseThreshold, %object
  65              		.size	CapSense_noiseThreshold, 1
  66              	CapSense_noiseThreshold:
  67 0008 28       		.byte	40
  68              		.global	CapSense_negativeNoiseThreshold
  69 0009 000000   		.align	2
  70              		.type	CapSense_negativeNoiseThreshold, %object
  71              		.size	CapSense_negativeNoiseThreshold, 1
  72              	CapSense_negativeNoiseThreshold:
  73 000c 14       		.byte	20
  74              		.global	CapSense_hysteresis
  75 000d 000000   		.align	2
  76              		.type	CapSense_hysteresis, %object
  77              		.size	CapSense_hysteresis, 1
  78              	CapSense_hysteresis:
  79 0010 0A       		.byte	10
  80              		.global	CapSense_debounce
  81 0011 000000   		.align	2
  82              		.type	CapSense_debounce, %object
  83              		.size	CapSense_debounce, 1
  84              	CapSense_debounce:
  85 0014 05       		.byte	5
  86 0015 000000   		.bss
  87 000d 000000   		.align	2
  88              	CapSense_debounceCounter:
  89 0010 0000     		.space	2
  90              		.global	CapSense_rawDataIndex
  91 0012 0000     		.section	.rodata
  92              		.align	2
  93              		.type	CapSense_rawDataIndex, %object
  94              		.size	CapSense_rawDataIndex, 1
  95              	CapSense_rawDataIndex:
  96 0000 00       		.space	1
  97              		.global	CapSense_numberOfSensors
  98 0001 000000   		.align	2
  99              		.type	CapSense_numberOfSensors, %object
 100              		.size	CapSense_numberOfSensors, 1
 101              	CapSense_numberOfSensors:
 102 0004 01       		.byte	1
 103 0005 000000   		.section	.text.CapSense_BaseInit,"ax",%progbits
 104              		.align	2
 105              		.global	CapSense_BaseInit
 106              		.code	16
 107              		.thumb_func
 108              		.type	CapSense_BaseInit, %function
 109              	CapSense_BaseInit:
 110              	.LFB35:
 111              		.file 1 ".\\Generated_Source\\PSoC4\\CapSense_CSHL.c"
   1:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Version 2.10
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 3


   4:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
   5:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Description:
   6:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CSD component.
   8:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
   9:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Note:
  10:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
  11:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Copyright 2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  18:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #include "CapSense_PVT.h"
  20:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  21:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /* SmartSense functions */
  22:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
  23:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     extern void CapSense_UpdateThresholds(uint32 sensor);
  24:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
  25:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  26:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /* Storage of filters data */
  27:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) || \
  28:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)) )
  29:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  30:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  31:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  32:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  33:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #elif ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER))   || \
  34:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER))   || \
  35:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)) || \
  36:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER))   || \
  37:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)) )
  38:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
  39:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  40:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  41:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  42:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         */
  43:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  44:.\Generated_Source\PSoC4/CapSense_CSHL.c **** extern uint16 CapSense_sensorRaw[CapSense_TOTAL_SENSOR_COUNT];
  45:.\Generated_Source\PSoC4/CapSense_CSHL.c **** extern uint8 CapSense_sensorEnableMask[CapSense_TOTAL_SENSOR_MASK];
  46:.\Generated_Source\PSoC4/CapSense_CSHL.c **** extern const uint8 CapSense_widgetNumber[CapSense_TOTAL_SENSOR_COUNT];
  47:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  48:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
  49:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	extern uint32 CapSense_widgetResolution[CapSense_RESOLUTIONS_TBL_SIZE];	
  50:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */
  51:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  52:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  53:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  54:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  55:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[CapSense_TOTAL_SENSOR_MASK] = {0u};
  56:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  57:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  58:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_lowBaselineReset[CapSense_TOTAL_SENSOR_COUNT] = {
  59:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     5u, 
  60:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 4


  61:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  62:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  63:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  64:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
  65:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	extern CapSense_CONFIG_TYPE_P4_v2_10 CapSense_config;
  66:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif  /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
  67:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  68:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_RAW_FILTER_MASK != 0u)
  69:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_enableRawFilters = CapSense_RAW_FILTERS_ENABLED;
  70:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif  /* (CapSense_RAW_FILTER_MASK != 0u) */
  71:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  72:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /* Generated by Customizer */
  73:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_fingerThreshold[] = {
  74:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     80u, 
  75:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  76:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  77:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_noiseThreshold[] = {
  78:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     40u, 
  79:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  80:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  81:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_negativeNoiseThreshold[] = {
  82:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     20u, 
  83:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  84:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  85:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_hysteresis[] = {
  86:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     10u, 
  87:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  88:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  89:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
  90:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     5u, 
  91:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  92:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  93:.\Generated_Source\PSoC4/CapSense_CSHL.c **** static uint8 CapSense_debounceCounter[] = {
  94:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     0u, 0u, 
  95:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  96:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  97:.\Generated_Source\PSoC4/CapSense_CSHL.c **** const uint8 CapSense_rawDataIndex[] = {
  98:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     0u, /* ProximitySensor0__PROX */
  99:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
 100:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 101:.\Generated_Source\PSoC4/CapSense_CSHL.c **** const uint8 CapSense_numberOfSensors[] = {
 102:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     1u, /* ProximitySensor0__PROX */
 103:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
 104:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 105:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 106:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 107:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 108:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 109:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
 110:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 111:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 112:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 113:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 114:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  initial value which is equal to the raw count value. 
 115:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
 116:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
 117:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 5


 118:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
 119:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  initial value which is equal to the raw count value if the raw data filter is enabled.
 120:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 121:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 122:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 123:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 124:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 125:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 126:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 127:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 128:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store the baseline value.
 129:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store the fraction byte of 
 130:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the baseline value.
 131:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store a difference between 
 132:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the current value of raw data and the previous value of the baseline.
 133:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store a previous sample of 
 134:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  any enabled raw data filter.
 135:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before a previous sample
 136:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  of the enabled raw data filter. Required only for median or average filters.
 137:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 138:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 139:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 140:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 141:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 142:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_BaseInit(uint32 sensor)
 143:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 112              		.loc 1 143 0
 113              		.cfi_startproc
 114 0000 80B5     		push	{r7, lr}
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 84B0     		sub	sp, sp, #16
 119              		.cfi_def_cfa_offset 24
 120 0004 00AF     		add	r7, sp, #0
 121              		.cfi_def_cfa_register 7
 122 0006 7860     		str	r0, [r7, #4]
 144:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 145:.\Generated_Source\PSoC4/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 146:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
 123              		.loc 1 146 0
 124 0008 3B1C     		mov	r3, r7
 125 000a 0F33     		add	r3, r3, #15
 126 000c 1549     		ldr	r1, .L2
 127 000e 7A68     		ldr	r2, [r7, #4]
 128 0010 8A18     		add	r2, r1, r2
 129 0012 1278     		ldrb	r2, [r2]
 130 0014 1A70     		strb	r2, [r3]
 147:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 148:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 149:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 150:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 debounceIndex;
 151:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 152:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 153:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 154:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 155:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 6


 156:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 157:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 158:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 159:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Initialize Baseline */
 160:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
 131              		.loc 1 160 0
 132 0016 144B     		ldr	r3, .L2+4
 133 0018 7A68     		ldr	r2, [r7, #4]
 134 001a 5200     		lsl	r2, r2, #1
 135 001c D15A     		ldrh	r1, [r2, r3]
 136 001e 134B     		ldr	r3, .L2+8
 137 0020 7A68     		ldr	r2, [r7, #4]
 138 0022 5200     		lsl	r2, r2, #1
 139 0024 D152     		strh	r1, [r2, r3]
 161:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
 140              		.loc 1 161 0
 141 0026 124A     		ldr	r2, .L2+12
 142 0028 7B68     		ldr	r3, [r7, #4]
 143 002a D318     		add	r3, r2, r3
 144 002c 0022     		mov	r2, #0
 145 002e 1A70     		strb	r2, [r3]
 162:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
 146              		.loc 1 162 0
 147 0030 104A     		ldr	r2, .L2+16
 148 0032 7B68     		ldr	r3, [r7, #4]
 149 0034 D318     		add	r3, r2, r3
 150 0036 0022     		mov	r2, #0
 151 0038 1A70     		strb	r2, [r3]
 163:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 164:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
 152              		.loc 1 164 0
 153 003a 3B1C     		mov	r3, r7
 154 003c 0F33     		add	r3, r3, #15
 155 003e 1B78     		ldrb	r3, [r3]
 156 0040 3A1C     		mov	r2, r7
 157 0042 0F32     		add	r2, r2, #15
 158 0044 1278     		ldrb	r2, [r2]
 159 0046 0C49     		ldr	r1, .L2+20
 160 0048 895C     		ldrb	r1, [r1, r2]
 161 004a 0C4A     		ldr	r2, .L2+24
 162 004c D154     		strb	r1, [r2, r3]
 165:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 166:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 167:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if ((0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) ||\
 168:.\Generated_Source\PSoC4/CapSense_CSHL.c ****          (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)))
 169:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 170:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 171:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 172:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 173:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) ||\
 174:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) ||\
 175:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) ||\
 176:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) ||\
 177:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 178:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             
 179:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 163              		.loc 1 179 0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 7


 164 004e 064B     		ldr	r3, .L2+4
 165 0050 7A68     		ldr	r2, [r7, #4]
 166 0052 5200     		lsl	r2, r2, #1
 167 0054 D15A     		ldrh	r1, [r2, r3]
 168 0056 0A4B     		ldr	r3, .L2+28
 169 0058 7A68     		ldr	r2, [r7, #4]
 170 005a 5200     		lsl	r2, r2, #1
 171 005c D152     		strh	r1, [r2, r3]
 180:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 181:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #else
 182:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* No Raw filters */
 183:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
 184:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 185:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             */
 186:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 187:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 188:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 189:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 190:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 191:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 172              		.loc 1 191 0
 173 005e BD46     		mov	sp, r7
 174 0060 04B0     		add	sp, sp, #16
 175              		@ sp needed
 176 0062 80BD     		pop	{r7, pc}
 177              	.L3:
 178              		.align	2
 179              	.L2:
 180 0064 00000000 		.word	CapSense_widgetNumber
 181 0068 00000000 		.word	CapSense_sensorRaw
 182 006c 00000000 		.word	CapSense_sensorBaseline
 183 0070 00000000 		.word	CapSense_sensorBaselineLow
 184 0074 00000000 		.word	CapSense_sensorSignal
 185 0078 00000000 		.word	CapSense_debounce
 186 007c 10000000 		.word	CapSense_debounceCounter
 187 0080 00000000 		.word	CapSense_rawFilterData1
 188              		.cfi_endproc
 189              	.LFE35:
 190              		.size	CapSense_BaseInit, .-CapSense_BaseInit
 191              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
 192              		.align	2
 193              		.global	CapSense_InitializeSensorBaseline
 194              		.code	16
 195              		.thumb_func
 196              		.type	CapSense_InitializeSensorBaseline, %function
 197              	CapSense_InitializeSensorBaseline:
 198              	.LFB36:
 192:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 193:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 194:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 195:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 196:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 197:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 198:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 199:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 200:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or a pair 
 201:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 8


 202:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 203:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  enabled.
 204:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 205:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 206:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 207:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 208:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 209:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 210:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 211:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 212:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 213:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 214:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 215:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 216:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 217:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 218:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint32 sensor)
 219:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 199              		.loc 1 219 0
 200              		.cfi_startproc
 201 0000 80B5     		push	{r7, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 82B0     		sub	sp, sp, #8
 206              		.cfi_def_cfa_offset 16
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 7860     		str	r0, [r7, #4]
 220:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Scan sensor */
 221:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
 210              		.loc 1 221 0
 211 0008 7B68     		ldr	r3, [r7, #4]
 212 000a 181C     		mov	r0, r3
 213 000c FFF7FEFF 		bl	CapSense_ScanSensor
 222:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 214              		.loc 1 222 0
 215 0010 C046     		mov	r8, r8
 216              	.L5:
 217              		.loc 1 222 0 is_stmt 0 discriminator 1
 218 0012 FFF7FEFF 		bl	CapSense_IsBusy
 219 0016 031C     		mov	r3, r0
 220 0018 002B     		cmp	r3, #0
 221 001a FAD1     		bne	.L5
 223:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 224:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Wait while sensor is busy */
 225:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 226:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 227:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Initialize Baseline, Signal and debounce counters */       
 228:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_BaseInit(sensor);
 222              		.loc 1 228 0 is_stmt 1
 223 001c 7B68     		ldr	r3, [r7, #4]
 224 001e 181C     		mov	r0, r3
 225 0020 FFF7FEFF 		bl	CapSense_BaseInit
 229:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 226              		.loc 1 229 0
 227 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 9


 228 0026 02B0     		add	sp, sp, #8
 229              		@ sp needed
 230 0028 80BD     		pop	{r7, pc}
 231              		.cfi_endproc
 232              	.LFE36:
 233              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 234 002a C046     		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 235              		.align	2
 236              		.global	CapSense_InitializeAllBaselines
 237              		.code	16
 238              		.thumb_func
 239              		.type	CapSense_InitializeAllBaselines, %function
 240              	CapSense_InitializeAllBaselines:
 241              	.LFB37:
 230:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 231:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 232:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 233:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 234:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 235:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 236:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 237:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to load the 
 238:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 239:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  all the sensors. The raw count values are copied into the baseline array for 
 240:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  all the sensors. The raw data filters are initialized if enabled.
 241:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 242:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 243:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 244:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 245:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 246:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 247:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 248:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 249:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 250:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 251:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 252:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 253:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 254:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 255:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 256:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 242              		.loc 1 256 0
 243              		.cfi_startproc
 244 0000 80B5     		push	{r7, lr}
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0002 82B0     		sub	sp, sp, #8
 249              		.cfi_def_cfa_offset 16
 250 0004 00AF     		add	r7, sp, #0
 251              		.cfi_def_cfa_register 7
 257:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 258:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 252              		.loc 1 259 0
 253 0006 0023     		mov	r3, #0
 254 0008 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 10


 255 000a 06E0     		b	.L7
 256              	.L8:
 260:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 261:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     	CapSense_InitializeSensorBaseline(i);
 257              		.loc 1 261 0 discriminator 2
 258 000c 7B68     		ldr	r3, [r7, #4]
 259 000e 181C     		mov	r0, r3
 260 0010 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 261              		.loc 1 259 0 discriminator 2
 262 0014 7B68     		ldr	r3, [r7, #4]
 263 0016 0133     		add	r3, r3, #1
 264 0018 7B60     		str	r3, [r7, #4]
 265              	.L7:
 259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 266              		.loc 1 259 0 is_stmt 0 discriminator 1
 267 001a 7B68     		ldr	r3, [r7, #4]
 268 001c 002B     		cmp	r3, #0
 269 001e F5D0     		beq	.L8
 262:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 263:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 270              		.loc 1 263 0 is_stmt 1
 271 0020 BD46     		mov	sp, r7
 272 0022 02B0     		add	sp, sp, #8
 273              		@ sp needed
 274 0024 80BD     		pop	{r7, pc}
 275              		.cfi_endproc
 276              	.LFE37:
 277              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 278 0026 C046     		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 279              		.align	2
 280              		.global	CapSense_InitializeEnabledBaselines
 281              		.code	16
 282              		.thumb_func
 283              		.type	CapSense_InitializeEnabledBaselines, %function
 284              	CapSense_InitializeEnabledBaselines:
 285              	.LFB38:
 264:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 265:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 266:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 267:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 268:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 269:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 270:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 271:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Scans all the enabled widgets and the raw count values are copied into the 
 272:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  baseline array for all the sensors enabled in the scanning process. The baselines 
 273:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  are initialized with zero values for sensors disabled from the scanning process. 
 274:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 275:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 276:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 277:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 278:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 279:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 280:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 281:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 282:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 283:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorRaw[] - used to store the sensors raw data.
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 11


 284:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[ ] - used to store bit masks of the enabled sensors.
 285:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 286:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 287:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 288:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 289:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 290:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 291:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 286              		.loc 1 291 0
 287              		.cfi_startproc
 288 0000 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 82B0     		sub	sp, sp, #8
 293              		.cfi_def_cfa_offset 16
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 292:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 293:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 isSensorEnabled;
 294:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 295:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 296              		.loc 1 295 0
 297 0006 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 296:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 298              		.loc 1 296 0
 299 000a C046     		mov	r8, r8
 300              	.L10:
 301              		.loc 1 296 0 is_stmt 0 discriminator 1
 302 000c FFF7FEFF 		bl	CapSense_IsBusy
 303 0010 031C     		mov	r3, r0
 304 0012 002B     		cmp	r3, #0
 305 0014 FAD1     		bne	.L10
 297:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 298:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Wait while sensor is busy */
 299:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 300:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 306              		.loc 1 301 0 is_stmt 1
 307 0016 0023     		mov	r3, #0
 308 0018 7B60     		str	r3, [r7, #4]
 309 001a 11E0     		b	.L11
 310              	.L13:
 302:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 303:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         isSensorEnabled = CapSense_GetBitValue(CapSense_sensorEnableMask, i);
 311              		.loc 1 303 0
 312 001c 0B4A     		ldr	r2, .L14
 313 001e 7B68     		ldr	r3, [r7, #4]
 314 0020 101C     		mov	r0, r2
 315 0022 191C     		mov	r1, r3
 316 0024 FFF7FEFF 		bl	CapSense_GetBitValue
 317 0028 031C     		mov	r3, r0
 318 002a 3B60     		str	r3, [r7]
 304:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 305:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 306:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(isSensorEnabled != 0u)
 319              		.loc 1 306 0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 12


 320 002c 3B68     		ldr	r3, [r7]
 321 002e 002B     		cmp	r3, #0
 322 0030 03D0     		beq	.L12
 307:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 308:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Initialize baselines */
 309:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_BaseInit(i);
 323              		.loc 1 309 0
 324 0032 7B68     		ldr	r3, [r7, #4]
 325 0034 181C     		mov	r0, r3
 326 0036 FFF7FEFF 		bl	CapSense_BaseInit
 327              	.L12:
 301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 328              		.loc 1 301 0
 329 003a 7B68     		ldr	r3, [r7, #4]
 330 003c 0133     		add	r3, r3, #1
 331 003e 7B60     		str	r3, [r7, #4]
 332              	.L11:
 301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 333              		.loc 1 301 0 is_stmt 0 discriminator 1
 334 0040 7B68     		ldr	r3, [r7, #4]
 335 0042 002B     		cmp	r3, #0
 336 0044 EAD0     		beq	.L13
 310:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 311:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 312:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }  
 337              		.loc 1 312 0 is_stmt 1
 338 0046 BD46     		mov	sp, r7
 339 0048 02B0     		add	sp, sp, #8
 340              		@ sp needed
 341 004a 80BD     		pop	{r7, pc}
 342              	.L15:
 343              		.align	2
 344              	.L14:
 345 004c 00000000 		.word	CapSense_sensorEnableMask
 346              		.cfi_endproc
 347              	.LFE38:
 348              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
 349              		.section	.text.CapSense_UpdateBaselineNoThreshold,"ax",%progbits
 350              		.align	2
 351              		.global	CapSense_UpdateBaselineNoThreshold
 352              		.code	16
 353              		.thumb_func
 354              		.type	CapSense_UpdateBaselineNoThreshold, %function
 355              	CapSense_UpdateBaselineNoThreshold:
 356              	.LFB39:
 313:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 314:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 315:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateBaselineNoThreshold
 317:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 319:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 320:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 321:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 322:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 323:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  it in CapSense_sensorSignal[sensor]. 
 324:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold. 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 13


 325:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating; baseline is loaded 
 326:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  with a raw count value if a signal is greater than zero and if signal is less 
 327:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  than noise threshold.
 328:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 329:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  calculation.
 330:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 331:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API does not update the thresholds in the Smartsense Mode.
 332:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 333:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 334:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 335:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 336:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 337:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 338:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 339:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 340:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumber[]  - stores widget numbers.
 341:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 342:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 343:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  baseline value.
 344:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store difference between 
 345:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 346:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 347:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  any enabled raw data filter.
 348:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 349:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 350:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 351:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 352:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 353:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 354:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 355:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_UpdateBaselineNoThreshold(uint32 sensor)
 356:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 357              		.loc 1 356 0
 358              		.cfi_startproc
 359 0000 90B5     		push	{r4, r7, lr}
 360              		.cfi_def_cfa_offset 12
 361              		.cfi_offset 4, -12
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 87B0     		sub	sp, sp, #28
 365              		.cfi_def_cfa_offset 40
 366 0004 00AF     		add	r7, sp, #0
 367              		.cfi_def_cfa_register 7
 368 0006 7860     		str	r0, [r7, #4]
 357:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 calc;
 358:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint32 sign;
 359:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 tempRaw;
 360:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 filteredRawData;
 361:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 369              		.loc 1 361 0
 370 0008 3B1C     		mov	r3, r7
 371 000a 0F33     		add	r3, r3, #15
 372 000c 7649     		ldr	r1, .L29
 373 000e 7A68     		ldr	r2, [r7, #4]
 374 0010 8A18     		add	r2, r1, r2
 375 0012 1278     		ldrb	r2, [r2]
 376 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 14


 362:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 377              		.loc 1 362 0
 378 0016 3B1C     		mov	r3, r7
 379 0018 0F33     		add	r3, r3, #15
 380 001a 1A78     		ldrb	r2, [r3]
 381 001c 3B1C     		mov	r3, r7
 382 001e 0E33     		add	r3, r3, #14
 383 0020 7249     		ldr	r1, .L29+4
 384 0022 8A5C     		ldrb	r2, [r1, r2]
 385 0024 1A70     		strb	r2, [r3]
 363:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 364:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 365:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 366:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 367:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 368:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 369:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 370:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 386              		.loc 1 370 0
 387 0026 3B1C     		mov	r3, r7
 388 0028 1033     		add	r3, r3, #16
 389 002a 714A     		ldr	r2, .L29+8
 390 002c 7968     		ldr	r1, [r7, #4]
 391 002e 4900     		lsl	r1, r1, #1
 392 0030 8A5A     		ldrh	r2, [r1, r2]
 393 0032 1A80     		strh	r2, [r3]
 371:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 372:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_RAW_FILTER_MASK != 0u)
 373:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	if(CapSense_enableRawFilters != 0u)
 394              		.loc 1 373 0
 395 0034 6F4B     		ldr	r3, .L29+12
 396 0036 1B78     		ldrb	r3, [r3]
 397 0038 002B     		cmp	r3, #0
 398 003a 15D0     		beq	.L17
 374:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 375:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 376:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			tempRaw = filteredRawData;
 377:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 378:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 															CapSense_rawFilterData2[sensor]);
 379:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 380:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = tempRaw;
 381:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 382:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
 383:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			tempRaw = filteredRawData;
 384:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor],
 385:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 															   CapSense_rawFilterData2[sensor]);
 386:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 387:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = tempRaw;
 388:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 389:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 390:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 391:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 392:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 393:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 394:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 399              		.loc 1 394 0
 400 003c 6E4B     		ldr	r3, .L29+16
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 15


 401 003e 7A68     		ldr	r2, [r7, #4]
 402 0040 5200     		lsl	r2, r2, #1
 403 0042 D35A     		ldrh	r3, [r2, r3]
 404 0044 3C1C     		mov	r4, r7
 405 0046 1034     		add	r4, r4, #16
 406 0048 3A1C     		mov	r2, r7
 407 004a 1032     		add	r2, r2, #16
 408 004c 1288     		ldrh	r2, [r2]
 409 004e 101C     		mov	r0, r2
 410 0050 191C     		mov	r1, r3
 411 0052 FFF7FEFF 		bl	CapSense_IIR4Filter
 412 0056 031C     		mov	r3, r0
 413 0058 2380     		strh	r3, [r4]
 395:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 414              		.loc 1 395 0
 415 005a 674B     		ldr	r3, .L29+16
 416 005c 7A68     		ldr	r2, [r7, #4]
 417 005e 5200     		lsl	r2, r2, #1
 418 0060 391C     		mov	r1, r7
 419 0062 1031     		add	r1, r1, #16
 420 0064 0988     		ldrh	r1, [r1]
 421 0066 D152     		strh	r1, [r2, r3]
 422              	.L17:
 396:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 				
 397:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
 398:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 399:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 400:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 401:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
 402:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 403:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 404:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 405:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 406:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 407:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 408:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 409:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
 410:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* No Raw filters */
 411:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 412:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 413:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif  /* (CapSense_RAW_FILTER_MASK != 0u) */
 414:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 415:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
 416:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	    MeasureNoiseEnvelope_P4_v2_10(&CapSense_config, (uint8)sensor, CapSense_sensorRaw);
 417:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
 418:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 419:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Baseline calculation */
 420:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 421:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 423              		.loc 1 421 0
 424 0068 644B     		ldr	r3, .L29+20
 425 006a 7A68     		ldr	r2, [r7, #4]
 426 006c 5200     		lsl	r2, r2, #1
 427 006e D35A     		ldrh	r3, [r2, r3]
 428 0070 3A1C     		mov	r2, r7
 429 0072 1032     		add	r2, r2, #16
 430 0074 1288     		ldrh	r2, [r2]
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 16


 431 0076 9A42     		cmp	r2, r3
 432 0078 12D3     		bcc	.L18
 422:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 423:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_lowBaselineResetCnt[sensor] = 0u;	
 433              		.loc 1 423 0
 434 007a 614A     		ldr	r2, .L29+24
 435 007c 7B68     		ldr	r3, [r7, #4]
 436 007e D318     		add	r3, r2, r3
 437 0080 0022     		mov	r2, #0
 438 0082 1A70     		strb	r2, [r3]
 424:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 439              		.loc 1 424 0
 440 0084 5D4B     		ldr	r3, .L29+20
 441 0086 7A68     		ldr	r2, [r7, #4]
 442 0088 5200     		lsl	r2, r2, #1
 443 008a D25A     		ldrh	r2, [r2, r3]
 444 008c 3B1C     		mov	r3, r7
 445 008e 1233     		add	r3, r3, #18
 446 0090 391C     		mov	r1, r7
 447 0092 1031     		add	r1, r1, #16
 448 0094 0988     		ldrh	r1, [r1]
 449 0096 8A1A     		sub	r2, r1, r2
 450 0098 1A80     		strh	r2, [r3]
 425:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         sign = 1u;    /* Positive difference - Calculate the Signal */
 451              		.loc 1 425 0
 452 009a 0123     		mov	r3, #1
 453 009c 7B61     		str	r3, [r7, #20]
 454 009e 0CE0     		b	.L19
 455              	.L18:
 426:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 427:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else
 428:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 429:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 456              		.loc 1 429 0
 457 00a0 564B     		ldr	r3, .L29+20
 458 00a2 7A68     		ldr	r2, [r7, #4]
 459 00a4 5200     		lsl	r2, r2, #1
 460 00a6 D15A     		ldrh	r1, [r2, r3]
 461 00a8 3B1C     		mov	r3, r7
 462 00aa 1233     		add	r3, r3, #18
 463 00ac 3A1C     		mov	r2, r7
 464 00ae 1032     		add	r2, r2, #16
 465 00b0 1288     		ldrh	r2, [r2]
 466 00b2 8A1A     		sub	r2, r1, r2
 467 00b4 1A80     		strh	r2, [r3]
 430:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         sign = 0u;    /* Negative difference - Do NOT calculate the Signal */
 468              		.loc 1 430 0
 469 00b6 0023     		mov	r3, #0
 470 00b8 7B61     		str	r3, [r7, #20]
 471              	.L19:
 431:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 432:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 433:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
 434:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	if((sign == 0u) && (tempRaw > (uint16) CapSense_negativeNoiseThreshold[widget]))
 472              		.loc 1 434 0
 473 00ba 7B69     		ldr	r3, [r7, #20]
 474 00bc 002B     		cmp	r3, #0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 17


 475 00be 28D1     		bne	.L20
 476              		.loc 1 434 0 is_stmt 0 discriminator 1
 477 00c0 3B1C     		mov	r3, r7
 478 00c2 0F33     		add	r3, r3, #15
 479 00c4 1B78     		ldrb	r3, [r3]
 480 00c6 4F4A     		ldr	r2, .L29+28
 481 00c8 D35C     		ldrb	r3, [r2, r3]
 482 00ca 3A1C     		mov	r2, r7
 483 00cc 1232     		add	r2, r2, #18
 484 00ce 1288     		ldrh	r2, [r2]
 485 00d0 9A42     		cmp	r2, r3
 486 00d2 1ED9     		bls	.L20
 435:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#else
 436:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	if((sign == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 437:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */ 
 438:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_lowBaselineReset[sensor])
 487              		.loc 1 439 0 is_stmt 1
 488 00d4 4A4A     		ldr	r2, .L29+24
 489 00d6 7B68     		ldr	r3, [r7, #4]
 490 00d8 D318     		add	r3, r2, r3
 491 00da 1A78     		ldrb	r2, [r3]
 492 00dc 4A49     		ldr	r1, .L29+32
 493 00de 7B68     		ldr	r3, [r7, #4]
 494 00e0 CB18     		add	r3, r1, r3
 495 00e2 1B78     		ldrb	r3, [r3]
 496 00e4 9A42     		cmp	r2, r3
 497 00e6 09D3     		bcc	.L21
 440:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 441:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 498              		.loc 1 441 0
 499 00e8 7B68     		ldr	r3, [r7, #4]
 500 00ea 181C     		mov	r0, r3
 501 00ec FFF7FEFF 		bl	CapSense_BaseInit
 442:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 502              		.loc 1 442 0
 503 00f0 434A     		ldr	r2, .L29+24
 504 00f2 7B68     		ldr	r3, [r7, #4]
 505 00f4 D318     		add	r3, r2, r3
 506 00f6 0022     		mov	r2, #0
 507 00f8 1A70     		strb	r2, [r3]
 439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_lowBaselineReset[sensor])
 508              		.loc 1 439 0
 509 00fa 4CE0     		b	.L23
 510              	.L21:
 443:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 444:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
 445:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 446:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 511              		.loc 1 446 0
 512 00fc 404A     		ldr	r2, .L29+24
 513 00fe 7B68     		ldr	r3, [r7, #4]
 514 0100 D318     		add	r3, r2, r3
 515 0102 1B78     		ldrb	r3, [r3]
 516 0104 0133     		add	r3, r3, #1
 517 0106 DAB2     		uxtb	r2, r3
 518 0108 3D49     		ldr	r1, .L29+24
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 18


 519 010a 7B68     		ldr	r3, [r7, #4]
 520 010c CB18     		add	r3, r1, r3
 521 010e 1A70     		strb	r2, [r3]
 439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_lowBaselineReset[sensor])
 522              		.loc 1 439 0
 523 0110 41E0     		b	.L23
 524              	.L20:
 447:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 448:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 449:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else
 450:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 451:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 452:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)			
 453:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* Update Baseline if lower than noiseThreshold */
 454:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			if ( (tempRaw <= noiseThreshold) || 
 525              		.loc 1 454 0
 526 0112 3B1C     		mov	r3, r7
 527 0114 0E33     		add	r3, r3, #14
 528 0116 1B78     		ldrb	r3, [r3]
 529 0118 9BB2     		uxth	r3, r3
 530 011a 3A1C     		mov	r2, r7
 531 011c 1232     		add	r2, r2, #18
 532 011e 1288     		ldrh	r2, [r2]
 533 0120 9A42     		cmp	r2, r3
 534 0122 0CD9     		bls	.L24
 455:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			 ((tempRaw < (uint16) CapSense_negativeNoiseThreshold[widget])
 535              		.loc 1 455 0 discriminator 1
 536 0124 3B1C     		mov	r3, r7
 537 0126 0F33     		add	r3, r3, #15
 538 0128 1B78     		ldrb	r3, [r3]
 539 012a 364A     		ldr	r2, .L29+28
 540 012c D35C     		ldrb	r3, [r2, r3]
 454:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			if ( (tempRaw <= noiseThreshold) || 
 541              		.loc 1 454 0 discriminator 1
 542 012e 3A1C     		mov	r2, r7
 543 0130 1232     		add	r2, r2, #18
 544 0132 1288     		ldrh	r2, [r2]
 545 0134 9A42     		cmp	r2, r3
 546 0136 2ED2     		bcs	.L23
 456:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			   && (sign == 0u)))
 547              		.loc 1 456 0
 548 0138 7B69     		ldr	r3, [r7, #20]
 549 013a 002B     		cmp	r3, #0
 550 013c 2BD1     		bne	.L23
 551              	.L24:
 457:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			{
 458:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
 459:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* Update Baseline if lower than noiseThreshold */
 460:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			if ( (tempRaw <= noiseThreshold) || 
 461:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 				 ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 462:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 				   && (sign == 0u)))
 463:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			{
 464:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */ 
 465:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 466:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 467:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 552              		.loc 1 467 0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 19


 553 013e 2F4B     		ldr	r3, .L29+20
 554 0140 7A68     		ldr	r2, [r7, #4]
 555 0142 5200     		lsl	r2, r2, #1
 556 0144 D35A     		ldrh	r3, [r2, r3]
 557 0146 1B02     		lsl	r3, r3, #8
 558 0148 BB60     		str	r3, [r7, #8]
 468:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 559              		.loc 1 468 0
 560 014a 304A     		ldr	r2, .L29+36
 561 014c 7B68     		ldr	r3, [r7, #4]
 562 014e D318     		add	r3, r2, r3
 563 0150 1B78     		ldrb	r3, [r3]
 564 0152 BA68     		ldr	r2, [r7, #8]
 565 0154 1343     		orr	r3, r2
 566 0156 BB60     		str	r3, [r7, #8]
 469:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 470:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
 471:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc += filteredRawData;
 567              		.loc 1 471 0
 568 0158 3B1C     		mov	r3, r7
 569 015a 1033     		add	r3, r3, #16
 570 015c 1B88     		ldrh	r3, [r3]
 571 015e BA68     		ldr	r2, [r7, #8]
 572 0160 D318     		add	r3, r2, r3
 573 0162 BB60     		str	r3, [r7, #8]
 472:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 473:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 474:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 574              		.loc 1 474 0
 575 0164 254B     		ldr	r3, .L29+20
 576 0166 7A68     		ldr	r2, [r7, #4]
 577 0168 5200     		lsl	r2, r2, #1
 578 016a D35A     		ldrh	r3, [r2, r3]
 579 016c BA68     		ldr	r2, [r7, #8]
 580 016e D31A     		sub	r3, r2, r3
 581 0170 BB60     		str	r3, [r7, #8]
 475:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 476:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 477:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 582              		.loc 1 477 0
 583 0172 BB68     		ldr	r3, [r7, #8]
 584 0174 1B0A     		lsr	r3, r3, #8
 585 0176 99B2     		uxth	r1, r3
 586 0178 204B     		ldr	r3, .L29+20
 587 017a 7A68     		ldr	r2, [r7, #4]
 588 017c 5200     		lsl	r2, r2, #1
 589 017e D152     		strh	r1, [r2, r3]
 478:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 590              		.loc 1 478 0
 591 0180 BB68     		ldr	r3, [r7, #8]
 592 0182 DAB2     		uxtb	r2, r3
 593 0184 2149     		ldr	r1, .L29+36
 594 0186 7B68     		ldr	r3, [r7, #4]
 595 0188 CB18     		add	r3, r1, r3
 596 018a 1A70     		strb	r2, [r3]
 479:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 480:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 20


 597              		.loc 1 480 0
 598 018c 1C4A     		ldr	r2, .L29+24
 599 018e 7B68     		ldr	r3, [r7, #4]
 600 0190 D318     		add	r3, r2, r3
 601 0192 0022     		mov	r2, #0
 602 0194 1A70     		strb	r2, [r3]
 603              	.L23:
 481:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 482:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
 483:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 484:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 485:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 486:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Calculate Signal if positive difference > noiseThreshold */
 487:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (sign != 0u))
 604              		.loc 1 487 0
 605 0196 3B1C     		mov	r3, r7
 606 0198 0E33     		add	r3, r3, #14
 607 019a 1B78     		ldrb	r3, [r3]
 608 019c 9BB2     		uxth	r3, r3
 609 019e 3A1C     		mov	r2, r7
 610 01a0 1232     		add	r2, r2, #18
 611 01a2 1288     		ldrh	r2, [r2]
 612 01a4 9A42     		cmp	r2, r3
 613 01a6 16D9     		bls	.L25
 614              		.loc 1 487 0 is_stmt 0 discriminator 1
 615 01a8 7B69     		ldr	r3, [r7, #20]
 616 01aa 002B     		cmp	r3, #0
 617 01ac 13D0     		beq	.L25
 488:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 489:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 490:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 491:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 618              		.loc 1 491 0 is_stmt 1
 619 01ae 3B1C     		mov	r3, r7
 620 01b0 1233     		add	r3, r3, #18
 621 01b2 1B88     		ldrh	r3, [r3]
 622 01b4 FF2B     		cmp	r3, #255
 623 01b6 05D9     		bls	.L26
 492:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
 493:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 624              		.loc 1 493 0
 625 01b8 154A     		ldr	r2, .L29+40
 626 01ba 7B68     		ldr	r3, [r7, #4]
 627 01bc D318     		add	r3, r2, r3
 628 01be FF22     		mov	r2, #255
 629 01c0 1A70     		strb	r2, [r3]
 491:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 630              		.loc 1 491 0
 631 01c2 0DE0     		b	.L16
 632              	.L26:
 494:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }    
 495:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else 
 496:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
 497:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 633              		.loc 1 497 0
 634 01c4 3B1C     		mov	r3, r7
 635 01c6 1233     		add	r3, r3, #18
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 21


 636 01c8 1B88     		ldrh	r3, [r3]
 637 01ca DAB2     		uxtb	r2, r3
 638 01cc 1049     		ldr	r1, .L29+40
 639 01ce 7B68     		ldr	r3, [r7, #4]
 640 01d0 CB18     		add	r3, r1, r3
 641 01d2 1A70     		strb	r2, [r3]
 491:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 642              		.loc 1 491 0
 643 01d4 04E0     		b	.L16
 644              	.L25:
 498:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
 499:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #else
 500:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 501:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 502:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 503:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else
 504:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 505:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Signal is zero */
 506:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 645              		.loc 1 506 0
 646 01d6 0E4A     		ldr	r2, .L29+40
 647 01d8 7B68     		ldr	r3, [r7, #4]
 648 01da D318     		add	r3, r2, r3
 649 01dc 0022     		mov	r2, #0
 650 01de 1A70     		strb	r2, [r3]
 651              	.L16:
 507:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 508:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 509:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 510:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 511:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 512:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 513:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 652              		.loc 1 513 0
 653 01e0 BD46     		mov	sp, r7
 654 01e2 07B0     		add	sp, sp, #28
 655              		@ sp needed
 656 01e4 90BD     		pop	{r4, r7, pc}
 657              	.L30:
 658 01e6 C046     		.align	2
 659              	.L29:
 660 01e8 00000000 		.word	CapSense_widgetNumber
 661 01ec 00000000 		.word	CapSense_noiseThreshold
 662 01f0 00000000 		.word	CapSense_sensorRaw
 663 01f4 00000000 		.word	CapSense_enableRawFilters
 664 01f8 00000000 		.word	CapSense_rawFilterData1
 665 01fc 00000000 		.word	CapSense_sensorBaseline
 666 0200 00000000 		.word	CapSense_lowBaselineResetCnt
 667 0204 00000000 		.word	CapSense_negativeNoiseThreshold
 668 0208 00000000 		.word	CapSense_lowBaselineReset
 669 020c 00000000 		.word	CapSense_sensorBaselineLow
 670 0210 00000000 		.word	CapSense_sensorSignal
 671              		.cfi_endproc
 672              	.LFE39:
 673              		.size	CapSense_UpdateBaselineNoThreshold, .-CapSense_UpdateBaselineNoThreshold
 674              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 675              		.align	2
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 22


 676              		.global	CapSense_UpdateSensorBaseline
 677              		.code	16
 678              		.thumb_func
 679              		.type	CapSense_UpdateSensorBaseline, %function
 680              	CapSense_UpdateSensorBaseline:
 681              	.LFB40:
 514:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 515:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 516:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 517:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 518:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 519:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 520:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 521:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 522:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 523:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 524:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  it in CapSense_sensorSignal[sensor]. 
 525:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold. 
 526:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating. 
 527:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Baseline is loaded with raw count value if a signal is greater than zero and  
 528:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  if signal is less than noise threshold.
 529:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 530:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  calculation.
 531:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API updates the thresholds in the Smartsense Mode.
 532:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 533:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 534:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 535:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 536:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 537:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 538:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 539:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 540:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumber[]  - stores widget numbers.
 541:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 542:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 543:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 544:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 545:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 546:.\Generated_Source\PSoC4/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint32 sensor)
 547:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 682              		.loc 1 547 0
 683              		.cfi_startproc
 684 0000 80B5     		push	{r7, lr}
 685              		.cfi_def_cfa_offset 8
 686              		.cfi_offset 7, -8
 687              		.cfi_offset 14, -4
 688 0002 82B0     		sub	sp, sp, #8
 689              		.cfi_def_cfa_offset 16
 690 0004 00AF     		add	r7, sp, #0
 691              		.cfi_def_cfa_register 7
 692 0006 7860     		str	r0, [r7, #4]
 548:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 549:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint32 widget;
 550:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
 551:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		widget = CapSense_widgetNumber[sensor];
 552:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 553:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 23


 554:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 555:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 556:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 557:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 558:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
 559:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     	CapSense_UpdateThresholds(sensor);
 560:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
 561:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 562:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_UpdateBaselineNoThreshold(sensor);
 693              		.loc 1 562 0
 694 0008 7B68     		ldr	r3, [r7, #4]
 695 000a 181C     		mov	r0, r3
 696 000c FFF7FEFF 		bl	CapSense_UpdateBaselineNoThreshold
 563:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 564:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 565:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 566:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 567:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 568:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 697              		.loc 1 568 0
 698 0010 BD46     		mov	sp, r7
 699 0012 02B0     		add	sp, sp, #8
 700              		@ sp needed
 701 0014 80BD     		pop	{r7, pc}
 702              		.cfi_endproc
 703              	.LFE40:
 704              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 705 0016 C046     		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 706              		.align	2
 707              		.global	CapSense_UpdateEnabledBaselines
 708              		.code	16
 709              		.thumb_func
 710              		.type	CapSense_UpdateEnabledBaselines, %function
 711              	CapSense_UpdateEnabledBaselines:
 712              	.LFB41:
 569:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 570:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 571:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 572:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 573:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 574:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 575:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 576:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 577:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 578:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for the enabled sensors.
 579:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 580:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 581:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 582:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 583:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 584:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 585:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 586:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 587:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 588:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
 589:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 590:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 24


 591:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 592:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 593:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 594:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 595:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 596:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 597:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 598:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 599:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 600:.\Generated_Source\PSoC4/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 601:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 713              		.loc 1 601 0
 714              		.cfi_startproc
 715 0000 80B5     		push	{r7, lr}
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 82B0     		sub	sp, sp, #8
 720              		.cfi_def_cfa_offset 16
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 602:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 603:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 isSensorEnabled;
 604:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 723              		.loc 1 605 0
 724 0006 0023     		mov	r3, #0
 725 0008 7B60     		str	r3, [r7, #4]
 726 000a 11E0     		b	.L33
 727              	.L35:
 606:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 607:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         isSensorEnabled = CapSense_GetBitValue(CapSense_sensorEnableMask, i);
 728              		.loc 1 607 0
 729 000c 0B4A     		ldr	r2, .L36
 730 000e 7B68     		ldr	r3, [r7, #4]
 731 0010 101C     		mov	r0, r2
 732 0012 191C     		mov	r1, r3
 733 0014 FFF7FEFF 		bl	CapSense_GetBitValue
 734 0018 031C     		mov	r3, r0
 735 001a 3B60     		str	r3, [r7]
 608:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 609:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(0u != isSensorEnabled)
 736              		.loc 1 609 0
 737 001c 3B68     		ldr	r3, [r7]
 738 001e 002B     		cmp	r3, #0
 739 0020 03D0     		beq	.L34
 610:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 611:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 740              		.loc 1 611 0
 741 0022 7B68     		ldr	r3, [r7, #4]
 742 0024 181C     		mov	r0, r3
 743 0026 FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 744              	.L34:
 605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 745              		.loc 1 605 0
 746 002a 7B68     		ldr	r3, [r7, #4]
 747 002c 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 25


 748 002e 7B60     		str	r3, [r7, #4]
 749              	.L33:
 605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 750              		.loc 1 605 0 is_stmt 0 discriminator 1
 751 0030 7B68     		ldr	r3, [r7, #4]
 752 0032 002B     		cmp	r3, #0
 753 0034 EAD0     		beq	.L35
 612:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 613:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 614:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 754              		.loc 1 614 0 is_stmt 1
 755 0036 BD46     		mov	sp, r7
 756 0038 02B0     		add	sp, sp, #8
 757              		@ sp needed
 758 003a 80BD     		pop	{r7, pc}
 759              	.L37:
 760              		.align	2
 761              	.L36:
 762 003c 00000000 		.word	CapSense_sensorEnableMask
 763              		.cfi_endproc
 764              	.LFE41:
 765              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
 766              		.section	.text.CapSense_UpdateWidgetBaseline,"ax",%progbits
 767              		.align	2
 768              		.global	CapSense_UpdateWidgetBaseline
 769              		.code	16
 770              		.thumb_func
 771              		.type	CapSense_UpdateWidgetBaseline, %function
 772              	CapSense_UpdateWidgetBaseline:
 773              	.LFB42:
 615:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 616:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 617:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateWidgetBaseline
 618:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 619:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 620:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 621:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 622:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 623:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for the enabled sensors that belong to widget.
 624:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 625:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 626:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  Widget number.
 627:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 628:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 629:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 630:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 631:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 632:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 633:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
 634:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 635:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 636:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 637:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 638:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 639:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 640:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 641:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 26


 642:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 643:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 644:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 645:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_UpdateWidgetBaseline(uint32 widget)
 646:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 774              		.loc 1 646 0
 775              		.cfi_startproc
 776 0000 80B5     		push	{r7, lr}
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 0002 88B0     		sub	sp, sp, #32
 781              		.cfi_def_cfa_offset 40
 782 0004 00AF     		add	r7, sp, #0
 783              		.cfi_def_cfa_register 7
 784 0006 7860     		str	r0, [r7, #4]
 647:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 sensorsPerWidget;
 648:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 firstSensor;
 649:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 lastSensor;
 650:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 651:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 isSensorEnabled;
 652:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 653:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/* Get number of sensors in widget */
 654:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	sensorsPerWidget = CapSense_numberOfSensors[widget];
 785              		.loc 1 654 0
 786 0008 0123     		mov	r3, #1
 787 000a BB61     		str	r3, [r7, #24]
 655:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 656:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/* Get first sensor in widget */
 657:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	firstSensor = CapSense_rawDataIndex[widget];
 788              		.loc 1 657 0
 789 000c 0023     		mov	r3, #0
 790 000e 7B61     		str	r3, [r7, #20]
 658:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 659:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/* Get last sensor in widget */
 660:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	lastSensor = (CapSense_rawDataIndex[widget] + sensorsPerWidget);
 791              		.loc 1 660 0
 792 0010 0023     		mov	r3, #0
 793 0012 1A1C     		mov	r2, r3
 794 0014 BB69     		ldr	r3, [r7, #24]
 795 0016 D318     		add	r3, r2, r3
 796 0018 3B61     		str	r3, [r7, #16]
 661:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 797              		.loc 1 662 0
 798 001a 7B69     		ldr	r3, [r7, #20]
 799 001c FB61     		str	r3, [r7, #28]
 800 001e 11E0     		b	.L39
 801              	.L41:
 663:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 664:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         isSensorEnabled = CapSense_GetBitValue(CapSense_sensorEnableMask, i);
 802              		.loc 1 664 0
 803 0020 0C4A     		ldr	r2, .L42
 804 0022 FB69     		ldr	r3, [r7, #28]
 805 0024 101C     		mov	r0, r2
 806 0026 191C     		mov	r1, r3
 807 0028 FFF7FEFF 		bl	CapSense_GetBitValue
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 27


 808 002c 031C     		mov	r3, r0
 809 002e FB60     		str	r3, [r7, #12]
 665:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 666:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(0u != isSensorEnabled)
 810              		.loc 1 666 0
 811 0030 FB68     		ldr	r3, [r7, #12]
 812 0032 002B     		cmp	r3, #0
 813 0034 03D0     		beq	.L40
 667:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 668:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 814              		.loc 1 668 0
 815 0036 FB69     		ldr	r3, [r7, #28]
 816 0038 181C     		mov	r0, r3
 817 003a FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 818              	.L40:
 662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 819              		.loc 1 662 0
 820 003e FB69     		ldr	r3, [r7, #28]
 821 0040 0133     		add	r3, r3, #1
 822 0042 FB61     		str	r3, [r7, #28]
 823              	.L39:
 662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 824              		.loc 1 662 0 is_stmt 0 discriminator 1
 825 0044 FA69     		ldr	r2, [r7, #28]
 826 0046 3B69     		ldr	r3, [r7, #16]
 827 0048 9A42     		cmp	r2, r3
 828 004a E9D3     		bcc	.L41
 669:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 670:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 671:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 829              		.loc 1 671 0 is_stmt 1
 830 004c BD46     		mov	sp, r7
 831 004e 08B0     		add	sp, sp, #32
 832              		@ sp needed
 833 0050 80BD     		pop	{r7, pc}
 834              	.L43:
 835 0052 C046     		.align	2
 836              	.L42:
 837 0054 00000000 		.word	CapSense_sensorEnableMask
 838              		.cfi_endproc
 839              	.LFE42:
 840              		.size	CapSense_UpdateWidgetBaseline, .-CapSense_UpdateWidgetBaseline
 841              		.section	.text.CapSense_GetBaselineData,"ax",%progbits
 842              		.align	2
 843              		.global	CapSense_GetBaselineData
 844              		.code	16
 845              		.thumb_func
 846              		.type	CapSense_GetBaselineData, %function
 847              	CapSense_GetBaselineData:
 848              	.LFB43:
 672:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 673:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 674:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 675:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetBaselineData
 676:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 677:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 678:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 28


 679:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the sensor baseline from the component.
 680:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 681:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 682:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 683:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 684:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 685:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the baseline value of the sensor indicated by an argument.
 686:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 687:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 688:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] - the array with an initial values by scanning
 689:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 690:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 691:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 692:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 693:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 694:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetBaselineData(uint32 sensor)
 695:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 849              		.loc 1 695 0
 850              		.cfi_startproc
 851 0000 80B5     		push	{r7, lr}
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 7, -8
 854              		.cfi_offset 14, -4
 855 0002 82B0     		sub	sp, sp, #8
 856              		.cfi_def_cfa_offset 16
 857 0004 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 859 0006 7860     		str	r0, [r7, #4]
 696:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return (CapSense_sensorBaseline[sensor]);
 860              		.loc 1 696 0
 861 0008 034B     		ldr	r3, .L46
 862 000a 7A68     		ldr	r2, [r7, #4]
 863 000c 5200     		lsl	r2, r2, #1
 864 000e D35A     		ldrh	r3, [r2, r3]
 697:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 865              		.loc 1 697 0
 866 0010 181C     		mov	r0, r3
 867 0012 BD46     		mov	sp, r7
 868 0014 02B0     		add	sp, sp, #8
 869              		@ sp needed
 870 0016 80BD     		pop	{r7, pc}
 871              	.L47:
 872              		.align	2
 873              	.L46:
 874 0018 00000000 		.word	CapSense_sensorBaseline
 875              		.cfi_endproc
 876              	.LFE43:
 877              		.size	CapSense_GetBaselineData, .-CapSense_GetBaselineData
 878              		.section	.text.CapSense_SetBaselineData,"ax",%progbits
 879              		.align	2
 880              		.global	CapSense_SetBaselineData
 881              		.code	16
 882              		.thumb_func
 883              		.type	CapSense_SetBaselineData, %function
 884              	CapSense_SetBaselineData:
 885              	.LFB44:
 698:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 29


 699:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 700:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 701:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_SetBaselineData
 702:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 703:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 704:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 705:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API writes the data value passed as an argument to the sensor baseline array.
 706:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 707:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 708:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 709:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  data:    Sensor baseline.
 710:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 711:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 712:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None.
 713:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 714:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 715:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] - the array with initial values by scanning
 716:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 717:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 718:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 719:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 720:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 721:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_SetBaselineData(uint32 sensor, uint16 data)
 722:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 886              		.loc 1 722 0
 887              		.cfi_startproc
 888 0000 80B5     		push	{r7, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 82B0     		sub	sp, sp, #8
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
 897 0008 0A1C     		mov	r2, r1
 898 000a BB1C     		add	r3, r7, #2
 899 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	CapSense_sensorBaseline[sensor] = data;
 900              		.loc 1 723 0
 901 000e 044B     		ldr	r3, .L49
 902 0010 7A68     		ldr	r2, [r7, #4]
 903 0012 5200     		lsl	r2, r2, #1
 904 0014 B91C     		add	r1, r7, #2
 905 0016 0988     		ldrh	r1, [r1]
 906 0018 D152     		strh	r1, [r2, r3]
 724:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 907              		.loc 1 724 0
 908 001a BD46     		mov	sp, r7
 909 001c 02B0     		add	sp, sp, #8
 910              		@ sp needed
 911 001e 80BD     		pop	{r7, pc}
 912              	.L50:
 913              		.align	2
 914              	.L49:
 915 0020 00000000 		.word	CapSense_sensorBaseline
 916              		.cfi_endproc
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 30


 917              	.LFE44:
 918              		.size	CapSense_SetBaselineData, .-CapSense_SetBaselineData
 919              		.section	.text.CapSense_GetDiffCountData,"ax",%progbits
 920              		.align	2
 921              		.global	CapSense_GetDiffCountData
 922              		.code	16
 923              		.thumb_func
 924              		.type	CapSense_GetDiffCountData, %function
 925              	CapSense_GetDiffCountData:
 926              	.LFB45:
 725:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 726:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 727:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 728:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetDiffCountData
 729:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 730:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 731:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 732:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function returns the Sensor Signal from the component.
 733:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 734:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 735:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 736:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 737:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 738:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the difference count value of the sensor indicated by the 
 739:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  argument. 
 740:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 741:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 742:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[] - the array with difference counts for sensors
 743:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 744:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 745:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 746:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 747:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 748:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetDiffCountData(uint32 sensor)
 749:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 927              		.loc 1 749 0
 928              		.cfi_startproc
 929 0000 80B5     		push	{r7, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 82B0     		sub	sp, sp, #8
 934              		.cfi_def_cfa_offset 16
 935 0004 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 937 0006 7860     		str	r0, [r7, #4]
 750:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return (CapSense_sensorSignal[sensor]);
 938              		.loc 1 750 0
 939 0008 034A     		ldr	r2, .L53
 940 000a 7B68     		ldr	r3, [r7, #4]
 941 000c D318     		add	r3, r2, r3
 942 000e 1B78     		ldrb	r3, [r3]
 751:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 943              		.loc 1 751 0
 944 0010 181C     		mov	r0, r3
 945 0012 BD46     		mov	sp, r7
 946 0014 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 31


 947              		@ sp needed
 948 0016 80BD     		pop	{r7, pc}
 949              	.L54:
 950              		.align	2
 951              	.L53:
 952 0018 00000000 		.word	CapSense_sensorSignal
 953              		.cfi_endproc
 954              	.LFE45:
 955              		.size	CapSense_GetDiffCountData, .-CapSense_GetDiffCountData
 956              		.section	.text.CapSense_SetDiffCountData,"ax",%progbits
 957              		.align	2
 958              		.global	CapSense_SetDiffCountData
 959              		.code	16
 960              		.thumb_func
 961              		.type	CapSense_SetDiffCountData, %function
 962              	CapSense_SetDiffCountData:
 963              	.LFB46:
 752:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 753:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 754:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 755:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_SetDiffCountData
 756:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 757:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 758:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 759:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API writes the data value passed as an argument to the sensor signal array.
 760:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 761:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 762:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 763:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  value:   Sensor signal.
 764:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 765:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 766:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None. 
 767:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 768:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 769:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[] - the array with difference counts for sensors
 770:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 771:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 772:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 773:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 774:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 775:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_SetDiffCountData(uint32 sensor, uint8 value)
 776:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 964              		.loc 1 776 0
 965              		.cfi_startproc
 966 0000 80B5     		push	{r7, lr}
 967              		.cfi_def_cfa_offset 8
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 82B0     		sub	sp, sp, #8
 971              		.cfi_def_cfa_offset 16
 972 0004 00AF     		add	r7, sp, #0
 973              		.cfi_def_cfa_register 7
 974 0006 7860     		str	r0, [r7, #4]
 975 0008 0A1C     		mov	r2, r1
 976 000a FB1C     		add	r3, r7, #3
 977 000c 1A70     		strb	r2, [r3]
 777:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = value;
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 32


 978              		.loc 1 777 0
 979 000e 044A     		ldr	r2, .L56
 980 0010 7B68     		ldr	r3, [r7, #4]
 981 0012 D318     		add	r3, r2, r3
 982 0014 FA1C     		add	r2, r7, #3
 983 0016 1278     		ldrb	r2, [r2]
 984 0018 1A70     		strb	r2, [r3]
 778:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 985              		.loc 1 778 0
 986 001a BD46     		mov	sp, r7
 987 001c 02B0     		add	sp, sp, #8
 988              		@ sp needed
 989 001e 80BD     		pop	{r7, pc}
 990              	.L57:
 991              		.align	2
 992              	.L56:
 993 0020 00000000 		.word	CapSense_sensorSignal
 994              		.cfi_endproc
 995              	.LFE46:
 996              		.size	CapSense_SetDiffCountData, .-CapSense_SetDiffCountData
 997              		.section	.text.CapSense_GetFingerThreshold,"ax",%progbits
 998              		.align	2
 999              		.global	CapSense_GetFingerThreshold
 1000              		.code	16
 1001              		.thumb_func
 1002              		.type	CapSense_GetFingerThreshold, %function
 1003              	CapSense_GetFingerThreshold:
 1004              	.LFB47:
 779:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 780:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 781:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 782:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetFingerThreshold
 783:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 784:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 785:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 786:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the finger threshold from the component.
 787:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 788:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 789:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
 790:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 791:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 792:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the finger threshold of the widget indicated by the argument. 
 793:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 794:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 795:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_fingerThreshold[] - This array contains the level of signal 
 796:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for each widget that is determined if a finger is present on the widget.
 797:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 798:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 799:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 800:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 801:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 802:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetFingerThreshold(uint32 widget)
 803:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1005              		.loc 1 803 0
 1006              		.cfi_startproc
 1007 0000 80B5     		push	{r7, lr}
 1008              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 33


 1009              		.cfi_offset 7, -8
 1010              		.cfi_offset 14, -4
 1011 0002 82B0     		sub	sp, sp, #8
 1012              		.cfi_def_cfa_offset 16
 1013 0004 00AF     		add	r7, sp, #0
 1014              		.cfi_def_cfa_register 7
 1015 0006 7860     		str	r0, [r7, #4]
 804:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_fingerThreshold[widget]);
 1016              		.loc 1 804 0
 1017 0008 034A     		ldr	r2, .L60
 1018 000a 7B68     		ldr	r3, [r7, #4]
 1019 000c D318     		add	r3, r2, r3
 1020 000e 1B78     		ldrb	r3, [r3]
 805:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1021              		.loc 1 805 0
 1022 0010 181C     		mov	r0, r3
 1023 0012 BD46     		mov	sp, r7
 1024 0014 02B0     		add	sp, sp, #8
 1025              		@ sp needed
 1026 0016 80BD     		pop	{r7, pc}
 1027              	.L61:
 1028              		.align	2
 1029              	.L60:
 1030 0018 00000000 		.word	CapSense_fingerThreshold
 1031              		.cfi_endproc
 1032              	.LFE47:
 1033              		.size	CapSense_GetFingerThreshold, .-CapSense_GetFingerThreshold
 1034              		.section	.text.CapSense_GetNoiseThreshold,"ax",%progbits
 1035              		.align	2
 1036              		.global	CapSense_GetNoiseThreshold
 1037              		.code	16
 1038              		.thumb_func
 1039              		.type	CapSense_GetNoiseThreshold, %function
 1040              	CapSense_GetNoiseThreshold:
 1041              	.LFB48:
 806:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 807:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 808:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 809:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetNoiseThreshold
 810:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 811:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 812:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 813:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the noise threshold from the component.
 814:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 815:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 816:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
 817:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 818:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 819:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the noise threshold of the widget indicated by the argument. 
 820:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 821:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 822:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_noiseThreshold[] - This array contains the level of signal 
 823:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for each widget that determines the level of noise in the capacitive scan.
 824:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 825:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 826:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 827:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 34


 828:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 829:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetNoiseThreshold(uint32 widget)
 830:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1042              		.loc 1 830 0
 1043              		.cfi_startproc
 1044 0000 80B5     		push	{r7, lr}
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 7, -8
 1047              		.cfi_offset 14, -4
 1048 0002 82B0     		sub	sp, sp, #8
 1049              		.cfi_def_cfa_offset 16
 1050 0004 00AF     		add	r7, sp, #0
 1051              		.cfi_def_cfa_register 7
 1052 0006 7860     		str	r0, [r7, #4]
 831:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return (CapSense_noiseThreshold[widget]);
 1053              		.loc 1 831 0
 1054 0008 034A     		ldr	r2, .L64
 1055 000a 7B68     		ldr	r3, [r7, #4]
 1056 000c D318     		add	r3, r2, r3
 1057 000e 1B78     		ldrb	r3, [r3]
 832:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1058              		.loc 1 832 0
 1059 0010 181C     		mov	r0, r3
 1060 0012 BD46     		mov	sp, r7
 1061 0014 02B0     		add	sp, sp, #8
 1062              		@ sp needed
 1063 0016 80BD     		pop	{r7, pc}
 1064              	.L65:
 1065              		.align	2
 1066              	.L64:
 1067 0018 00000000 		.word	CapSense_noiseThreshold
 1068              		.cfi_endproc
 1069              	.LFE48:
 1070              		.size	CapSense_GetNoiseThreshold, .-CapSense_GetNoiseThreshold
 1071              		.section	.text.CapSense_GetFingerHysteresis,"ax",%progbits
 1072              		.align	2
 1073              		.global	CapSense_GetFingerHysteresis
 1074              		.code	16
 1075              		.thumb_func
 1076              		.type	CapSense_GetFingerHysteresis, %function
 1077              	CapSense_GetFingerHysteresis:
 1078              	.LFB49:
 833:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 834:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 835:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 836:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetFingerHysteresis
 837:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 838:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 839:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 840:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the Hysteresis value from the component.
 841:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 842:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 843:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
 844:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 845:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 846:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the Hysteresis of the widget indicated by the argument. 
 847:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 35


 848:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 849:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_hysteresis[] - This array contains the hysteresis value 
 850:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   for each widget.
 851:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumberSld - structure with dynamic sliders' parameters.
 852:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 853:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 854:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 855:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 856:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 857:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetFingerHysteresis(uint32 widget)
 858:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1079              		.loc 1 858 0
 1080              		.cfi_startproc
 1081 0000 80B5     		push	{r7, lr}
 1082              		.cfi_def_cfa_offset 8
 1083              		.cfi_offset 7, -8
 1084              		.cfi_offset 14, -4
 1085 0002 82B0     		sub	sp, sp, #8
 1086              		.cfi_def_cfa_offset 16
 1087 0004 00AF     		add	r7, sp, #0
 1088              		.cfi_def_cfa_register 7
 1089 0006 7860     		str	r0, [r7, #4]
 859:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_hysteresis[widget]);
 1090              		.loc 1 859 0
 1091 0008 034A     		ldr	r2, .L68
 1092 000a 7B68     		ldr	r3, [r7, #4]
 1093 000c D318     		add	r3, r2, r3
 1094 000e 1B78     		ldrb	r3, [r3]
 860:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1095              		.loc 1 860 0
 1096 0010 181C     		mov	r0, r3
 1097 0012 BD46     		mov	sp, r7
 1098 0014 02B0     		add	sp, sp, #8
 1099              		@ sp needed
 1100 0016 80BD     		pop	{r7, pc}
 1101              	.L69:
 1102              		.align	2
 1103              	.L68:
 1104 0018 00000000 		.word	CapSense_hysteresis
 1105              		.cfi_endproc
 1106              	.LFE49:
 1107              		.size	CapSense_GetFingerHysteresis, .-CapSense_GetFingerHysteresis
 1108              		.section	.text.CapSense_GetNegativeNoiseThreshold,"ax",%progbits
 1109              		.align	2
 1110              		.global	CapSense_GetNegativeNoiseThreshold
 1111              		.code	16
 1112              		.thumb_func
 1113              		.type	CapSense_GetNegativeNoiseThreshold, %function
 1114              	CapSense_GetNegativeNoiseThreshold:
 1115              	.LFB50:
 861:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 862:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 863:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 864:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetNegativeNoiseThreshold
 865:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 866:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 867:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 36


 868:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the negative noise threshold from the component.
 869:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 870:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters: 
 871:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None.
 872:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 873:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return Value: 
 874:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the negative noise threshold
 875:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 876:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 877:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_negativeNoiseThreshold - This variable specifies the negative 
 878:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   difference between the raw count and baseline levels for Baseline resetting
 879:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   to the raw count level.
 880:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 881:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 882:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 883:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 884:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 885:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetNegativeNoiseThreshold(uint32 widget)
 886:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1116              		.loc 1 886 0
 1117              		.cfi_startproc
 1118 0000 80B5     		push	{r7, lr}
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 82B0     		sub	sp, sp, #8
 1123              		.cfi_def_cfa_offset 16
 1124 0004 00AF     		add	r7, sp, #0
 1125              		.cfi_def_cfa_register 7
 1126 0006 7860     		str	r0, [r7, #4]
 887:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
 888:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_negativeNoiseThreshold[widget]);
 1127              		.loc 1 888 0
 1128 0008 034A     		ldr	r2, .L72
 1129 000a 7B68     		ldr	r3, [r7, #4]
 1130 000c D318     		add	r3, r2, r3
 1131 000e 1B78     		ldrb	r3, [r3]
 889:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #else
 890:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_NEGATIVE_NOISE_THRESHOLD);
 891:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */ 
 892:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1132              		.loc 1 892 0
 1133 0010 181C     		mov	r0, r3
 1134 0012 BD46     		mov	sp, r7
 1135 0014 02B0     		add	sp, sp, #8
 1136              		@ sp needed
 1137 0016 80BD     		pop	{r7, pc}
 1138              	.L73:
 1139              		.align	2
 1140              	.L72:
 1141 0018 00000000 		.word	CapSense_negativeNoiseThreshold
 1142              		.cfi_endproc
 1143              	.LFE50:
 1144              		.size	CapSense_GetNegativeNoiseThreshold, .-CapSense_GetNegativeNoiseThreshold
 1145              		.section	.text.CapSense_SetFingerThreshold,"ax",%progbits
 1146              		.align	2
 1147              		.global	CapSense_SetFingerThreshold
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 37


 1148              		.code	16
 1149              		.thumb_func
 1150              		.type	CapSense_SetFingerThreshold, %function
 1151              	CapSense_SetFingerThreshold:
 1152              	.LFB51:
 893:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 894:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 895:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if(CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
 896:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 897:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetFingerThreshold
 898:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 899:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 900:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 901:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the finger threshold value for a widget. 
 902:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 903:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
 904:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  sensorNumber:  widget index. 
 905:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Finger threshold value for the widget.
 906:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 907:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 908:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 909:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 910:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 911:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_fingerThreshold[] - This array contains the level of signal 
 912:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   for each widget that determines if a finger is present on the widget.
 913:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
 914:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
 915:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 916:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 917:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
 918:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetFingerThreshold(uint32 widget, uint8 value)
 919:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{	
 1153              		.loc 1 919 0
 1154              		.cfi_startproc
 1155 0000 80B5     		push	{r7, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 82B0     		sub	sp, sp, #8
 1160              		.cfi_def_cfa_offset 16
 1161 0004 00AF     		add	r7, sp, #0
 1162              		.cfi_def_cfa_register 7
 1163 0006 7860     		str	r0, [r7, #4]
 1164 0008 0A1C     		mov	r2, r1
 1165 000a FB1C     		add	r3, r7, #3
 1166 000c 1A70     		strb	r2, [r3]
 920:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_fingerThreshold[widget] = value;
 1167              		.loc 1 920 0
 1168 000e 044A     		ldr	r2, .L75
 1169 0010 7B68     		ldr	r3, [r7, #4]
 1170 0012 D318     		add	r3, r2, r3
 1171 0014 FA1C     		add	r2, r7, #3
 1172 0016 1278     		ldrb	r2, [r2]
 1173 0018 1A70     		strb	r2, [r3]
 921:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 1174              		.loc 1 921 0
 1175 001a BD46     		mov	sp, r7
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 38


 1176 001c 02B0     		add	sp, sp, #8
 1177              		@ sp needed
 1178 001e 80BD     		pop	{r7, pc}
 1179              	.L76:
 1180              		.align	2
 1181              	.L75:
 1182 0020 00000000 		.word	CapSense_fingerThreshold
 1183              		.cfi_endproc
 1184              	.LFE51:
 1185              		.size	CapSense_SetFingerThreshold, .-CapSense_SetFingerThreshold
 1186              		.section	.text.CapSense_SetNoiseThreshold,"ax",%progbits
 1187              		.align	2
 1188              		.global	CapSense_SetNoiseThreshold
 1189              		.code	16
 1190              		.thumb_func
 1191              		.type	CapSense_SetNoiseThreshold, %function
 1192              	CapSense_SetNoiseThreshold:
 1193              	.LFB52:
 922:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 923:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 924:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 925:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetNoiseThreshold
 926:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 927:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 928:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 929:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the Noise Threshold value for each widget.
 930:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 931:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters:
 932:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget:  Sensor index number.
 933:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:   Noise Threshold value for widget.
 934:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 935:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 936:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 937:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 938:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 939:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_noiseThreshold[] - This array contains the level of signal 
 940:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   for each widget that determines the level of noise in the capacitive scan.
 941:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
 942:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
 943:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 944:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 945:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
 946:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetNoiseThreshold(uint32 widget, uint8 value)
 947:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 1194              		.loc 1 947 0
 1195              		.cfi_startproc
 1196 0000 80B5     		push	{r7, lr}
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0002 82B0     		sub	sp, sp, #8
 1201              		.cfi_def_cfa_offset 16
 1202 0004 00AF     		add	r7, sp, #0
 1203              		.cfi_def_cfa_register 7
 1204 0006 7860     		str	r0, [r7, #4]
 1205 0008 0A1C     		mov	r2, r1
 1206 000a FB1C     		add	r3, r7, #3
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 39


 1207 000c 1A70     		strb	r2, [r3]
 948:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_noiseThreshold[widget] = value;
 1208              		.loc 1 948 0
 1209 000e 044A     		ldr	r2, .L78
 1210 0010 7B68     		ldr	r3, [r7, #4]
 1211 0012 D318     		add	r3, r2, r3
 1212 0014 FA1C     		add	r2, r7, #3
 1213 0016 1278     		ldrb	r2, [r2]
 1214 0018 1A70     		strb	r2, [r3]
 949:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 1215              		.loc 1 949 0
 1216 001a BD46     		mov	sp, r7
 1217 001c 02B0     		add	sp, sp, #8
 1218              		@ sp needed
 1219 001e 80BD     		pop	{r7, pc}
 1220              	.L79:
 1221              		.align	2
 1222              	.L78:
 1223 0020 00000000 		.word	CapSense_noiseThreshold
 1224              		.cfi_endproc
 1225              	.LFE52:
 1226              		.size	CapSense_SetNoiseThreshold, .-CapSense_SetNoiseThreshold
 1227              		.section	.text.CapSense_SetFingerHysteresis,"ax",%progbits
 1228              		.align	2
 1229              		.global	CapSense_SetFingerHysteresis
 1230              		.code	16
 1231              		.thumb_func
 1232              		.type	CapSense_SetFingerHysteresis, %function
 1233              	CapSense_SetFingerHysteresis:
 1234              	.LFB53:
 950:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 951:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 952:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 953:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetFingerHysteresis
 954:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 955:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 956:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 957:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the Hysteresis value of a widget
 958:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 959:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
 960:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Hysteresis value for widgets.
 961:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget:  widget number
 962:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 963:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 964:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 965:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 966:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 967:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_hysteresis[] - This array contains the hysteresis value for each widget.
 968:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_widgetNumberSld - structure with dynamic sliders' parameters.
 969:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 970:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
 971:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 972:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 973:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
 974:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetFingerHysteresis(uint32 widget, uint8 value)
 975:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 1235              		.loc 1 975 0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 40


 1236              		.cfi_startproc
 1237 0000 80B5     		push	{r7, lr}
 1238              		.cfi_def_cfa_offset 8
 1239              		.cfi_offset 7, -8
 1240              		.cfi_offset 14, -4
 1241 0002 82B0     		sub	sp, sp, #8
 1242              		.cfi_def_cfa_offset 16
 1243 0004 00AF     		add	r7, sp, #0
 1244              		.cfi_def_cfa_register 7
 1245 0006 7860     		str	r0, [r7, #4]
 1246 0008 0A1C     		mov	r2, r1
 1247 000a FB1C     		add	r3, r7, #3
 1248 000c 1A70     		strb	r2, [r3]
 976:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_hysteresis[widget] = value;
 1249              		.loc 1 976 0
 1250 000e 044A     		ldr	r2, .L81
 1251 0010 7B68     		ldr	r3, [r7, #4]
 1252 0012 D318     		add	r3, r2, r3
 1253 0014 FA1C     		add	r2, r7, #3
 1254 0016 1278     		ldrb	r2, [r2]
 1255 0018 1A70     		strb	r2, [r3]
 977:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 1256              		.loc 1 977 0
 1257 001a BD46     		mov	sp, r7
 1258 001c 02B0     		add	sp, sp, #8
 1259              		@ sp needed
 1260 001e 80BD     		pop	{r7, pc}
 1261              	.L82:
 1262              		.align	2
 1263              	.L81:
 1264 0020 00000000 		.word	CapSense_hysteresis
 1265              		.cfi_endproc
 1266              	.LFE53:
 1267              		.size	CapSense_SetFingerHysteresis, .-CapSense_SetFingerHysteresis
 1268              		.section	.text.CapSense_SetNegativeNoiseThreshold,"ax",%progbits
 1269              		.align	2
 1270              		.global	CapSense_SetNegativeNoiseThreshold
 1271              		.code	16
 1272              		.thumb_func
 1273              		.type	CapSense_SetNegativeNoiseThreshold, %function
 1274              	CapSense_SetNegativeNoiseThreshold:
 1275              	.LFB54:
 978:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 979:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 980:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 981:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetNegativeNoiseThreshold
 982:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 983:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 984:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 985:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the Negative Noise Threshold value of a widget
 986:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 987:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
 988:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Negative Noise Threshold value for widgets.
 989:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget: widget number
 990:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 991:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 992:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 41


 993:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 994:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 995:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_negativeNoiseThreshold  - This parameter specifies the negative 
 996:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   difference between the raw count and baseline levels for Baseline resetting to 
 997:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   the raw count level.
 998:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
 999:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
1000:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1001:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1002:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
1003:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetNegativeNoiseThreshold(uint32 widget, uint8 value)
1004:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 1276              		.loc 1 1004 0
 1277              		.cfi_startproc
 1278 0000 80B5     		push	{r7, lr}
 1279              		.cfi_def_cfa_offset 8
 1280              		.cfi_offset 7, -8
 1281              		.cfi_offset 14, -4
 1282 0002 82B0     		sub	sp, sp, #8
 1283              		.cfi_def_cfa_offset 16
 1284 0004 00AF     		add	r7, sp, #0
 1285              		.cfi_def_cfa_register 7
 1286 0006 7860     		str	r0, [r7, #4]
 1287 0008 0A1C     		mov	r2, r1
 1288 000a FB1C     		add	r3, r7, #3
 1289 000c 1A70     		strb	r2, [r3]
1005:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_negativeNoiseThreshold[widget] = value;
 1290              		.loc 1 1005 0
 1291 000e 044A     		ldr	r2, .L84
 1292 0010 7B68     		ldr	r3, [r7, #4]
 1293 0012 D318     		add	r3, r2, r3
 1294 0014 FA1C     		add	r2, r7, #3
 1295 0016 1278     		ldrb	r2, [r2]
 1296 0018 1A70     		strb	r2, [r3]
1006:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 1297              		.loc 1 1006 0
 1298 001a BD46     		mov	sp, r7
 1299 001c 02B0     		add	sp, sp, #8
 1300              		@ sp needed
 1301 001e 80BD     		pop	{r7, pc}
 1302              	.L85:
 1303              		.align	2
 1304              	.L84:
 1305 0020 00000000 		.word	CapSense_negativeNoiseThreshold
 1306              		.cfi_endproc
 1307              	.LFE54:
 1308              		.size	CapSense_SetNegativeNoiseThreshold, .-CapSense_SetNegativeNoiseThreshold
 1309              		.section	.text.CapSense_SetDebounce,"ax",%progbits
 1310              		.align	2
 1311              		.global	CapSense_SetDebounce
 1312              		.code	16
 1313              		.thumb_func
 1314              		.type	CapSense_SetDebounce, %function
 1315              	CapSense_SetDebounce:
 1316              	.LFB55:
1007:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1008:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 42


1009:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
1010:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetDebounce
1011:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
1012:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1013:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
1014:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the debounce value for a widget.
1015:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1016:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
1017:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Debounce value for widget.
1018:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget: widget index.
1019:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1020:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
1021:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1022:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1023:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1024:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_debounce[] - This array contains the debounce value for each widget.
1025:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_widgetNumberSld - structure with dynamic sliders' parameters.
1026:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1027:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
1028:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1029:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1030:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
1031:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetDebounce(uint32 widget, uint8 value)
1032:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 1317              		.loc 1 1032 0
 1318              		.cfi_startproc
 1319 0000 80B5     		push	{r7, lr}
 1320              		.cfi_def_cfa_offset 8
 1321              		.cfi_offset 7, -8
 1322              		.cfi_offset 14, -4
 1323 0002 82B0     		sub	sp, sp, #8
 1324              		.cfi_def_cfa_offset 16
 1325 0004 00AF     		add	r7, sp, #0
 1326              		.cfi_def_cfa_register 7
 1327 0006 7860     		str	r0, [r7, #4]
 1328 0008 0A1C     		mov	r2, r1
 1329 000a FB1C     		add	r3, r7, #3
 1330 000c 1A70     		strb	r2, [r3]
1033:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_debounce[widget] = value;
 1331              		.loc 1 1033 0
 1332 000e 044A     		ldr	r2, .L87
 1333 0010 7B68     		ldr	r3, [r7, #4]
 1334 0012 D318     		add	r3, r2, r3
 1335 0014 FA1C     		add	r2, r7, #3
 1336 0016 1278     		ldrb	r2, [r2]
 1337 0018 1A70     		strb	r2, [r3]
1034:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 1338              		.loc 1 1034 0
 1339 001a BD46     		mov	sp, r7
 1340 001c 02B0     		add	sp, sp, #8
 1341              		@ sp needed
 1342 001e 80BD     		pop	{r7, pc}
 1343              	.L88:
 1344              		.align	2
 1345              	.L87:
 1346 0020 00000000 		.word	CapSense_debounce
 1347              		.cfi_endproc
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 43


 1348              	.LFE55:
 1349              		.size	CapSense_SetDebounce, .-CapSense_SetDebounce
 1350              		.section	.text.CapSense_SetLowBaselineReset,"ax",%progbits
 1351              		.align	2
 1352              		.global	CapSense_SetLowBaselineReset
 1353              		.code	16
 1354              		.thumb_func
 1355              		.type	CapSense_SetLowBaselineReset, %function
 1356              	CapSense_SetLowBaselineReset:
 1357              	.LFB56:
1035:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1036:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1037:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
1038:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetLowBaselineReset
1039:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
1040:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1041:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
1042:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the low baseline reset threshold value for the sensor.
1043:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1044:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
1045:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value: low baseline reset threshold value.
1046:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  sensor: Sensor index.
1047:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1048:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
1049:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1050:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1051:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1052:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_lowBaselineReset[] - This array contains the Baseline update 
1053:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  threshold value for each sensor.
1054:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1055:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
1056:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1057:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1058:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
1059:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetLowBaselineReset(uint32 sensor, uint8 value)
1060:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 1358              		.loc 1 1060 0
 1359              		.cfi_startproc
 1360 0000 80B5     		push	{r7, lr}
 1361              		.cfi_def_cfa_offset 8
 1362              		.cfi_offset 7, -8
 1363              		.cfi_offset 14, -4
 1364 0002 82B0     		sub	sp, sp, #8
 1365              		.cfi_def_cfa_offset 16
 1366 0004 00AF     		add	r7, sp, #0
 1367              		.cfi_def_cfa_register 7
 1368 0006 7860     		str	r0, [r7, #4]
 1369 0008 0A1C     		mov	r2, r1
 1370 000a FB1C     		add	r3, r7, #3
 1371 000c 1A70     		strb	r2, [r3]
1061:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_lowBaselineReset[sensor] = value;
 1372              		.loc 1 1061 0
 1373 000e 044A     		ldr	r2, .L90
 1374 0010 7B68     		ldr	r3, [r7, #4]
 1375 0012 D318     		add	r3, r2, r3
 1376 0014 FA1C     		add	r2, r7, #3
 1377 0016 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 44


 1378 0018 1A70     		strb	r2, [r3]
1062:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 1379              		.loc 1 1062 0
 1380 001a BD46     		mov	sp, r7
 1381 001c 02B0     		add	sp, sp, #8
 1382              		@ sp needed
 1383 001e 80BD     		pop	{r7, pc}
 1384              	.L91:
 1385              		.align	2
 1386              	.L90:
 1387 0020 00000000 		.word	CapSense_lowBaselineReset
 1388              		.cfi_endproc
 1389              	.LFE56:
 1390              		.size	CapSense_SetLowBaselineReset, .-CapSense_SetLowBaselineReset
 1391              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
 1392              		.align	2
 1393              		.global	CapSense_CheckIsSensorActive
 1394              		.code	16
 1395              		.thumb_func
 1396              		.type	CapSense_CheckIsSensorActive, %function
 1397              	CapSense_CheckIsSensorActive:
 1398              	.LFB57:
1063:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */
1064:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1065:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1066:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1067:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
1068:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1069:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1070:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1071:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Compares the CapSense_sensorSignal[sensor] array element to the finger
1072:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  threshold of the widget it belongs to. The hysteresis and debounce are taken into 
1073:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
1074:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
1075:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
1076:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
1077:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  The debounce counter is added to the sensor active transition.
1078:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function updates the CapSense_sensorOnMask[] array element.
1079:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1080:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1081:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
1082:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1083:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1084:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
1085:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1086:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1087:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[] - used to store the difference between 
1088:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the current value of raw data and a previous value of the baseline.
1089:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store the current debounce 
1090:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  counter of the sensor. the widget which have this parameter are buttons, matrix 
1091:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  buttons, proximity, and guard. All other widgets don't have the  debounce parameter
1092:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
1093:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store the sensors on/off state.
1094:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
1095:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1096:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
1097:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 45


1098:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor is inactive.
1099:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor is active.
1100:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1101:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1102:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1103:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1104:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1105:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_CheckIsSensorActive(uint32 sensor)
1106:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {	
 1399              		.loc 1 1106 0
 1400              		.cfi_startproc
 1401 0000 80B5     		push	{r7, lr}
 1402              		.cfi_def_cfa_offset 8
 1403              		.cfi_offset 7, -8
 1404              		.cfi_offset 14, -4
 1405 0002 84B0     		sub	sp, sp, #16
 1406              		.cfi_def_cfa_offset 24
 1407 0004 00AF     		add	r7, sp, #0
 1408              		.cfi_def_cfa_register 7
 1409 0006 7860     		str	r0, [r7, #4]
1107:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 widget;
1108:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 debounce;
1109:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 debounceIndex;
1110:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1111:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 fingerThreshold;
1112:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 hysteresis;
1113:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1114:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1115:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
1116:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     widget = CapSense_widgetNumber[sensor];
 1410              		.loc 1 1116 0
 1411 0008 3B1C     		mov	r3, r7
 1412 000a 0F33     		add	r3, r3, #15
 1413 000c 4349     		ldr	r1, .L101
 1414 000e 7A68     		ldr	r2, [r7, #4]
 1415 0010 8A18     		add	r2, r1, r2
 1416 0012 1278     		ldrb	r2, [r2]
 1417 0014 1A70     		strb	r2, [r3]
1117:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1118:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     fingerThreshold = CapSense_fingerThreshold[widget];
 1418              		.loc 1 1118 0
 1419 0016 3B1C     		mov	r3, r7
 1420 0018 0F33     		add	r3, r3, #15
 1421 001a 1A78     		ldrb	r2, [r3]
 1422 001c 3B1C     		mov	r3, r7
 1423 001e 0E33     		add	r3, r3, #14
 1424 0020 3F49     		ldr	r1, .L101+4
 1425 0022 8A5C     		ldrb	r2, [r1, r2]
 1426 0024 1A70     		strb	r2, [r3]
1119:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	hysteresis = CapSense_hysteresis[widget];
 1427              		.loc 1 1119 0
 1428 0026 3B1C     		mov	r3, r7
 1429 0028 0F33     		add	r3, r3, #15
 1430 002a 1A78     		ldrb	r2, [r3]
 1431 002c 3B1C     		mov	r3, r7
 1432 002e 0D33     		add	r3, r3, #13
 1433 0030 3C49     		ldr	r1, .L101+8
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 46


 1434 0032 8A5C     		ldrb	r2, [r1, r2]
 1435 0034 1A70     		strb	r2, [r3]
1120:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	debounce = CapSense_debounce[widget];	
 1436              		.loc 1 1120 0
 1437 0036 3B1C     		mov	r3, r7
 1438 0038 0F33     		add	r3, r3, #15
 1439 003a 1A78     		ldrb	r2, [r3]
 1440 003c 3B1C     		mov	r3, r7
 1441 003e 0C33     		add	r3, r3, #12
 1442 0040 3949     		ldr	r1, .L101+12
 1443 0042 8A5C     		ldrb	r2, [r1, r2]
 1444 0044 1A70     		strb	r2, [r3]
1121:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1122:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	    debounceIndex = widget;
 1445              		.loc 1 1122 0
 1446 0046 3B1C     		mov	r3, r7
 1447 0048 0B33     		add	r3, r3, #11
 1448 004a 3A1C     		mov	r2, r7
 1449 004c 0F32     		add	r2, r2, #15
 1450 004e 1278     		ldrb	r2, [r2]
 1451 0050 1A70     		strb	r2, [r3]
1123:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1124:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1125:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Was on */
1126:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     if (0u != CapSense_GetBitValue(CapSense_sensorOnMask, sensor))
 1452              		.loc 1 1126 0
 1453 0052 364A     		ldr	r2, .L101+16
 1454 0054 7B68     		ldr	r3, [r7, #4]
 1455 0056 101C     		mov	r0, r2
 1456 0058 191C     		mov	r1, r3
 1457 005a FFF7FEFF 		bl	CapSense_GetBitValue
 1458 005e 031C     		mov	r3, r0
 1459 0060 002B     		cmp	r3, #0
 1460 0062 1DD0     		beq	.L93
1127:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1128:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Hysteresis minus */
1129:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 1461              		.loc 1 1129 0
 1462 0064 324A     		ldr	r2, .L101+20
 1463 0066 7B68     		ldr	r3, [r7, #4]
 1464 0068 D318     		add	r3, r2, r3
 1465 006a 1B78     		ldrb	r3, [r3]
 1466 006c 1A1C     		mov	r2, r3
 1467 006e 3B1C     		mov	r3, r7
 1468 0070 0E33     		add	r3, r3, #14
 1469 0072 1978     		ldrb	r1, [r3]
 1470 0074 3B1C     		mov	r3, r7
 1471 0076 0D33     		add	r3, r3, #13
 1472 0078 1B78     		ldrb	r3, [r3]
 1473 007a CB1A     		sub	r3, r1, r3
 1474 007c 9A42     		cmp	r2, r3
 1475 007e 3DDA     		bge	.L95
1130:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1131:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	   		CapSense_SetBitValue(CapSense_sensorOnMask, sensor, 0u);
 1476              		.loc 1 1131 0
 1477 0080 2A4A     		ldr	r2, .L101+16
 1478 0082 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 47


 1479 0084 101C     		mov	r0, r2
 1480 0086 191C     		mov	r1, r3
 1481 0088 0022     		mov	r2, #0
 1482 008a FFF7FEFF 		bl	CapSense_SetBitValue
1132:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* Sensor inactive - reset Debounce counter */
1133:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 1483              		.loc 1 1133 0
 1484 008e 3B1C     		mov	r3, r7
 1485 0090 0B33     		add	r3, r3, #11
 1486 0092 1B78     		ldrb	r3, [r3]
 1487 0094 274A     		ldr	r2, .L101+24
 1488 0096 391C     		mov	r1, r7
 1489 0098 0C31     		add	r1, r1, #12
 1490 009a 0978     		ldrb	r1, [r1]
 1491 009c D154     		strb	r1, [r2, r3]
 1492 009e 2DE0     		b	.L95
 1493              	.L93:
1134:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1135:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1136:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else    /* Was off */
1137:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1138:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Hysteresis plus */
1139:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] >= (fingerThreshold + hysteresis))
 1494              		.loc 1 1139 0
 1495 00a0 234A     		ldr	r2, .L101+20
 1496 00a2 7B68     		ldr	r3, [r7, #4]
 1497 00a4 D318     		add	r3, r2, r3
 1498 00a6 1B78     		ldrb	r3, [r3]
 1499 00a8 1A1C     		mov	r2, r3
 1500 00aa 3B1C     		mov	r3, r7
 1501 00ac 0E33     		add	r3, r3, #14
 1502 00ae 1978     		ldrb	r1, [r3]
 1503 00b0 3B1C     		mov	r3, r7
 1504 00b2 0D33     		add	r3, r3, #13
 1505 00b4 1B78     		ldrb	r3, [r3]
 1506 00b6 CB18     		add	r3, r1, r3
 1507 00b8 9A42     		cmp	r2, r3
 1508 00ba 17DB     		blt	.L96
1140:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1141:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_debounceCounter[debounceIndex]--;
 1509              		.loc 1 1141 0
 1510 00bc 3B1C     		mov	r3, r7
 1511 00be 0B33     		add	r3, r3, #11
 1512 00c0 1B78     		ldrb	r3, [r3]
 1513 00c2 1C4A     		ldr	r2, .L101+24
 1514 00c4 D25C     		ldrb	r2, [r2, r3]
 1515 00c6 013A     		sub	r2, r2, #1
 1516 00c8 D1B2     		uxtb	r1, r2
 1517 00ca 1A4A     		ldr	r2, .L101+24
 1518 00cc D154     		strb	r1, [r2, r3]
1142:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
1143:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(CapSense_debounceCounter[debounceIndex] == 0u)
 1519              		.loc 1 1143 0
 1520 00ce 3B1C     		mov	r3, r7
 1521 00d0 0B33     		add	r3, r3, #11
 1522 00d2 1B78     		ldrb	r3, [r3]
 1523 00d4 174A     		ldr	r2, .L101+24
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 48


 1524 00d6 D35C     		ldrb	r3, [r2, r3]
 1525 00d8 002B     		cmp	r3, #0
 1526 00da 0FD1     		bne	.L95
1144:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1145:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_SetBitValue(CapSense_sensorOnMask, sensor, 1u); 
 1527              		.loc 1 1145 0
 1528 00dc 134A     		ldr	r2, .L101+16
 1529 00de 7B68     		ldr	r3, [r7, #4]
 1530 00e0 101C     		mov	r0, r2
 1531 00e2 191C     		mov	r1, r3
 1532 00e4 0122     		mov	r2, #1
 1533 00e6 FFF7FEFF 		bl	CapSense_SetBitValue
 1534 00ea 07E0     		b	.L95
 1535              	.L96:
1146:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1147:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1148:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1149:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1150:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1151:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 1536              		.loc 1 1151 0
 1537 00ec 3B1C     		mov	r3, r7
 1538 00ee 0B33     		add	r3, r3, #11
 1539 00f0 1B78     		ldrb	r3, [r3]
 1540 00f2 104A     		ldr	r2, .L101+24
 1541 00f4 391C     		mov	r1, r7
 1542 00f6 0C31     		add	r1, r1, #12
 1543 00f8 0978     		ldrb	r1, [r1]
 1544 00fa D154     		strb	r1, [r2, r3]
 1545              	.L95:
1152:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1153:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1154:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1155:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     return ((uint32)((0u != CapSense_GetBitValue(CapSense_sensorOnMask, sensor)) ? 1u : 0u));
 1546              		.loc 1 1155 0
 1547 00fc 0B4A     		ldr	r2, .L101+16
 1548 00fe 7B68     		ldr	r3, [r7, #4]
 1549 0100 101C     		mov	r0, r2
 1550 0102 191C     		mov	r1, r3
 1551 0104 FFF7FEFF 		bl	CapSense_GetBitValue
 1552 0108 031C     		mov	r3, r0
 1553 010a 002B     		cmp	r3, #0
 1554 010c 01D0     		beq	.L98
 1555              		.loc 1 1155 0 is_stmt 0 discriminator 1
 1556 010e 0123     		mov	r3, #1
 1557 0110 00E0     		b	.L99
 1558              	.L98:
 1559              		.loc 1 1155 0 discriminator 2
 1560 0112 0023     		mov	r3, #0
 1561              	.L99:
1156:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1562              		.loc 1 1156 0 is_stmt 1 discriminator 3
 1563 0114 181C     		mov	r0, r3
 1564 0116 BD46     		mov	sp, r7
 1565 0118 04B0     		add	sp, sp, #16
 1566              		@ sp needed
 1567 011a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 49


 1568              	.L102:
 1569              		.align	2
 1570              	.L101:
 1571 011c 00000000 		.word	CapSense_widgetNumber
 1572 0120 00000000 		.word	CapSense_fingerThreshold
 1573 0124 00000000 		.word	CapSense_hysteresis
 1574 0128 00000000 		.word	CapSense_debounce
 1575 012c 00000000 		.word	CapSense_sensorOnMask
 1576 0130 00000000 		.word	CapSense_sensorSignal
 1577 0134 10000000 		.word	CapSense_debounceCounter
 1578              		.cfi_endproc
 1579              	.LFE57:
 1580              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
 1581              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 1582              		.align	2
 1583              		.global	CapSense_CheckIsWidgetActive
 1584              		.code	16
 1585              		.thumb_func
 1586              		.type	CapSense_CheckIsWidgetActive, %function
 1587              	CapSense_CheckIsWidgetActive:
 1588              	.LFB58:
1157:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1158:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1159:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1160:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
1161:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1162:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1163:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1164:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Compares the CapSense_sensorSignal[] array element to the finger threshold of 
1165:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * the widget it belongs to. The hysteresis and debounce are taken into account. 
1166:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * The hysteresis is added or subtracted from the finger threshold based on whether
1167:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the sensor is currently active. If the sensor is active, the threshold is 
1168:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  lowered by the hysteresis amount. If the sensor is inactive, the threshold 
1169:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  is raised by the hysteresis amount. 
1170:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * The debounce counter added to the sensor active transition. 
1171:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * This function updates CapSense_sensorOnMask[] array element
1172:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1173:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1174:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1175:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1176:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1177:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
1178:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
1179:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1180:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1181:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  rawDataIndex[]: Contains the  1st sensor position in the widget
1182:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1183:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1184:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1185:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1186:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1187:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_CheckIsWidgetActive(uint32 widget)
1188:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1589              		.loc 1 1188 0
 1590              		.cfi_startproc
 1591 0000 80B5     		push	{r7, lr}
 1592              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 50


 1593              		.cfi_offset 7, -8
 1594              		.cfi_offset 14, -4
 1595 0002 86B0     		sub	sp, sp, #24
 1596              		.cfi_def_cfa_offset 32
 1597 0004 00AF     		add	r7, sp, #0
 1598              		.cfi_def_cfa_register 7
 1599 0006 7860     		str	r0, [r7, #4]
1189:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 rawIndex = (uint32)CapSense_rawDataIndex[widget];
 1600              		.loc 1 1189 0
 1601 0008 0023     		mov	r3, #0
 1602 000a 7B61     		str	r3, [r7, #20]
1190:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 numOfSensors = (uint32)CapSense_numberOfSensors[widget] + rawIndex;
 1603              		.loc 1 1190 0
 1604 000c 0123     		mov	r3, #1
 1605 000e 1A1C     		mov	r2, r3
 1606 0010 7B69     		ldr	r3, [r7, #20]
 1607 0012 D318     		add	r3, r2, r3
 1608 0014 FB60     		str	r3, [r7, #12]
1191:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 state = 0u;
 1609              		.loc 1 1191 0
 1610 0016 0023     		mov	r3, #0
 1611 0018 3B61     		str	r3, [r7, #16]
 1612              	.L105:
1192:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1193:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Check all sensors of widget */
1194:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     do
1195:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1196:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive((uint32)rawIndex) != 0u)
 1613              		.loc 1 1196 0
 1614 001a 7B69     		ldr	r3, [r7, #20]
 1615 001c 181C     		mov	r0, r3
 1616 001e FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 1617 0022 031C     		mov	r3, r0
 1618 0024 002B     		cmp	r3, #0
 1619 0026 01D0     		beq	.L104
1197:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1198:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             state = CapSense_SENSOR_IS_ACTIVE;
 1620              		.loc 1 1198 0
 1621 0028 0123     		mov	r3, #1
 1622 002a 3B61     		str	r3, [r7, #16]
 1623              	.L104:
1199:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1200:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         rawIndex++;
 1624              		.loc 1 1200 0
 1625 002c 7B69     		ldr	r3, [r7, #20]
 1626 002e 0133     		add	r3, r3, #1
 1627 0030 7B61     		str	r3, [r7, #20]
1201:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1202:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(rawIndex < numOfSensors);
 1628              		.loc 1 1202 0
 1629 0032 7A69     		ldr	r2, [r7, #20]
 1630 0034 FB68     		ldr	r3, [r7, #12]
 1631 0036 9A42     		cmp	r2, r3
 1632 0038 EFD3     		bcc	.L105
1203:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1204:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1205:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 51


1206:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     return state;
 1633              		.loc 1 1206 0
 1634 003a 3B69     		ldr	r3, [r7, #16]
1207:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1635              		.loc 1 1207 0
 1636 003c 181C     		mov	r0, r3
 1637 003e BD46     		mov	sp, r7
 1638 0040 06B0     		add	sp, sp, #24
 1639              		@ sp needed
 1640 0042 80BD     		pop	{r7, pc}
 1641              		.cfi_endproc
 1642              	.LFE58:
 1643              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 1644              		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
 1645              		.align	2
 1646              		.global	CapSense_CheckIsAnyWidgetActive
 1647              		.code	16
 1648              		.thumb_func
 1649              		.type	CapSense_CheckIsAnyWidgetActive, %function
 1650              	CapSense_CheckIsAnyWidgetActive:
 1651              	.LFB59:
1208:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1209:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1210:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1211:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
1212:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1213:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1214:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1215:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Compares all the sensors of the CapSense_Signal[] array to their finger 
1216:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
1217:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the CapSense_sensorOnMask[] array is up to date after calling this 
1218:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  function.
1219:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1220:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1221:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1222:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1223:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1224:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
1225:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1226:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1227:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1228:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1229:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1230:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1231:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1232:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1233:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_CheckIsAnyWidgetActive(void)
1234:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1652              		.loc 1 1234 0
 1653              		.cfi_startproc
 1654 0000 80B5     		push	{r7, lr}
 1655              		.cfi_def_cfa_offset 8
 1656              		.cfi_offset 7, -8
 1657              		.cfi_offset 14, -4
 1658 0002 82B0     		sub	sp, sp, #8
 1659              		.cfi_def_cfa_offset 16
 1660 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 52


 1661              		.cfi_def_cfa_register 7
1235:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1236:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	    uint32 i;
1237:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 state = 0u;
 1662              		.loc 1 1237 0
 1663 0006 0023     		mov	r3, #0
 1664 0008 3B60     		str	r3, [r7]
1238:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 1665              		.loc 1 1239 0
 1666 000a 0023     		mov	r3, #0
 1667 000c 7B60     		str	r3, [r7, #4]
 1668 000e 0BE0     		b	.L108
 1669              	.L110:
1240:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1241:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
 1670              		.loc 1 1241 0
 1671 0010 7B68     		ldr	r3, [r7, #4]
 1672 0012 181C     		mov	r0, r3
 1673 0014 FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
 1674 0018 031C     		mov	r3, r0
 1675 001a 002B     		cmp	r3, #0
 1676 001c 01D0     		beq	.L109
1242:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1243:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 1677              		.loc 1 1243 0
 1678 001e 0123     		mov	r3, #1
 1679 0020 3B60     		str	r3, [r7]
 1680              	.L109:
1239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 1681              		.loc 1 1239 0
 1682 0022 7B68     		ldr	r3, [r7, #4]
 1683 0024 0133     		add	r3, r3, #1
 1684 0026 7B60     		str	r3, [r7, #4]
 1685              	.L108:
1239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 1686              		.loc 1 1239 0 is_stmt 0 discriminator 1
 1687 0028 7B68     		ldr	r3, [r7, #4]
 1688 002a 002B     		cmp	r3, #0
 1689 002c F0D0     		beq	.L110
1244:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1245:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1246:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1247:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1248:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1249:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     return state;
 1690              		.loc 1 1249 0 is_stmt 1
 1691 002e 3B68     		ldr	r3, [r7]
1250:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1692              		.loc 1 1250 0
 1693 0030 181C     		mov	r0, r3
 1694 0032 BD46     		mov	sp, r7
 1695 0034 02B0     		add	sp, sp, #8
 1696              		@ sp needed
 1697 0036 80BD     		pop	{r7, pc}
 1698              		.cfi_endproc
 1699              	.LFE59:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 53


 1700              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
 1701              		.section	.text.CapSense_EnableWidget,"ax",%progbits
 1702              		.align	2
 1703              		.global	CapSense_EnableWidget
 1704              		.code	16
 1705              		.thumb_func
 1706              		.type	CapSense_EnableWidget, %function
 1707              	CapSense_EnableWidget:
 1708              	.LFB60:
1251:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1252:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1253:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1254:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
1255:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1256:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1257:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1258:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Enables all the widget elements (sensors) to the scanning process.
1259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1260:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1261:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1262:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1263:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1264:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1265:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1266:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1267:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
1268:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
1269:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
1270:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1271:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
1272:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1273:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
1274:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
1275:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1276:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1277:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1278:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1279:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1280:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_EnableWidget(uint32 widget)
1281:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1709              		.loc 1 1281 0
 1710              		.cfi_startproc
 1711 0000 80B5     		push	{r7, lr}
 1712              		.cfi_def_cfa_offset 8
 1713              		.cfi_offset 7, -8
 1714              		.cfi_offset 14, -4
 1715 0002 84B0     		sub	sp, sp, #16
 1716              		.cfi_def_cfa_offset 24
 1717 0004 00AF     		add	r7, sp, #0
 1718              		.cfi_def_cfa_register 7
 1719 0006 7860     		str	r0, [r7, #4]
1282:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1283:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1720              		.loc 1 1283 0
 1721 0008 3B1C     		mov	r3, r7
 1722 000a 0F33     		add	r3, r3, #15
 1723 000c 0022     		mov	r2, #0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 54


 1724 000e 1A70     		strb	r2, [r3]
1284:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 numOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1725              		.loc 1 1284 0
 1726 0010 0121     		mov	r1, #1
 1727 0012 3B1C     		mov	r3, r7
 1728 0014 0E33     		add	r3, r3, #14
 1729 0016 3A1C     		mov	r2, r7
 1730 0018 0F32     		add	r2, r2, #15
 1731 001a 1278     		ldrb	r2, [r2]
 1732 001c 8A18     		add	r2, r1, r2
 1733 001e 1A70     		strb	r2, [r3]
 1734              	.L113:
1285:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1286:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Enable all sensors of widget */
1287:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     do
1288:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1289:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_SetBitValue(CapSense_sensorEnableMask, (uint32)rawIndex, 1u);
 1735              		.loc 1 1289 0 discriminator 1
 1736 0020 3B1C     		mov	r3, r7
 1737 0022 0F33     		add	r3, r3, #15
 1738 0024 1B78     		ldrb	r3, [r3]
 1739 0026 0C4A     		ldr	r2, .L114
 1740 0028 101C     		mov	r0, r2
 1741 002a 191C     		mov	r1, r3
 1742 002c 0122     		mov	r2, #1
 1743 002e FFF7FEFF 		bl	CapSense_SetBitValue
1290:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         rawIndex++;
 1744              		.loc 1 1290 0 discriminator 1
 1745 0032 3B1C     		mov	r3, r7
 1746 0034 0F33     		add	r3, r3, #15
 1747 0036 1A78     		ldrb	r2, [r3]
 1748 0038 3B1C     		mov	r3, r7
 1749 003a 0F33     		add	r3, r3, #15
 1750 003c 0132     		add	r2, r2, #1
 1751 003e 1A70     		strb	r2, [r3]
1291:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1292:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(rawIndex < numOfSensors);
 1752              		.loc 1 1292 0 discriminator 1
 1753 0040 3A1C     		mov	r2, r7
 1754 0042 0F32     		add	r2, r2, #15
 1755 0044 3B1C     		mov	r3, r7
 1756 0046 0E33     		add	r3, r3, #14
 1757 0048 1278     		ldrb	r2, [r2]
 1758 004a 1B78     		ldrb	r3, [r3]
 1759 004c 9A42     		cmp	r2, r3
 1760 004e E7D3     		bcc	.L113
1293:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1761              		.loc 1 1293 0
 1762 0050 BD46     		mov	sp, r7
 1763 0052 04B0     		add	sp, sp, #16
 1764              		@ sp needed
 1765 0054 80BD     		pop	{r7, pc}
 1766              	.L115:
 1767 0056 C046     		.align	2
 1768              	.L114:
 1769 0058 00000000 		.word	CapSense_sensorEnableMask
 1770              		.cfi_endproc
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 55


 1771              	.LFE60:
 1772              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 1773              		.section	.text.CapSense_DisableWidget,"ax",%progbits
 1774              		.align	2
 1775              		.global	CapSense_DisableWidget
 1776              		.code	16
 1777              		.thumb_func
 1778              		.type	CapSense_DisableWidget, %function
 1779              	CapSense_DisableWidget:
 1780              	.LFB61:
1294:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1295:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1296:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1297:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
1298:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1299:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1300:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1301:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Disables all the widget elements (sensors) from the scanning process.
1302:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1303:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1304:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1305:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1306:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1307:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1308:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1309:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1310:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
1311:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
1312:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
1313:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1314:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
1315:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1316:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor isn't scanned by CapSense_ScanEnabledWidgets().
1317:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor is scanned by CapSense_ScanEnabledWidgets().
1318:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1319:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1320:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1321:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1322:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1323:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_DisableWidget(uint32 widget)
1324:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1781              		.loc 1 1324 0
 1782              		.cfi_startproc
 1783 0000 80B5     		push	{r7, lr}
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 7, -8
 1786              		.cfi_offset 14, -4
 1787 0002 84B0     		sub	sp, sp, #16
 1788              		.cfi_def_cfa_offset 24
 1789 0004 00AF     		add	r7, sp, #0
 1790              		.cfi_def_cfa_register 7
 1791 0006 7860     		str	r0, [r7, #4]
1325:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1792              		.loc 1 1325 0
 1793 0008 3B1C     		mov	r3, r7
 1794 000a 0F33     		add	r3, r3, #15
 1795 000c 0022     		mov	r2, #0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 56


 1796 000e 1A70     		strb	r2, [r3]
1326:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 numOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1797              		.loc 1 1326 0
 1798 0010 0121     		mov	r1, #1
 1799 0012 3B1C     		mov	r3, r7
 1800 0014 0E33     		add	r3, r3, #14
 1801 0016 3A1C     		mov	r2, r7
 1802 0018 0F32     		add	r2, r2, #15
 1803 001a 1278     		ldrb	r2, [r2]
 1804 001c 8A18     		add	r2, r1, r2
 1805 001e 1A70     		strb	r2, [r3]
 1806              	.L117:
1327:.\Generated_Source\PSoC4/CapSense_CSHL.c ****    
1328:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Disable all sensors of widget */
1329:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     do
1330:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1331:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1332:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_SetBitValue(CapSense_sensorEnableMask, (uint32)rawIndex, 0u);
 1807              		.loc 1 1332 0 discriminator 1
 1808 0020 3B1C     		mov	r3, r7
 1809 0022 0F33     		add	r3, r3, #15
 1810 0024 1B78     		ldrb	r3, [r3]
 1811 0026 0C4A     		ldr	r2, .L118
 1812 0028 101C     		mov	r0, r2
 1813 002a 191C     		mov	r1, r3
 1814 002c 0022     		mov	r2, #0
 1815 002e FFF7FEFF 		bl	CapSense_SetBitValue
1333:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         rawIndex++;
 1816              		.loc 1 1333 0 discriminator 1
 1817 0032 3B1C     		mov	r3, r7
 1818 0034 0F33     		add	r3, r3, #15
 1819 0036 1A78     		ldrb	r2, [r3]
 1820 0038 3B1C     		mov	r3, r7
 1821 003a 0F33     		add	r3, r3, #15
 1822 003c 0132     		add	r2, r2, #1
 1823 003e 1A70     		strb	r2, [r3]
1334:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1335:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(rawIndex < numOfSensors);
 1824              		.loc 1 1335 0 discriminator 1
 1825 0040 3A1C     		mov	r2, r7
 1826 0042 0F32     		add	r2, r2, #15
 1827 0044 3B1C     		mov	r3, r7
 1828 0046 0E33     		add	r3, r3, #14
 1829 0048 1278     		ldrb	r2, [r2]
 1830 004a 1B78     		ldrb	r3, [r3]
 1831 004c 9A42     		cmp	r2, r3
 1832 004e E7D3     		bcc	.L117
1336:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1833              		.loc 1 1336 0
 1834 0050 BD46     		mov	sp, r7
 1835 0052 04B0     		add	sp, sp, #16
 1836              		@ sp needed
 1837 0054 80BD     		pop	{r7, pc}
 1838              	.L119:
 1839 0056 C046     		.align	2
 1840              	.L118:
 1841 0058 00000000 		.word	CapSense_sensorEnableMask
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 57


 1842              		.cfi_endproc
 1843              	.LFE61:
 1844              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 1845              		.section	.text.CapSense_IIR4Filter,"ax",%progbits
 1846              		.align	2
 1847              		.global	CapSense_IIR4Filter
 1848              		.code	16
 1849              		.thumb_func
 1850              		.type	CapSense_IIR4Filter, %function
 1851              	CapSense_IIR4Filter:
 1852              	.LFB62:
1337:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1338:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1339:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_BASIC_COUNT)
1340:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1341:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
1342:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1343:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1344:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1345:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Finds the index of the maximum element within a defined centroid. Checks 
1346:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  CapSense_sensorSignal[] within a defined centroid and 
1347:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  returns the index of the maximum element. The values below the finger threshold are 
1348:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  ignored.
1349:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The centroid is defined by offset of the first element and a number of elements - count.
1350:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The diplexed centroid requires at least two consecutive elements above
1351:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  FingerThreshold to find the index of the maximum element.
1352:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1353:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1354:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  offset:  Start index of centroid in CapSense_sensorSignal[] array.
1355:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
1356:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshold.
1357:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
1358:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1359:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1360:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns the index of the maximum element within a defined centroid.
1361:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If the index of the maximum element isn't found it returns 0xFF.
1362:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1363:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1364:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_startOfSlider[] - contains the index of the first slider element
1365:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1366:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects: 
1367:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1368:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1369:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1370:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_IS_DIPLEX_SLIDER)
1371:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 *diplex)
1372:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#else 
1373:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
1374:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif /* (CapSense_IS_DIPLEX_SLIDER) */
1375:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1376:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 i;
1377:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1378:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 curPos = 0u;
1379:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* No centroid at Start */
1380:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
1381:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 curCtrdStartPos = CapSense_MAXIMUM_CENTROID;
1382:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Biggest centroid is zero */
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 58


1383:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
1384:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
1385:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1386:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 maximum = CapSense_MAXIMUM_CENTROID;
1387:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
1388:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 temp = 0u;
1389:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 *startOfSlider = &CapSense_sensorSignal[offset];
1390:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1391:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1392:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(diplex != 0u)
1393:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1394:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Initialize */
1395:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 i = 0u;
1396:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
1397:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
1398:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 count <<= 1u;
1399:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 while(1u)
1400:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 { 
1401:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
1402:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1403:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if (curCtrdStartPos == CapSense_MAXIMUM_CENTROID)
1404:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1405:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* Start of centroid */
1406:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCtrdStartPos = i;
1407:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCntrdSize++;
1408:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1409:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         else
1410:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1411:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCntrdSize++;
1412:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1413:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1414:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else   /* Select biggest and indicate zero start */
1415:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {          
1416:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
1417:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1418:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* We are at the end of current */
1419:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
1420:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1421:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
1422:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
1423:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1424:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             
1425:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCntrdSize = 0u;
1426:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCtrdStartPos = CapSense_MAXIMUM_CENTROID;
1427:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1428:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1429:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1430:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     i++; 
1431:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     curPos = diplex[i];
1432:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if(i == count)
1433:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1434:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         break;
1435:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }            
1436:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1437:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1438:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Find biggest centroid if two are same size, last one wins
1439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                        We are at the end of current */
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 59


1440:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
1441:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1442:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
1443:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
1444:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1445:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1446:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else
1447:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1448:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Without diplexing */ 
1449:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 biggestCtrdSize = count;
1450:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1451:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1452:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1453:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Check centroid size */
1454:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
1455:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
1456:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #else                    
1457:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
1458:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
1459:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1460:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
1461:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1462:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
1463:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (diplex == 0u)
1464:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1465:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 curPos = i;
1466:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1467:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             else
1468:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1469:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 curPos = diplex[i];
1470:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }                    
1471:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
1472:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curPos = diplex[i];                    
1473:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1474:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Looking for greater element within centroid */
1475:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
1476:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1477:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
1478:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1479:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 maximum = i;
1480:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
1481:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1482:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1483:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1484:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 } 
1485:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #else
1486:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
1487:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {                      
1488:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Looking for greater element within centroid */
1489:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
1490:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1491:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
1492:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1493:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         maximum = i;
1494:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         temp = startOfSlider[i];
1495:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1496:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 60


1497:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }    
1498:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1499:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (maximum);
1500:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1501:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1502:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1503:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1504:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
1505:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1506:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1507:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1508:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value calculated according to the index of the maximum element and API
1509:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  resolution.
1510:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1511:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1512:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  type:  widget type.
1513:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
1514:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1515:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  offset:   Start index of centroid in CapSense_sensorSignal[] array.
1516:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
1517:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1518:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  API resolution.
1519:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshold.
1520:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1521:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1522:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value of the slider.
1523:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1524:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects: 
1525:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1526:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1527:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1528:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TOTAL_TRACKPAD_GESTURES_COUNT > 0u)
1529:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1530:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         uint8 count, uint32 resolution, uint8 noiseThreshold)
1531:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #else								
1532:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1533:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint8 noiseThreshold)						
1534:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TRACKPAD_GESTURES_COUNT > 0u) */
1535:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1536:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT >
1537:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posPrev;
1538:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posNext;
1539:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COU
1540:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1541:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Helps during centroid calculation */
1542:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_TOTAL_CENTROIDS_BASIC_COUNT)
1543:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		    static uint8 CapSense_centroid[3u];
1544:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif  /* (CapSense_TOTAL_CENTROIDS_BASIC_COUNT) */
1545:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                
1546:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1547:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 pos;
1548:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1549:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1550:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 position;
1551:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 numerator;
1552:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         int32 denominator;
1553:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 61


1554:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint8  *startOfSlider = &CapSense_sensorSignal[offset];
1555:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
1556:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT >
1557:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             posPrev = 0u;
1558:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COU
1559:.\Generated_Source\PSoC4/CapSense_CSHL.c ****      
1560:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1561:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1562:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1563:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1564:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1565:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1566:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Copy Signal to the centroid array */
1567:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1568:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                  
1569:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1570:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1571:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 { 
1572:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1573:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1574:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1575:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1576:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1577:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1578:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1579:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1580:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1581:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1582:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1583:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1584:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1585:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1586:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1587:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1588:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1589:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else
1590:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1591:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1592:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1593:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COU
1594:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1595:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1596:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if(diplex == 0u)
1597:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1598:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         pos     = maximum;
1599:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1600:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1601:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1602:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else
1603:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1604:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1606:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1607:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         count <<= 1u;
1608:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }                    
1609:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1610:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 62


1611:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1612:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1613:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1614:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     count <<= 1u;                    
1615:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #else                    
1616:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1617:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (maximum >= 1u)
1618:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1619:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1620:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1621:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posNext = maximum + 1u;
1622:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1623:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1624:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Copy Signal to the centroid array */
1625:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1626:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1627:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #else
1628:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1629:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1630:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1631:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1632:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1633:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 { 
1634:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1635:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1636:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1637:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1638:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1639:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1640:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1641:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1642:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1643:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1644:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1645:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1646:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1647:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_BASIC_C
1648:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1649:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1650:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1651:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1652:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1653:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1654:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1655:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1656:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1657:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1658:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1659:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1660:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1661:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1663:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Maximum always greater than fingerThreshold, so greater than noiseThreshold */
1664:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1665:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1666:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1667:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 63


1668:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1669:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1670:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1671:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1672:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1673:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1674:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1675:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1676:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1677:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1678:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1679:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1680:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1681:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1682:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1683:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1684:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1685:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1686:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1687:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1688:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1689:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1690:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1691:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(denominator < 0)
1692:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1693:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1694:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1695:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1696:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1697:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1698:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1699:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Round result and put it to uint8 */
1700:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1701:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1702:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (position);
1703:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }    
1704:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_BASIC_COUNT) */
1705:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1706:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1707:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1708:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1709:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
1710:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1711:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1712:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1713:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1714:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1715:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1716:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  result if enabled.
1717:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1718:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1719:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  Widget number.
1720:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1721:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  #define CapSense_"widget_name"__LS           5
1722:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1723:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1724:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value of the linear slider.
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 64


1725:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1726:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1727:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1728:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1729:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Side Effects:
1730:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1731:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1732:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1733:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1734:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1735:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1736:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1737:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Note:
1738:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1739:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1740:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1741:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1742:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1743:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint32 widget)
1744:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1745:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1746:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             const uint8 *diplex;
1747:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1748:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
1749:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1750:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posIndex;
1751:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1752:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1753:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1754:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1755:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1756:.\Generated_Source\PSoC4/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1757:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 tempPos;
1758:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1759:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1760:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                */
1761:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1762:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 maximum;
1763:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 position;
1764:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1765:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1766:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1767:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1768:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1769:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1770:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1771:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1772:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1773:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else
1774:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1775:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 diplex = 0u;
1776:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1777:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1778:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1779:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		/* Find Maximum within centroid */      
1780:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_IS_DIPLEX_SLIDER)        
1781:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint8)CapSense_fingerThreshold[widget], diplex);
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 65


1782:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
1783:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint8)CapSense_fingerThreshold[widget]);
1784:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif /* (CapSense_IS_DIPLEX_SLIDER) */
1785:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1786:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1787:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1788:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Calculate centroid */
1789:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1790:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1791:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1792:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1793:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1794:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1795:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1796:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate position to store filters data */
1797:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1798:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1799:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1800:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1801:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Init filters */
1802:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1803:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1804:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1805:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1806:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1807:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1808:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1809:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1810:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1811:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1812:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1813:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1814:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1815:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1816:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1817:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1818:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1819:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1820:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1821:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else
1822:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1823:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Do filtering */
1824:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1825:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1826:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1827:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1828:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1829:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1830:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1831:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1832:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1833:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1834:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1835:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1836:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1837:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1838:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 66


1839:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1840:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
1841:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1842:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1843:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1844:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1845:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1846:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1847:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1848:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1849:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1850:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1851:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1852:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1853:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1854:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1855:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1856:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1857:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1858:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1859:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1860:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1861:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1862:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1863:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1864:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1865:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1866:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1867:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1868:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1869:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1870:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }                                
1871:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1872:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1873:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1874:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1875:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1876:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1877:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1878:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1879:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1880:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1881:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1882:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1883:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1884:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1885:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1886:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1887:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1888:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1889:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1890:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1891:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1892:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Maximum wasn't found */
1893:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = 0xFFFFu;
1894:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1895:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 67


1896:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Reset filters */
1897:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1898:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1899:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1900:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1901:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1902:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1903:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1904:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1905:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (position);
1906:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1907:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1908:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1909:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1910:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1911:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1912:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1913:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1914:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1915:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1916:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1917:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1918:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1919:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  result if enabled.
1920:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1921:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1922:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  Widget number.
1923:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1924:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  #define CapSense_"widget_name"__RS           5
1925:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1926:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1927:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value of the radial slider.
1928:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1929:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1930:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
1931:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1932:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Side Effects:
1933:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1934:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1935:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1936:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1937:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1938:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1939:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Note:
1940:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1941:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1942:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1943:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1944:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1945:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1946:.\Generated_Source\PSoC4/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint32 widget)
1947:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1948:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1949:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posIndex;
1950:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1951:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1952:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 68


1953:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1954:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1955:.\Generated_Source\PSoC4/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1956:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 tempPos;
1957:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1958:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1959:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                */
1960:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1961:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 maximum;
1962:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 position;
1963:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1964:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1965:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1966:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		/* Find Maximum within centroid */      
1967:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_IS_DIPLEX_SLIDER)        
1968:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint8)CapSense_fingerThreshold[widget], 0u);
1969:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
1970:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint8)CapSense_fingerThreshold[widget]);
1971:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif /* (CapSense_IS_DIPLEX_SLIDER) */
1972:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1973:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (maximum != CapSense_MAXIMUM_CENTROID)
1974:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1975:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Calculate centroid */
1976:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1977:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1978:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1979:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1980:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1981:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1982:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1983:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate position to store filters data */
1984:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1985:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1986:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1987:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1988:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Init filters */
1989:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1990:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1991:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1992:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1993:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1994:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1995:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1996:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1997:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1998:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1999:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2000:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
2001:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
2002:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
2003:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
2004:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2005:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
2006:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
2007:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
2008:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else
2009:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 69


2010:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Do filtering */
2011:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
2012:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
2013:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2014:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
2015:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
2016:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
2017:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
2018:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
2019:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
2020:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
2021:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2022:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
2023:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2024:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2025:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2026:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
2027:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2028:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
2029:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2030:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
2031:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
2032:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
2033:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
2034:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
2035:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
2036:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2037:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
2038:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2039:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2040:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2041:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
2042:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
2043:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2044:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
2045:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2046:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
2047:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2048:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
2049:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2050:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2051:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2052:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
2053:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
2054:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2055:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
2056:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2057:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
2058:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2059:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
2060:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2061:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2062:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2063:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
2064:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
2065:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2066:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 70


2067:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
2068:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
2069:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2070:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
2071:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2072:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2073:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
2074:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2075:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2076:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2077:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2078:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
2079:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2080:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Maximum wasn't found?? */
2081:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = 0xFFFFu;
2082:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2083:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
2084:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Reset filters */
2085:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
2086:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2087:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
2088:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2089:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2090:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2091:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2092:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (position);
2093:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2094:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
2095:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2096:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2097:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u)
2098:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2099:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
2100:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2101:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2102:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2103:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If a finger is present on a touchpad, this function calculates the X and Y
2104:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touchpad specified
2105:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated according to the API resolutions set in the
2106:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  CapSense customizer. Returns 1 if a finger is on the touchpad.
2107:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
2108:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
2109:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  customizer.
2110:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2111:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2112:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  Widget number. 
2113:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
2114:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  #define CapSense_"widget_name"__TP            5
2115:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2116:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
2117:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
2118:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos[0u]  - position of X
2119:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
2120:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2121:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2122:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
2123:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 71


2124:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2125:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2126:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2127:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Side Effects:
2128:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *   There are no checks of the widget type argument provided to this function.
2129:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
2130:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *   calculations.
2131:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2132:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2133:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 CapSense_GetTouchCentroidPos(uint32 widget, uint16* pos)
2134:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2135:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
2136:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posXIndex;
2137:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posYIndex;
2138:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
2139:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
2140:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
2141:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2142:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2143:.\Generated_Source\PSoC4/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2144:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint16 tempPos;
2145:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2146:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2147:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                */
2148:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2149:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 MaxX;
2150:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 MaxY;
2151:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 posX;
2152:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 posY;
2153:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 touch = 0u;
2154:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
2155:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
2156:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2157:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
2158:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
2159:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
2160:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #else
2161:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
2162:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
2163:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2164:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (MaxX != CapSense_MAXIMUM_CENTROID)
2165:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2166:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
2167:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
2168:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2169:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
2170:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
2171:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
2172:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #else
2173:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
2174:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
2175:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2176:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (MaxY != CapSense_MAXIMUM_CENTROID)
2177:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2178:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
2179:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 touch = 1u;
2180:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 72


2181:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Calculate Y centroid */
2182:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(MaxY, offset, count, 
2183:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
2184:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
2185:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Calculate X centroid */
2186:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
2187:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
2188:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
2189:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(MaxX, offset, count, 
2190:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
2191:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2192:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
2193:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
2194:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
2195:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
2196:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Calculate position to store filters data */
2197:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
2198:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
2199:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
2200:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
2201:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
2202:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* Init filters */
2203:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
2204:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
2205:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2206:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
2207:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
2208:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
2209:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2210:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2211:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
2212:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
2213:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2214:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
2215:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
2216:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2217:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
2218:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2219:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
2220:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2221:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2222:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             
2223:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
2224:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
2225:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         else
2226:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
2227:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* Do filtering */
2228:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
2229:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
2230:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2231:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posX;
2232:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
2233:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
2234:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
2235:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
2236:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
2237:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 73


2238:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     
2239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posY;
2240:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
2241:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
2242:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
2243:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
2244:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
2245:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
2246:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2247:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 
2248:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
2249:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2250:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2251:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2252:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
2253:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
2254:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2255:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posX;
2256:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
2257:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
2258:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
2259:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
2260:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
2261:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
2262:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     
2263:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posY;
2264:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
2265:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
2266:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
2267:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
2268:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2269:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
2270:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2271:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2272:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
2273:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2274:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2275:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2276:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
2277:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
2278:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2279:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
2280:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
2281:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
2282:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     
2283:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
2284:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2285:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
2286:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2287:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 
2288:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
2289:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2290:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2291:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2292:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
2293:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
2294:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 74


2295:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
2296:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2297:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
2298:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2299:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
2300:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
2302:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2303:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 
2304:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
2305:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2306:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2307:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2308:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
2309:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
2310:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     {
2311:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
2312:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2313:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
2314:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         
2315:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
2316:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2317:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
2318:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     }
2319:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
2320:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2321:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2322:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
2323:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
2324:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
2325:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2326:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Save positions */
2327:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[0u] = posX;
2328:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[1u] = posY;
2329:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2330:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2331:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2332:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
2333:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(touch == 0u)
2334:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2335:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Reset filters */
2336:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
2337:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2338:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
2339:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2340:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2341:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
2342:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2343:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (touch);
2344:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2345:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u) */
2346:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2347:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2348:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) || \
2349:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER)) || \
2350:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       ((CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)) )
2351:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 75


2352:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
2353:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2354:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2355:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2356:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the Median filter function. 
2357:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
2358:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  median value.
2359:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2360:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2361:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2362:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2363:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x3:  Before previous value.
2364:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2365:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2366:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2367:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2368:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2369:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2370:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2371:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2372:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2373:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2374:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2375:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
2376:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2377:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 tmp;
2378:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2379:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (x1 > x2)
2380:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2381:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             tmp = x2;
2382:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x2 = x1;
2383:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x1 = tmp;
2384:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2385:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2386:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (x2 > x3)
2387:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2388:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x2 = x3;
2389:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2390:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2391:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
2392:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2393:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) || \
2394:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER)) || \
2395:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       ((CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)) ) */
2396:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2397:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2398:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)) || \
2399:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER)) )
2400:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2401:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
2402:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2403:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2404:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2405:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the Averaging filter function.
2406:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of a position and
2407:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  reports the averaging value.
2408:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 76


2409:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2410:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2411:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2412:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x3:  Before previous value.
2413:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2414:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2415:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2416:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2417:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2418:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2419:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2420:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2421:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2422:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2423:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2424:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
2425:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2426:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
2427:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2428:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2429:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2430:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
2431:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) ) */
2432:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2433:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2434:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)) || \
2435:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER)) )
2436:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2437:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
2438:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2440:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2441:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
2442:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2443:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2444:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2445:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2446:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2447:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2448:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2449:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2450:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2451:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2452:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2453:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2454:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2455:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2456:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2457:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
2458:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2459:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2460:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2461:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
2462:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
2463:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 1u;
2464:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2465:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 77


2466:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2467:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)) || \
2468:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        *    (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER)) )
2469:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        */
2470:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2471:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2472:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)) || \
2473:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER)) )
2474:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2475:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR4Filter
2476:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2477:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2478:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2479:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
2480:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2481:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2482:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2483:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2484:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2485:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2486:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a filtered value.
2487:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2488:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2489:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2490:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2491:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2492:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2493:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2494:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2495:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
2496:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 1853              		.loc 1 2496 0
 1854              		.cfi_startproc
 1855 0000 80B5     		push	{r7, lr}
 1856              		.cfi_def_cfa_offset 8
 1857              		.cfi_offset 7, -8
 1858              		.cfi_offset 14, -4
 1859 0002 84B0     		sub	sp, sp, #16
 1860              		.cfi_def_cfa_offset 24
 1861 0004 00AF     		add	r7, sp, #0
 1862              		.cfi_def_cfa_register 7
 1863 0006 0A1C     		mov	r2, r1
 1864 0008 BB1D     		add	r3, r7, #6
 1865 000a 011C     		add	r1, r0, #0
 1866 000c 1980     		strh	r1, [r3]
 1867 000e 3B1D     		add	r3, r7, #4
 1868 0010 1A80     		strh	r2, [r3]
2497:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2498:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2499:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
2500:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1869              		.loc 1 2500 0
 1870 0012 BB1D     		add	r3, r7, #6
 1871 0014 1A88     		ldrh	r2, [r3]
 1872 0016 3B1D     		add	r3, r7, #4
 1873 0018 1B88     		ldrh	r3, [r3]
 1874 001a D318     		add	r3, r2, r3
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 78


 1875 001c FB60     		str	r3, [r7, #12]
2501:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 1876              		.loc 1 2501 0
 1877 001e 3B1D     		add	r3, r7, #4
 1878 0020 1B88     		ldrh	r3, [r3]
 1879 0022 5B00     		lsl	r3, r3, #1
 1880 0024 FA68     		ldr	r2, [r7, #12]
 1881 0026 D318     		add	r3, r2, r3
 1882 0028 FB60     		str	r3, [r7, #12]
2502:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 2u;
 1883              		.loc 1 2502 0
 1884 002a FB68     		ldr	r3, [r7, #12]
 1885 002c 9B08     		lsr	r3, r3, #2
 1886 002e FB60     		str	r3, [r7, #12]
2503:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2504:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
 1887              		.loc 1 2504 0
 1888 0030 FB68     		ldr	r3, [r7, #12]
 1889 0032 9BB2     		uxth	r3, r3
2505:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 1890              		.loc 1 2505 0
 1891 0034 181C     		mov	r0, r3
 1892 0036 BD46     		mov	sp, r7
 1893 0038 04B0     		add	sp, sp, #16
 1894              		@ sp needed
 1895 003a 80BD     		pop	{r7, pc}
 1896              		.cfi_endproc
 1897              	.LFE62:
 1898              		.size	CapSense_IIR4Filter, .-CapSense_IIR4Filter
 1899              		.section	.text.CapSense_GetWidgetNumber,"ax",%progbits
 1900              		.align	2
 1901              		.global	CapSense_GetWidgetNumber
 1902              		.code	16
 1903              		.thumb_func
 1904              		.type	CapSense_GetWidgetNumber, %function
 1905              	CapSense_GetWidgetNumber:
 1906              	.LFB63:
2506:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)) || \
2507:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        *    (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER)) )
2508:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        */
2509:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2510:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2511:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)) || \
2512:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER)) || \
2513:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_JITTER_FILTER)))  
2514:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2515:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: uint16 CapSense_JitterFilter
2516:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2517:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2518:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2519:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the Jitter filter function.
2520:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2521:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2522:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2523:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2524:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2525:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 79


2526:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2527:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2528:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2529:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2530:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2531:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2532:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2533:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2534:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2535:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_JitterFilter(uint16 x1, uint16 x2)
2536:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2537:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (x1 > x2)
2538:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2539:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x1--;
2540:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2541:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
2542:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2543:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (x1 < x2)
2544:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2545:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 x1++;
2546:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2547:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2548:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2549:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return x1;
2550:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2551:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)) || \
2552:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        *    (0u != (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER)) )
2553:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	   *    (0u != (CapSense_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_JITTER_FILTER)) )
2554:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        */
2555:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2556:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2557:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER))
2558:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2559:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR8Filter
2560:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2561:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2562:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2563:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
2564:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Only applies for raw data.
2565:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2566:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2567:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2568:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2569:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2570:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2571:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2572:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2573:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2574:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2575:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2576:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2577:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2578:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2579:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2580:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2)
2581:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2582:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 80


2583:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2584:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/8 Current Value + 7/8 Previous Value */
2585:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1;
2586:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp += (((uint32)x2 << 3u) - ((uint32)x2));
2587:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 3u;
2588:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2589:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2590:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2591:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)) */
2592:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2593:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2594:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
2595:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2596:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR16Filter
2597:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2598:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2599:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2600:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
2601:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Only applies for raw data.
2602:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2603:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2604:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2606:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2607:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2608:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2609:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2610:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2611:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2612:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2613:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2614:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2615:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2616:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2617:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2)
2618:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2619:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2620:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2621:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/16 Current Value + 15/16 Previous Value */
2622:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1;
2623:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp += (((uint32)x2 << 4u) - ((uint32)x2));
2624:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 4u;
2625:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2626:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2627:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2628:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) */
2629:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2630:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2631:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (0u != (CapSense_TOTAL_MATRIX_BUTTONS_COUNT))
2632:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2633:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2634:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetMatrixButtonPos
2635:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2636:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2637:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2638:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Function calculates and returns a touch position (column and row) for the matrix
2639:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  button widget.
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 81


2640:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2641:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2642:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  widget number;
2643:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos:     pointer to an array of two uint8, where touch position will be 
2644:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *           stored:
2645:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *           pos[0] - column position;
2646:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *           pos[1] - raw position.
2647:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2648:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2649:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
2650:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  cases.
2651:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2652:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2653:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_fingerThreshold[ ] - used to store the finger threshold for all widgets.
2654:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_sensorSignal[ ] - used to store a difference between the current value of 
2655:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  raw data and a previous value of the baseline.
2656:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2657:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2658:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2659:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2660:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2661:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 CapSense_GetMatrixButtonPos(uint32 widget, uint8* pos)
2662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2663:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 i;
2664:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 retVal = 0u;
2665:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 row_sig_max = 0u;
2666:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 col_sig_max = 0u;
2667:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 row_ind = 0u;
2668:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 col_ind = 0u;
2669:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2670:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(widget) == 1u)
2671:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2672:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Find row number with maximal signal value */
2673:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             for(i = CapSense_rawDataIndex[widget]; i < (CapSense_rawDataIndex[widget] + \
2674:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                  CapSense_numberOfSensors[widget]); i++)
2675:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2676:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (CapSense_sensorSignal[i] > col_sig_max)
2677:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2678:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     col_ind = i;
2679:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     col_sig_max = CapSense_sensorSignal[i];
2680:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2681:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2682:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2683:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Find row number with maximal signal value */
2684:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             for(i = CapSense_rawDataIndex[widget+1u]; i < (CapSense_rawDataIndex[widget+1u] + \
2685:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                  CapSense_numberOfSensors[widget+1u]); i++)
2686:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2687:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (CapSense_sensorSignal[i] > row_sig_max)
2688:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2689:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     row_ind = i;
2690:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     row_sig_max = CapSense_sensorSignal[i];
2691:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2692:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2693:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2694:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if((col_sig_max >= CapSense_fingerThreshold[widget]) && \
2695:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                (row_sig_max >= CapSense_fingerThreshold[widget+1u]))
2696:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 82


2697:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[0u] = col_ind - CapSense_rawDataIndex[widget];
2698:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[1u] = row_ind - CapSense_rawDataIndex[widget+1u];
2699:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 retVal = 1u;
2700:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2701:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2702:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (retVal);
2703:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2704:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2705:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (0u != (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
2706:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2707:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
2708:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetWidgetNumber
2709:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
2710:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2711:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
2712:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the widget number for the sensor.
2713:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2714:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
2715:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor: sensor index. The value of index can be 
2716:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  from 0 to (CapSense_TOTAL_SENSOR_COUNT-1).
2717:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2718:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
2719:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the widget number for the sensor. 
2720:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2721:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
2722:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumber[]  - stores widget numbers.
2723:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
2724:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
2725:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
2726:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2727:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
2728:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_GetWidgetNumber(uint32 sensor)
2729:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1907              		.loc 1 2729 0
 1908              		.cfi_startproc
 1909 0000 80B5     		push	{r7, lr}
 1910              		.cfi_def_cfa_offset 8
 1911              		.cfi_offset 7, -8
 1912              		.cfi_offset 14, -4
 1913 0002 82B0     		sub	sp, sp, #8
 1914              		.cfi_def_cfa_offset 16
 1915 0004 00AF     		add	r7, sp, #0
 1916              		.cfi_def_cfa_register 7
 1917 0006 7860     		str	r0, [r7, #4]
2730:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return((uint32)CapSense_widgetNumber[sensor]);
 1918              		.loc 1 2730 0
 1919 0008 034A     		ldr	r2, .L124
 1920 000a 7B68     		ldr	r3, [r7, #4]
 1921 000c D318     		add	r3, r2, r3
 1922 000e 1B78     		ldrb	r3, [r3]
2731:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1923              		.loc 1 2731 0
 1924 0010 181C     		mov	r0, r3
 1925 0012 BD46     		mov	sp, r7
 1926 0014 02B0     		add	sp, sp, #8
 1927              		@ sp needed
 1928 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 83


 1929              	.L125:
 1930              		.align	2
 1931              	.L124:
 1932 0018 00000000 		.word	CapSense_widgetNumber
 1933              		.cfi_endproc
 1934              	.LFE63:
 1935              		.size	CapSense_GetWidgetNumber, .-CapSense_GetWidgetNumber
 1936              		.section	.text.CapSense_GetLowBaselineReset,"ax",%progbits
 1937              		.align	2
 1938              		.global	CapSense_GetLowBaselineReset
 1939              		.code	16
 1940              		.thumb_func
 1941              		.type	CapSense_GetLowBaselineReset, %function
 1942              	CapSense_GetLowBaselineReset:
 1943              	.LFB64:
2732:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2733:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
2734:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetLowBaselineReset
2735:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
2736:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2737:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
2738:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the low baseline reset threshold value for the  sensor.
2739:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2740:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
2741:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor: sensor index. The value of index can be 
2742:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  from 0 to (CapSense_TOTAL_SENSOR_COUNT-1).
2743:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2744:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
2745:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  low baseline reset threshold value a sensor.
2746:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2747:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
2748:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_lowBaselineReset[]  - stores low baseline reset values.
2749:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
2750:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
2751:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
2752:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2753:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
2754:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetLowBaselineReset(uint32 sensor)
2755:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1944              		.loc 1 2755 0
 1945              		.cfi_startproc
 1946 0000 80B5     		push	{r7, lr}
 1947              		.cfi_def_cfa_offset 8
 1948              		.cfi_offset 7, -8
 1949              		.cfi_offset 14, -4
 1950 0002 82B0     		sub	sp, sp, #8
 1951              		.cfi_def_cfa_offset 16
 1952 0004 00AF     		add	r7, sp, #0
 1953              		.cfi_def_cfa_register 7
 1954 0006 7860     		str	r0, [r7, #4]
2756:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_lowBaselineReset[sensor]);
 1955              		.loc 1 2756 0
 1956 0008 034A     		ldr	r2, .L128
 1957 000a 7B68     		ldr	r3, [r7, #4]
 1958 000c D318     		add	r3, r2, r3
 1959 000e 1B78     		ldrb	r3, [r3]
2757:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 84


 1960              		.loc 1 2757 0
 1961 0010 181C     		mov	r0, r3
 1962 0012 BD46     		mov	sp, r7
 1963 0014 02B0     		add	sp, sp, #8
 1964              		@ sp needed
 1965 0016 80BD     		pop	{r7, pc}
 1966              	.L129:
 1967              		.align	2
 1968              	.L128:
 1969 0018 00000000 		.word	CapSense_lowBaselineReset
 1970              		.cfi_endproc
 1971              	.LFE64:
 1972              		.size	CapSense_GetLowBaselineReset, .-CapSense_GetLowBaselineReset
 1973              		.section	.text.CapSense_GetDebounce,"ax",%progbits
 1974              		.align	2
 1975              		.global	CapSense_GetDebounce
 1976              		.code	16
 1977              		.thumb_func
 1978              		.type	CapSense_GetDebounce, %function
 1979              	CapSense_GetDebounce:
 1980              	.LFB65:
2758:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2759:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
2760:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetDebounce
2761:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
2762:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2763:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
2764:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns a debounce value.
2765:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2766:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
2767:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor: sensor index. The value of index can be 
2768:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  from 0 to (CapSense_TOTAL_SENSOR_COUNT-1).
2769:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2770:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
2771:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Debounce value 
2772:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2773:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
2774:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_debounce[]  - stores the debounce value.
2775:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
2776:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
2777:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
2778:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2779:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
2780:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetDebounce(uint32 widget)
2781:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1981              		.loc 1 2781 0
 1982              		.cfi_startproc
 1983 0000 80B5     		push	{r7, lr}
 1984              		.cfi_def_cfa_offset 8
 1985              		.cfi_offset 7, -8
 1986              		.cfi_offset 14, -4
 1987 0002 82B0     		sub	sp, sp, #8
 1988              		.cfi_def_cfa_offset 16
 1989 0004 00AF     		add	r7, sp, #0
 1990              		.cfi_def_cfa_register 7
 1991 0006 7860     		str	r0, [r7, #4]
2782:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_debounce[widget]);
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 85


 1992              		.loc 1 2782 0
 1993 0008 034A     		ldr	r2, .L132
 1994 000a 7B68     		ldr	r3, [r7, #4]
 1995 000c D318     		add	r3, r2, r3
 1996 000e 1B78     		ldrb	r3, [r3]
2783:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1997              		.loc 1 2783 0
 1998 0010 181C     		mov	r0, r3
 1999 0012 BD46     		mov	sp, r7
 2000 0014 02B0     		add	sp, sp, #8
 2001              		@ sp needed
 2002 0016 80BD     		pop	{r7, pc}
 2003              	.L133:
 2004              		.align	2
 2005              	.L132:
 2006 0018 00000000 		.word	CapSense_debounce
 2007              		.cfi_endproc
 2008              	.LFE65:
 2009              		.size	CapSense_GetDebounce, .-CapSense_GetDebounce
 2010              		.section	.text.CapSense_EnableRawDataFilters,"ax",%progbits
 2011              		.align	2
 2012              		.global	CapSense_EnableRawDataFilters
 2013              		.code	16
 2014              		.thumb_func
 2015              		.type	CapSense_EnableRawDataFilters, %function
 2016              	CapSense_EnableRawDataFilters:
 2017              	.LFB66:
2784:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2785:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_RAW_FILTER_MASK != 0u)
2786:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
2787:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_EnableRawDataFilters
2788:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
2789:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2790:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
2791:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  Enables the rawdata filters for the sensor signals.
2792:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2793:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters:
2794:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2795:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2796:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return:
2797:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2798:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2799:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2800:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_enableRawFilters defines if the filters are enabled or not.
2801:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2802:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2803:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2804:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2805:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
2806:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_EnableRawDataFilters(void)
2807:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 2018              		.loc 1 2807 0
 2019              		.cfi_startproc
 2020 0000 80B5     		push	{r7, lr}
 2021              		.cfi_def_cfa_offset 8
 2022              		.cfi_offset 7, -8
 2023              		.cfi_offset 14, -4
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 86


 2024 0002 00AF     		add	r7, sp, #0
 2025              		.cfi_def_cfa_register 7
2808:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_enableRawFilters = CapSense_RAW_FILTERS_ENABLED;
 2026              		.loc 1 2808 0
 2027 0004 024B     		ldr	r3, .L135
 2028 0006 0122     		mov	r2, #1
 2029 0008 1A70     		strb	r2, [r3]
2809:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 2030              		.loc 1 2809 0
 2031 000a BD46     		mov	sp, r7
 2032              		@ sp needed
 2033 000c 80BD     		pop	{r7, pc}
 2034              	.L136:
 2035 000e C046     		.align	2
 2036              	.L135:
 2037 0010 00000000 		.word	CapSense_enableRawFilters
 2038              		.cfi_endproc
 2039              	.LFE66:
 2040              		.size	CapSense_EnableRawDataFilters, .-CapSense_EnableRawDataFilters
 2041              		.section	.text.CapSense_DisableRawDataFilters,"ax",%progbits
 2042              		.align	2
 2043              		.global	CapSense_DisableRawDataFilters
 2044              		.code	16
 2045              		.thumb_func
 2046              		.type	CapSense_DisableRawDataFilters, %function
 2047              	CapSense_DisableRawDataFilters:
 2048              	.LFB67:
2810:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2811:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
2812:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_DisableRawDataFilters
2813:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
2814:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2815:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
2816:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  Disables the rawdata filters for the sensor signals.
2817:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2818:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters:
2819:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2820:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2821:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return:
2822:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2823:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2824:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2825:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_enableRawFilters defines if the filters are enabled or not.
2826:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2827:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2828:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2829:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2830:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
2831:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_DisableRawDataFilters(void)
2832:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 2049              		.loc 1 2832 0
 2050              		.cfi_startproc
 2051 0000 80B5     		push	{r7, lr}
 2052              		.cfi_def_cfa_offset 8
 2053              		.cfi_offset 7, -8
 2054              		.cfi_offset 14, -4
 2055 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 87


 2056              		.cfi_def_cfa_register 7
2833:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_enableRawFilters = CapSense_RAW_FILTERS_DISABLED;
 2057              		.loc 1 2833 0
 2058 0004 024B     		ldr	r3, .L138
 2059 0006 0022     		mov	r2, #0
 2060 0008 1A70     		strb	r2, [r3]
2834:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 2061              		.loc 1 2834 0
 2062 000a BD46     		mov	sp, r7
 2063              		@ sp needed
 2064 000c 80BD     		pop	{r7, pc}
 2065              	.L139:
 2066 000e C046     		.align	2
 2067              	.L138:
 2068 0010 00000000 		.word	CapSense_enableRawFilters
 2069              		.cfi_endproc
 2070              	.LFE67:
 2071              		.size	CapSense_DisableRawDataFilters, .-CapSense_DisableRawDataFilters
 2072              		.text
 2073              	.Letext0:
 2074              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 2075              		.section	.debug_info,"",%progbits
 2076              	.Ldebug_info0:
 2077 0000 20090000 		.4byte	0x920
 2078 0004 0400     		.2byte	0x4
 2079 0006 00000000 		.4byte	.Ldebug_abbrev0
 2080 000a 04       		.byte	0x4
 2081 000b 01       		.uleb128 0x1
 2082 000c 1F050000 		.4byte	.LASF88
 2083 0010 01       		.byte	0x1
 2084 0011 9F030000 		.4byte	.LASF89
 2085 0015 49040000 		.4byte	.LASF90
 2086 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2087 001d 00000000 		.4byte	0
 2088 0021 00000000 		.4byte	.Ldebug_line0
 2089 0025 02       		.uleb128 0x2
 2090 0026 01       		.byte	0x1
 2091 0027 06       		.byte	0x6
 2092 0028 7A010000 		.4byte	.LASF0
 2093 002c 02       		.uleb128 0x2
 2094 002d 01       		.byte	0x1
 2095 002e 08       		.byte	0x8
 2096 002f B8050000 		.4byte	.LASF1
 2097 0033 02       		.uleb128 0x2
 2098 0034 02       		.byte	0x2
 2099 0035 05       		.byte	0x5
 2100 0036 0E060000 		.4byte	.LASF2
 2101 003a 02       		.uleb128 0x2
 2102 003b 02       		.byte	0x2
 2103 003c 07       		.byte	0x7
 2104 003d 2F030000 		.4byte	.LASF3
 2105 0041 02       		.uleb128 0x2
 2106 0042 04       		.byte	0x4
 2107 0043 05       		.byte	0x5
 2108 0044 C5010000 		.4byte	.LASF4
 2109 0048 02       		.uleb128 0x2
 2110 0049 04       		.byte	0x4
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 88


 2111 004a 07       		.byte	0x7
 2112 004b C8020000 		.4byte	.LASF5
 2113 004f 02       		.uleb128 0x2
 2114 0050 08       		.byte	0x8
 2115 0051 05       		.byte	0x5
 2116 0052 6C010000 		.4byte	.LASF6
 2117 0056 02       		.uleb128 0x2
 2118 0057 08       		.byte	0x8
 2119 0058 07       		.byte	0x7
 2120 0059 E0000000 		.4byte	.LASF7
 2121 005d 03       		.uleb128 0x3
 2122 005e 04       		.byte	0x4
 2123 005f 05       		.byte	0x5
 2124 0060 696E7400 		.ascii	"int\000"
 2125 0064 02       		.uleb128 0x2
 2126 0065 04       		.byte	0x4
 2127 0066 07       		.byte	0x7
 2128 0067 BB020000 		.4byte	.LASF8
 2129 006b 04       		.uleb128 0x4
 2130 006c EE010000 		.4byte	.LASF9
 2131 0070 02       		.byte	0x2
 2132 0071 A1       		.byte	0xa1
 2133 0072 2C000000 		.4byte	0x2c
 2134 0076 04       		.uleb128 0x4
 2135 0077 00000000 		.4byte	.LASF10
 2136 007b 02       		.byte	0x2
 2137 007c A2       		.byte	0xa2
 2138 007d 3A000000 		.4byte	0x3a
 2139 0081 04       		.uleb128 0x4
 2140 0082 4A020000 		.4byte	.LASF11
 2141 0086 02       		.byte	0x2
 2142 0087 A3       		.byte	0xa3
 2143 0088 48000000 		.4byte	0x48
 2144 008c 02       		.uleb128 0x2
 2145 008d 04       		.byte	0x4
 2146 008e 04       		.byte	0x4
 2147 008f FC040000 		.4byte	.LASF12
 2148 0093 02       		.uleb128 0x2
 2149 0094 08       		.byte	0x8
 2150 0095 04       		.byte	0x4
 2151 0096 2D020000 		.4byte	.LASF13
 2152 009a 02       		.uleb128 0x2
 2153 009b 01       		.byte	0x1
 2154 009c 08       		.byte	0x8
 2155 009d A2060000 		.4byte	.LASF14
 2156 00a1 02       		.uleb128 0x2
 2157 00a2 04       		.byte	0x4
 2158 00a3 07       		.byte	0x7
 2159 00a4 EB030000 		.4byte	.LASF15
 2160 00a8 05       		.uleb128 0x5
 2161 00a9 2F060000 		.4byte	.LASF16
 2162 00ad 01       		.byte	0x1
 2163 00ae 8E       		.byte	0x8e
 2164 00af 00000000 		.4byte	.LFB35
 2165 00b3 84000000 		.4byte	.LFE35-.LFB35
 2166 00b7 01       		.uleb128 0x1
 2167 00b8 9C       		.byte	0x9c
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 89


 2168 00b9 DA000000 		.4byte	0xda
 2169 00bd 06       		.uleb128 0x6
 2170 00be 42030000 		.4byte	.LASF18
 2171 00c2 01       		.byte	0x1
 2172 00c3 8E       		.byte	0x8e
 2173 00c4 81000000 		.4byte	0x81
 2174 00c8 02       		.uleb128 0x2
 2175 00c9 91       		.byte	0x91
 2176 00ca 6C       		.sleb128 -20
 2177 00cb 07       		.uleb128 0x7
 2178 00cc 18060000 		.4byte	.LASF20
 2179 00d0 01       		.byte	0x1
 2180 00d1 92       		.byte	0x92
 2181 00d2 6B000000 		.4byte	0x6b
 2182 00d6 02       		.uleb128 0x2
 2183 00d7 91       		.byte	0x91
 2184 00d8 77       		.sleb128 -9
 2185 00d9 00       		.byte	0
 2186 00da 08       		.uleb128 0x8
 2187 00db 0A040000 		.4byte	.LASF17
 2188 00df 01       		.byte	0x1
 2189 00e0 DA       		.byte	0xda
 2190 00e1 00000000 		.4byte	.LFB36
 2191 00e5 2A000000 		.4byte	.LFE36-.LFB36
 2192 00e9 01       		.uleb128 0x1
 2193 00ea 9C       		.byte	0x9c
 2194 00eb FE000000 		.4byte	0xfe
 2195 00ef 06       		.uleb128 0x6
 2196 00f0 42030000 		.4byte	.LASF18
 2197 00f4 01       		.byte	0x1
 2198 00f5 DA       		.byte	0xda
 2199 00f6 81000000 		.4byte	0x81
 2200 00fa 02       		.uleb128 0x2
 2201 00fb 91       		.byte	0x91
 2202 00fc 74       		.sleb128 -12
 2203 00fd 00       		.byte	0
 2204 00fe 08       		.uleb128 0x8
 2205 00ff C6050000 		.4byte	.LASF19
 2206 0103 01       		.byte	0x1
 2207 0104 FF       		.byte	0xff
 2208 0105 00000000 		.4byte	.LFB37
 2209 0109 26000000 		.4byte	.LFE37-.LFB37
 2210 010d 01       		.uleb128 0x1
 2211 010e 9C       		.byte	0x9c
 2212 010f 21010000 		.4byte	0x121
 2213 0113 09       		.uleb128 0x9
 2214 0114 6900     		.ascii	"i\000"
 2215 0116 01       		.byte	0x1
 2216 0117 0101     		.2byte	0x101
 2217 0119 81000000 		.4byte	0x81
 2218 011d 02       		.uleb128 0x2
 2219 011e 91       		.byte	0x91
 2220 011f 74       		.sleb128 -12
 2221 0120 00       		.byte	0
 2222 0121 0A       		.uleb128 0xa
 2223 0122 28010000 		.4byte	.LASF21
 2224 0126 01       		.byte	0x1
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 90


 2225 0127 2201     		.2byte	0x122
 2226 0129 00000000 		.4byte	.LFB38
 2227 012d 50000000 		.4byte	.LFE38-.LFB38
 2228 0131 01       		.uleb128 0x1
 2229 0132 9C       		.byte	0x9c
 2230 0133 54010000 		.4byte	0x154
 2231 0137 09       		.uleb128 0x9
 2232 0138 6900     		.ascii	"i\000"
 2233 013a 01       		.byte	0x1
 2234 013b 2401     		.2byte	0x124
 2235 013d 81000000 		.4byte	0x81
 2236 0141 02       		.uleb128 0x2
 2237 0142 91       		.byte	0x91
 2238 0143 74       		.sleb128 -12
 2239 0144 0B       		.uleb128 0xb
 2240 0145 1F060000 		.4byte	.LASF22
 2241 0149 01       		.byte	0x1
 2242 014a 2501     		.2byte	0x125
 2243 014c 81000000 		.4byte	0x81
 2244 0150 02       		.uleb128 0x2
 2245 0151 91       		.byte	0x91
 2246 0152 70       		.sleb128 -16
 2247 0153 00       		.byte	0
 2248 0154 0A       		.uleb128 0xa
 2249 0155 F5020000 		.4byte	.LASF23
 2250 0159 01       		.byte	0x1
 2251 015a 6301     		.2byte	0x163
 2252 015c 00000000 		.4byte	.LFB39
 2253 0160 14020000 		.4byte	.LFE39-.LFB39
 2254 0164 01       		.uleb128 0x1
 2255 0165 9C       		.byte	0x9c
 2256 0166 D4010000 		.4byte	0x1d4
 2257 016a 0C       		.uleb128 0xc
 2258 016b 42030000 		.4byte	.LASF18
 2259 016f 01       		.byte	0x1
 2260 0170 6301     		.2byte	0x163
 2261 0172 81000000 		.4byte	0x81
 2262 0176 02       		.uleb128 0x2
 2263 0177 91       		.byte	0x91
 2264 0178 5C       		.sleb128 -36
 2265 0179 0B       		.uleb128 0xb
 2266 017a 9A030000 		.4byte	.LASF24
 2267 017e 01       		.byte	0x1
 2268 017f 6501     		.2byte	0x165
 2269 0181 81000000 		.4byte	0x81
 2270 0185 02       		.uleb128 0x2
 2271 0186 91       		.byte	0x91
 2272 0187 60       		.sleb128 -32
 2273 0188 0B       		.uleb128 0xb
 2274 0189 F8060000 		.4byte	.LASF25
 2275 018d 01       		.byte	0x1
 2276 018e 6601     		.2byte	0x166
 2277 0190 81000000 		.4byte	0x81
 2278 0194 02       		.uleb128 0x2
 2279 0195 91       		.byte	0x91
 2280 0196 6C       		.sleb128 -20
 2281 0197 0B       		.uleb128 0xb
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 91


 2282 0198 9B070000 		.4byte	.LASF26
 2283 019c 01       		.byte	0x1
 2284 019d 6701     		.2byte	0x167
 2285 019f 76000000 		.4byte	0x76
 2286 01a3 02       		.uleb128 0x2
 2287 01a4 91       		.byte	0x91
 2288 01a5 6A       		.sleb128 -22
 2289 01a6 0B       		.uleb128 0xb
 2290 01a7 07000000 		.4byte	.LASF27
 2291 01ab 01       		.byte	0x1
 2292 01ac 6801     		.2byte	0x168
 2293 01ae 76000000 		.4byte	0x76
 2294 01b2 02       		.uleb128 0x2
 2295 01b3 91       		.byte	0x91
 2296 01b4 68       		.sleb128 -24
 2297 01b5 0B       		.uleb128 0xb
 2298 01b6 18060000 		.4byte	.LASF20
 2299 01ba 01       		.byte	0x1
 2300 01bb 6901     		.2byte	0x169
 2301 01bd 6B000000 		.4byte	0x6b
 2302 01c1 02       		.uleb128 0x2
 2303 01c2 91       		.byte	0x91
 2304 01c3 67       		.sleb128 -25
 2305 01c4 0B       		.uleb128 0xb
 2306 01c5 FF050000 		.4byte	.LASF28
 2307 01c9 01       		.byte	0x1
 2308 01ca 6A01     		.2byte	0x16a
 2309 01cc 6B000000 		.4byte	0x6b
 2310 01d0 02       		.uleb128 0x2
 2311 01d1 91       		.byte	0x91
 2312 01d2 66       		.sleb128 -26
 2313 01d3 00       		.byte	0
 2314 01d4 0A       		.uleb128 0xa
 2315 01d5 7C030000 		.4byte	.LASF29
 2316 01d9 01       		.byte	0x1
 2317 01da 2202     		.2byte	0x222
 2318 01dc 00000000 		.4byte	.LFB40
 2319 01e0 16000000 		.4byte	.LFE40-.LFB40
 2320 01e4 01       		.uleb128 0x1
 2321 01e5 9C       		.byte	0x9c
 2322 01e6 FA010000 		.4byte	0x1fa
 2323 01ea 0C       		.uleb128 0xc
 2324 01eb 42030000 		.4byte	.LASF18
 2325 01ef 01       		.byte	0x1
 2326 01f0 2202     		.2byte	0x222
 2327 01f2 81000000 		.4byte	0x81
 2328 01f6 02       		.uleb128 0x2
 2329 01f7 91       		.byte	0x91
 2330 01f8 74       		.sleb128 -12
 2331 01f9 00       		.byte	0
 2332 01fa 0A       		.uleb128 0xa
 2333 01fb 4C010000 		.4byte	.LASF30
 2334 01ff 01       		.byte	0x1
 2335 0200 5802     		.2byte	0x258
 2336 0202 00000000 		.4byte	.LFB41
 2337 0206 40000000 		.4byte	.LFE41-.LFB41
 2338 020a 01       		.uleb128 0x1
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 92


 2339 020b 9C       		.byte	0x9c
 2340 020c 2D020000 		.4byte	0x22d
 2341 0210 09       		.uleb128 0x9
 2342 0211 6900     		.ascii	"i\000"
 2343 0213 01       		.byte	0x1
 2344 0214 5A02     		.2byte	0x25a
 2345 0216 81000000 		.4byte	0x81
 2346 021a 02       		.uleb128 0x2
 2347 021b 91       		.byte	0x91
 2348 021c 74       		.sleb128 -12
 2349 021d 0B       		.uleb128 0xb
 2350 021e 1F060000 		.4byte	.LASF22
 2351 0222 01       		.byte	0x1
 2352 0223 5B02     		.2byte	0x25b
 2353 0225 81000000 		.4byte	0x81
 2354 0229 02       		.uleb128 0x2
 2355 022a 91       		.byte	0x91
 2356 022b 70       		.sleb128 -16
 2357 022c 00       		.byte	0
 2358 022d 0A       		.uleb128 0xa
 2359 022e AD000000 		.4byte	.LASF31
 2360 0232 01       		.byte	0x1
 2361 0233 8502     		.2byte	0x285
 2362 0235 00000000 		.4byte	.LFB42
 2363 0239 58000000 		.4byte	.LFE42-.LFB42
 2364 023d 01       		.uleb128 0x1
 2365 023e 9C       		.byte	0x9c
 2366 023f 9C020000 		.4byte	0x29c
 2367 0243 0C       		.uleb128 0xc
 2368 0244 18060000 		.4byte	.LASF20
 2369 0248 01       		.byte	0x1
 2370 0249 8502     		.2byte	0x285
 2371 024b 81000000 		.4byte	0x81
 2372 024f 02       		.uleb128 0x2
 2373 0250 91       		.byte	0x91
 2374 0251 5C       		.sleb128 -36
 2375 0252 0B       		.uleb128 0xb
 2376 0253 41060000 		.4byte	.LASF32
 2377 0257 01       		.byte	0x1
 2378 0258 8702     		.2byte	0x287
 2379 025a 81000000 		.4byte	0x81
 2380 025e 02       		.uleb128 0x2
 2381 025f 91       		.byte	0x91
 2382 0260 70       		.sleb128 -16
 2383 0261 0B       		.uleb128 0xb
 2384 0262 DE060000 		.4byte	.LASF33
 2385 0266 01       		.byte	0x1
 2386 0267 8802     		.2byte	0x288
 2387 0269 81000000 		.4byte	0x81
 2388 026d 02       		.uleb128 0x2
 2389 026e 91       		.byte	0x91
 2390 026f 6C       		.sleb128 -20
 2391 0270 0B       		.uleb128 0xb
 2392 0271 B0020000 		.4byte	.LASF34
 2393 0275 01       		.byte	0x1
 2394 0276 8902     		.2byte	0x289
 2395 0278 81000000 		.4byte	0x81
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 93


 2396 027c 02       		.uleb128 0x2
 2397 027d 91       		.byte	0x91
 2398 027e 68       		.sleb128 -24
 2399 027f 09       		.uleb128 0x9
 2400 0280 6900     		.ascii	"i\000"
 2401 0282 01       		.byte	0x1
 2402 0283 8A02     		.2byte	0x28a
 2403 0285 81000000 		.4byte	0x81
 2404 0289 02       		.uleb128 0x2
 2405 028a 91       		.byte	0x91
 2406 028b 74       		.sleb128 -12
 2407 028c 0B       		.uleb128 0xb
 2408 028d 1F060000 		.4byte	.LASF22
 2409 0291 01       		.byte	0x1
 2410 0292 8B02     		.2byte	0x28b
 2411 0294 81000000 		.4byte	0x81
 2412 0298 02       		.uleb128 0x2
 2413 0299 91       		.byte	0x91
 2414 029a 64       		.sleb128 -28
 2415 029b 00       		.byte	0
 2416 029c 0D       		.uleb128 0xd
 2417 029d A6010000 		.4byte	.LASF37
 2418 02a1 01       		.byte	0x1
 2419 02a2 B602     		.2byte	0x2b6
 2420 02a4 76000000 		.4byte	0x76
 2421 02a8 00000000 		.4byte	.LFB43
 2422 02ac 1C000000 		.4byte	.LFE43-.LFB43
 2423 02b0 01       		.uleb128 0x1
 2424 02b1 9C       		.byte	0x9c
 2425 02b2 C6020000 		.4byte	0x2c6
 2426 02b6 0C       		.uleb128 0xc
 2427 02b7 42030000 		.4byte	.LASF18
 2428 02bb 01       		.byte	0x1
 2429 02bc B602     		.2byte	0x2b6
 2430 02be 81000000 		.4byte	0x81
 2431 02c2 02       		.uleb128 0x2
 2432 02c3 91       		.byte	0x91
 2433 02c4 74       		.sleb128 -12
 2434 02c5 00       		.byte	0
 2435 02c6 0E       		.uleb128 0xe
 2436 02c7 E6050000 		.4byte	.LASF35
 2437 02cb 01       		.byte	0x1
 2438 02cc D102     		.2byte	0x2d1
 2439 02ce 00000000 		.4byte	.LFB44
 2440 02d2 24000000 		.4byte	.LFE44-.LFB44
 2441 02d6 01       		.uleb128 0x1
 2442 02d7 9C       		.byte	0x9c
 2443 02d8 FB020000 		.4byte	0x2fb
 2444 02dc 0C       		.uleb128 0xc
 2445 02dd 42030000 		.4byte	.LASF18
 2446 02e1 01       		.byte	0x1
 2447 02e2 D102     		.2byte	0x2d1
 2448 02e4 81000000 		.4byte	0x81
 2449 02e8 02       		.uleb128 0x2
 2450 02e9 91       		.byte	0x91
 2451 02ea 74       		.sleb128 -12
 2452 02eb 0C       		.uleb128 0xc
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 94


 2453 02ec 2A030000 		.4byte	.LASF36
 2454 02f0 01       		.byte	0x1
 2455 02f1 D102     		.2byte	0x2d1
 2456 02f3 76000000 		.4byte	0x76
 2457 02f7 02       		.uleb128 0x2
 2458 02f8 91       		.byte	0x91
 2459 02f9 72       		.sleb128 -14
 2460 02fa 00       		.byte	0
 2461 02fb 0D       		.uleb128 0xd
 2462 02fc C8030000 		.4byte	.LASF38
 2463 0300 01       		.byte	0x1
 2464 0301 EC02     		.2byte	0x2ec
 2465 0303 6B000000 		.4byte	0x6b
 2466 0307 00000000 		.4byte	.LFB45
 2467 030b 1C000000 		.4byte	.LFE45-.LFB45
 2468 030f 01       		.uleb128 0x1
 2469 0310 9C       		.byte	0x9c
 2470 0311 25030000 		.4byte	0x325
 2471 0315 0C       		.uleb128 0xc
 2472 0316 42030000 		.4byte	.LASF18
 2473 031a 01       		.byte	0x1
 2474 031b EC02     		.2byte	0x2ec
 2475 031d 81000000 		.4byte	0x81
 2476 0321 02       		.uleb128 0x2
 2477 0322 91       		.byte	0x91
 2478 0323 74       		.sleb128 -12
 2479 0324 00       		.byte	0
 2480 0325 0E       		.uleb128 0xe
 2481 0326 1D070000 		.4byte	.LASF39
 2482 032a 01       		.byte	0x1
 2483 032b 0703     		.2byte	0x307
 2484 032d 00000000 		.4byte	.LFB46
 2485 0331 24000000 		.4byte	.LFE46-.LFB46
 2486 0335 01       		.uleb128 0x1
 2487 0336 9C       		.byte	0x9c
 2488 0337 5A030000 		.4byte	0x35a
 2489 033b 0C       		.uleb128 0xc
 2490 033c 42030000 		.4byte	.LASF18
 2491 0340 01       		.byte	0x1
 2492 0341 0703     		.2byte	0x307
 2493 0343 81000000 		.4byte	0x81
 2494 0347 02       		.uleb128 0x2
 2495 0348 91       		.byte	0x91
 2496 0349 74       		.sleb128 -12
 2497 034a 0C       		.uleb128 0xc
 2498 034b 8D020000 		.4byte	.LASF40
 2499 034f 01       		.byte	0x1
 2500 0350 0703     		.2byte	0x307
 2501 0352 6B000000 		.4byte	0x6b
 2502 0356 02       		.uleb128 0x2
 2503 0357 91       		.byte	0x91
 2504 0358 73       		.sleb128 -13
 2505 0359 00       		.byte	0
 2506 035a 0D       		.uleb128 0xd
 2507 035b 97040000 		.4byte	.LASF41
 2508 035f 01       		.byte	0x1
 2509 0360 2203     		.2byte	0x322
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 95


 2510 0362 6B000000 		.4byte	0x6b
 2511 0366 00000000 		.4byte	.LFB47
 2512 036a 1C000000 		.4byte	.LFE47-.LFB47
 2513 036e 01       		.uleb128 0x1
 2514 036f 9C       		.byte	0x9c
 2515 0370 84030000 		.4byte	0x384
 2516 0374 0C       		.uleb128 0xc
 2517 0375 18060000 		.4byte	.LASF20
 2518 0379 01       		.byte	0x1
 2519 037a 2203     		.2byte	0x322
 2520 037c 81000000 		.4byte	0x81
 2521 0380 02       		.uleb128 0x2
 2522 0381 91       		.byte	0x91
 2523 0382 74       		.sleb128 -12
 2524 0383 00       		.byte	0
 2525 0384 0D       		.uleb128 0xd
 2526 0385 0D010000 		.4byte	.LASF42
 2527 0389 01       		.byte	0x1
 2528 038a 3D03     		.2byte	0x33d
 2529 038c 6B000000 		.4byte	0x6b
 2530 0390 00000000 		.4byte	.LFB48
 2531 0394 1C000000 		.4byte	.LFE48-.LFB48
 2532 0398 01       		.uleb128 0x1
 2533 0399 9C       		.byte	0x9c
 2534 039a AE030000 		.4byte	0x3ae
 2535 039e 0C       		.uleb128 0xc
 2536 039f 18060000 		.4byte	.LASF20
 2537 03a3 01       		.byte	0x1
 2538 03a4 3D03     		.2byte	0x33d
 2539 03a6 81000000 		.4byte	0x81
 2540 03aa 02       		.uleb128 0x2
 2541 03ab 91       		.byte	0x91
 2542 03ac 74       		.sleb128 -12
 2543 03ad 00       		.byte	0
 2544 03ae 0D       		.uleb128 0xd
 2545 03af C1060000 		.4byte	.LASF43
 2546 03b3 01       		.byte	0x1
 2547 03b4 5903     		.2byte	0x359
 2548 03b6 6B000000 		.4byte	0x6b
 2549 03ba 00000000 		.4byte	.LFB49
 2550 03be 1C000000 		.4byte	.LFE49-.LFB49
 2551 03c2 01       		.uleb128 0x1
 2552 03c3 9C       		.byte	0x9c
 2553 03c4 D8030000 		.4byte	0x3d8
 2554 03c8 0C       		.uleb128 0xc
 2555 03c9 18060000 		.4byte	.LASF20
 2556 03cd 01       		.byte	0x1
 2557 03ce 5903     		.2byte	0x359
 2558 03d0 81000000 		.4byte	0x81
 2559 03d4 02       		.uleb128 0x2
 2560 03d5 91       		.byte	0x91
 2561 03d6 74       		.sleb128 -12
 2562 03d7 00       		.byte	0
 2563 03d8 0D       		.uleb128 0xd
 2564 03d9 57000000 		.4byte	.LASF44
 2565 03dd 01       		.byte	0x1
 2566 03de 7503     		.2byte	0x375
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 96


 2567 03e0 6B000000 		.4byte	0x6b
 2568 03e4 00000000 		.4byte	.LFB50
 2569 03e8 1C000000 		.4byte	.LFE50-.LFB50
 2570 03ec 01       		.uleb128 0x1
 2571 03ed 9C       		.byte	0x9c
 2572 03ee 02040000 		.4byte	0x402
 2573 03f2 0C       		.uleb128 0xc
 2574 03f3 18060000 		.4byte	.LASF20
 2575 03f7 01       		.byte	0x1
 2576 03f8 7503     		.2byte	0x375
 2577 03fa 81000000 		.4byte	0x81
 2578 03fe 02       		.uleb128 0x2
 2579 03ff 91       		.byte	0x91
 2580 0400 74       		.sleb128 -12
 2581 0401 00       		.byte	0
 2582 0402 0E       		.uleb128 0xe
 2583 0403 5C020000 		.4byte	.LASF45
 2584 0407 01       		.byte	0x1
 2585 0408 9603     		.2byte	0x396
 2586 040a 00000000 		.4byte	.LFB51
 2587 040e 24000000 		.4byte	.LFE51-.LFB51
 2588 0412 01       		.uleb128 0x1
 2589 0413 9C       		.byte	0x9c
 2590 0414 37040000 		.4byte	0x437
 2591 0418 0C       		.uleb128 0xc
 2592 0419 18060000 		.4byte	.LASF20
 2593 041d 01       		.byte	0x1
 2594 041e 9603     		.2byte	0x396
 2595 0420 81000000 		.4byte	0x81
 2596 0424 02       		.uleb128 0x2
 2597 0425 91       		.byte	0x91
 2598 0426 74       		.sleb128 -12
 2599 0427 0C       		.uleb128 0xc
 2600 0428 8D020000 		.4byte	.LASF40
 2601 042c 01       		.byte	0x1
 2602 042d 9603     		.2byte	0x396
 2603 042f 6B000000 		.4byte	0x6b
 2604 0433 02       		.uleb128 0x2
 2605 0434 91       		.byte	0x91
 2606 0435 73       		.sleb128 -13
 2607 0436 00       		.byte	0
 2608 0437 0E       		.uleb128 0xe
 2609 0438 6F060000 		.4byte	.LASF46
 2610 043c 01       		.byte	0x1
 2611 043d B203     		.2byte	0x3b2
 2612 043f 00000000 		.4byte	.LFB52
 2613 0443 24000000 		.4byte	.LFE52-.LFB52
 2614 0447 01       		.uleb128 0x1
 2615 0448 9C       		.byte	0x9c
 2616 0449 6C040000 		.4byte	0x46c
 2617 044d 0C       		.uleb128 0xc
 2618 044e 18060000 		.4byte	.LASF20
 2619 0452 01       		.byte	0x1
 2620 0453 B203     		.2byte	0x3b2
 2621 0455 81000000 		.4byte	0x81
 2622 0459 02       		.uleb128 0x2
 2623 045a 91       		.byte	0x91
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 97


 2624 045b 74       		.sleb128 -12
 2625 045c 0C       		.uleb128 0xc
 2626 045d 8D020000 		.4byte	.LASF40
 2627 0461 01       		.byte	0x1
 2628 0462 B203     		.2byte	0x3b2
 2629 0464 6B000000 		.4byte	0x6b
 2630 0468 02       		.uleb128 0x2
 2631 0469 91       		.byte	0x91
 2632 046a 73       		.sleb128 -13
 2633 046b 00       		.byte	0
 2634 046c 0E       		.uleb128 0xe
 2635 046d 2C040000 		.4byte	.LASF47
 2636 0471 01       		.byte	0x1
 2637 0472 CE03     		.2byte	0x3ce
 2638 0474 00000000 		.4byte	.LFB53
 2639 0478 24000000 		.4byte	.LFE53-.LFB53
 2640 047c 01       		.uleb128 0x1
 2641 047d 9C       		.byte	0x9c
 2642 047e A1040000 		.4byte	0x4a1
 2643 0482 0C       		.uleb128 0xc
 2644 0483 18060000 		.4byte	.LASF20
 2645 0487 01       		.byte	0x1
 2646 0488 CE03     		.2byte	0x3ce
 2647 048a 81000000 		.4byte	0x81
 2648 048e 02       		.uleb128 0x2
 2649 048f 91       		.byte	0x91
 2650 0490 74       		.sleb128 -12
 2651 0491 0C       		.uleb128 0xc
 2652 0492 8D020000 		.4byte	.LASF40
 2653 0496 01       		.byte	0x1
 2654 0497 CE03     		.2byte	0x3ce
 2655 0499 6B000000 		.4byte	0x6b
 2656 049d 02       		.uleb128 0x2
 2657 049e 91       		.byte	0x91
 2658 049f 73       		.sleb128 -13
 2659 04a0 00       		.byte	0
 2660 04a1 0E       		.uleb128 0xe
 2661 04a2 8A000000 		.4byte	.LASF48
 2662 04a6 01       		.byte	0x1
 2663 04a7 EB03     		.2byte	0x3eb
 2664 04a9 00000000 		.4byte	.LFB54
 2665 04ad 24000000 		.4byte	.LFE54-.LFB54
 2666 04b1 01       		.uleb128 0x1
 2667 04b2 9C       		.byte	0x9c
 2668 04b3 D6040000 		.4byte	0x4d6
 2669 04b7 0C       		.uleb128 0xc
 2670 04b8 18060000 		.4byte	.LASF20
 2671 04bc 01       		.byte	0x1
 2672 04bd EB03     		.2byte	0x3eb
 2673 04bf 81000000 		.4byte	0x81
 2674 04c3 02       		.uleb128 0x2
 2675 04c4 91       		.byte	0x91
 2676 04c5 74       		.sleb128 -12
 2677 04c6 0C       		.uleb128 0xc
 2678 04c7 8D020000 		.4byte	.LASF40
 2679 04cb 01       		.byte	0x1
 2680 04cc EB03     		.2byte	0x3eb
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 98


 2681 04ce 6B000000 		.4byte	0x6b
 2682 04d2 02       		.uleb128 0x2
 2683 04d3 91       		.byte	0x91
 2684 04d4 73       		.sleb128 -13
 2685 04d5 00       		.byte	0
 2686 04d6 0E       		.uleb128 0xe
 2687 04d7 78020000 		.4byte	.LASF49
 2688 04db 01       		.byte	0x1
 2689 04dc 0704     		.2byte	0x407
 2690 04de 00000000 		.4byte	.LFB55
 2691 04e2 24000000 		.4byte	.LFE55-.LFB55
 2692 04e6 01       		.uleb128 0x1
 2693 04e7 9C       		.byte	0x9c
 2694 04e8 0B050000 		.4byte	0x50b
 2695 04ec 0C       		.uleb128 0xc
 2696 04ed 18060000 		.4byte	.LASF20
 2697 04f1 01       		.byte	0x1
 2698 04f2 0704     		.2byte	0x407
 2699 04f4 81000000 		.4byte	0x81
 2700 04f8 02       		.uleb128 0x2
 2701 04f9 91       		.byte	0x91
 2702 04fa 74       		.sleb128 -12
 2703 04fb 0C       		.uleb128 0xc
 2704 04fc 8D020000 		.4byte	.LASF40
 2705 0500 01       		.byte	0x1
 2706 0501 0704     		.2byte	0x407
 2707 0503 6B000000 		.4byte	0x6b
 2708 0507 02       		.uleb128 0x2
 2709 0508 91       		.byte	0x91
 2710 0509 73       		.sleb128 -13
 2711 050a 00       		.byte	0
 2712 050b 0E       		.uleb128 0xe
 2713 050c 93020000 		.4byte	.LASF50
 2714 0510 01       		.byte	0x1
 2715 0511 2304     		.2byte	0x423
 2716 0513 00000000 		.4byte	.LFB56
 2717 0517 24000000 		.4byte	.LFE56-.LFB56
 2718 051b 01       		.uleb128 0x1
 2719 051c 9C       		.byte	0x9c
 2720 051d 40050000 		.4byte	0x540
 2721 0521 0C       		.uleb128 0xc
 2722 0522 42030000 		.4byte	.LASF18
 2723 0526 01       		.byte	0x1
 2724 0527 2304     		.2byte	0x423
 2725 0529 81000000 		.4byte	0x81
 2726 052d 02       		.uleb128 0x2
 2727 052e 91       		.byte	0x91
 2728 052f 74       		.sleb128 -12
 2729 0530 0C       		.uleb128 0xc
 2730 0531 8D020000 		.4byte	.LASF40
 2731 0535 01       		.byte	0x1
 2732 0536 2304     		.2byte	0x423
 2733 0538 6B000000 		.4byte	0x6b
 2734 053c 02       		.uleb128 0x2
 2735 053d 91       		.byte	0x91
 2736 053e 73       		.sleb128 -13
 2737 053f 00       		.byte	0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 99


 2738 0540 0F       		.uleb128 0xf
 2739 0541 7A040000 		.4byte	.LASF51
 2740 0545 01       		.byte	0x1
 2741 0546 5104     		.2byte	0x451
 2742 0548 81000000 		.4byte	0x81
 2743 054c 00000000 		.4byte	.LFB57
 2744 0550 38010000 		.4byte	.LFE57-.LFB57
 2745 0554 01       		.uleb128 0x1
 2746 0555 9C       		.byte	0x9c
 2747 0556 B5050000 		.4byte	0x5b5
 2748 055a 0C       		.uleb128 0xc
 2749 055b 42030000 		.4byte	.LASF18
 2750 055f 01       		.byte	0x1
 2751 0560 5104     		.2byte	0x451
 2752 0562 81000000 		.4byte	0x81
 2753 0566 02       		.uleb128 0x2
 2754 0567 91       		.byte	0x91
 2755 0568 6C       		.sleb128 -20
 2756 0569 0B       		.uleb128 0xb
 2757 056a 18060000 		.4byte	.LASF20
 2758 056e 01       		.byte	0x1
 2759 056f 5304     		.2byte	0x453
 2760 0571 6B000000 		.4byte	0x6b
 2761 0575 02       		.uleb128 0x2
 2762 0576 91       		.byte	0x91
 2763 0577 77       		.sleb128 -9
 2764 0578 0B       		.uleb128 0xb
 2765 0579 E2030000 		.4byte	.LASF52
 2766 057d 01       		.byte	0x1
 2767 057e 5404     		.2byte	0x454
 2768 0580 6B000000 		.4byte	0x6b
 2769 0584 02       		.uleb128 0x2
 2770 0585 91       		.byte	0x91
 2771 0586 74       		.sleb128 -12
 2772 0587 0B       		.uleb128 0xb
 2773 0588 EA060000 		.4byte	.LASF53
 2774 058c 01       		.byte	0x1
 2775 058d 5504     		.2byte	0x455
 2776 058f 6B000000 		.4byte	0x6b
 2777 0593 02       		.uleb128 0x2
 2778 0594 91       		.byte	0x91
 2779 0595 73       		.sleb128 -13
 2780 0596 0B       		.uleb128 0xb
 2781 0597 7A000000 		.4byte	.LASF54
 2782 059b 01       		.byte	0x1
 2783 059c 5704     		.2byte	0x457
 2784 059e 6B000000 		.4byte	0x6b
 2785 05a2 02       		.uleb128 0x2
 2786 05a3 91       		.byte	0x91
 2787 05a4 76       		.sleb128 -10
 2788 05a5 0B       		.uleb128 0xb
 2789 05a6 51020000 		.4byte	.LASF55
 2790 05aa 01       		.byte	0x1
 2791 05ab 5804     		.2byte	0x458
 2792 05ad 6B000000 		.4byte	0x6b
 2793 05b1 02       		.uleb128 0x2
 2794 05b2 91       		.byte	0x91
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 100


 2795 05b3 75       		.sleb128 -11
 2796 05b4 00       		.byte	0
 2797 05b5 0F       		.uleb128 0xf
 2798 05b6 9B050000 		.4byte	.LASF56
 2799 05ba 01       		.byte	0x1
 2800 05bb A304     		.2byte	0x4a3
 2801 05bd 81000000 		.4byte	0x81
 2802 05c1 00000000 		.4byte	.LFB58
 2803 05c5 44000000 		.4byte	.LFE58-.LFB58
 2804 05c9 01       		.uleb128 0x1
 2805 05ca 9C       		.byte	0x9c
 2806 05cb 0C060000 		.4byte	0x60c
 2807 05cf 0C       		.uleb128 0xc
 2808 05d0 18060000 		.4byte	.LASF20
 2809 05d4 01       		.byte	0x1
 2810 05d5 A304     		.2byte	0x4a3
 2811 05d7 81000000 		.4byte	0x81
 2812 05db 02       		.uleb128 0x2
 2813 05dc 91       		.byte	0x91
 2814 05dd 64       		.sleb128 -28
 2815 05de 0B       		.uleb128 0xb
 2816 05df 9D010000 		.4byte	.LASF57
 2817 05e3 01       		.byte	0x1
 2818 05e4 A504     		.2byte	0x4a5
 2819 05e6 81000000 		.4byte	0x81
 2820 05ea 02       		.uleb128 0x2
 2821 05eb 91       		.byte	0x91
 2822 05ec 74       		.sleb128 -12
 2823 05ed 0B       		.uleb128 0xb
 2824 05ee FD060000 		.4byte	.LASF58
 2825 05f2 01       		.byte	0x1
 2826 05f3 A604     		.2byte	0x4a6
 2827 05f5 81000000 		.4byte	0x81
 2828 05f9 02       		.uleb128 0x2
 2829 05fa 91       		.byte	0x91
 2830 05fb 6C       		.sleb128 -20
 2831 05fc 0B       		.uleb128 0xb
 2832 05fd BF010000 		.4byte	.LASF59
 2833 0601 01       		.byte	0x1
 2834 0602 A704     		.2byte	0x4a7
 2835 0604 81000000 		.4byte	0x81
 2836 0608 02       		.uleb128 0x2
 2837 0609 91       		.byte	0x91
 2838 060a 70       		.sleb128 -16
 2839 060b 00       		.byte	0
 2840 060c 0F       		.uleb128 0xf
 2841 060d CE010000 		.4byte	.LASF60
 2842 0611 01       		.byte	0x1
 2843 0612 D104     		.2byte	0x4d1
 2844 0614 81000000 		.4byte	0x81
 2845 0618 00000000 		.4byte	.LFB59
 2846 061c 38000000 		.4byte	.LFE59-.LFB59
 2847 0620 01       		.uleb128 0x1
 2848 0621 9C       		.byte	0x9c
 2849 0622 43060000 		.4byte	0x643
 2850 0626 09       		.uleb128 0x9
 2851 0627 6900     		.ascii	"i\000"
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 101


 2852 0629 01       		.byte	0x1
 2853 062a D404     		.2byte	0x4d4
 2854 062c 81000000 		.4byte	0x81
 2855 0630 02       		.uleb128 0x2
 2856 0631 91       		.byte	0x91
 2857 0632 74       		.sleb128 -12
 2858 0633 0B       		.uleb128 0xb
 2859 0634 BF010000 		.4byte	.LASF59
 2860 0638 01       		.byte	0x1
 2861 0639 D504     		.2byte	0x4d5
 2862 063b 81000000 		.4byte	0x81
 2863 063f 02       		.uleb128 0x2
 2864 0640 91       		.byte	0x91
 2865 0641 70       		.sleb128 -16
 2866 0642 00       		.byte	0
 2867 0643 0A       		.uleb128 0xa
 2868 0644 F4030000 		.4byte	.LASF61
 2869 0648 01       		.byte	0x1
 2870 0649 0005     		.2byte	0x500
 2871 064b 00000000 		.4byte	.LFB60
 2872 064f 5C000000 		.4byte	.LFE60-.LFB60
 2873 0653 01       		.uleb128 0x1
 2874 0654 9C       		.byte	0x9c
 2875 0655 87060000 		.4byte	0x687
 2876 0659 0C       		.uleb128 0xc
 2877 065a 18060000 		.4byte	.LASF20
 2878 065e 01       		.byte	0x1
 2879 065f 0005     		.2byte	0x500
 2880 0661 81000000 		.4byte	0x81
 2881 0665 02       		.uleb128 0x2
 2882 0666 91       		.byte	0x91
 2883 0667 6C       		.sleb128 -20
 2884 0668 0B       		.uleb128 0xb
 2885 0669 9D010000 		.4byte	.LASF57
 2886 066d 01       		.byte	0x1
 2887 066e 0305     		.2byte	0x503
 2888 0670 6B000000 		.4byte	0x6b
 2889 0674 02       		.uleb128 0x2
 2890 0675 91       		.byte	0x91
 2891 0676 77       		.sleb128 -9
 2892 0677 0B       		.uleb128 0xb
 2893 0678 FD060000 		.4byte	.LASF58
 2894 067c 01       		.byte	0x1
 2895 067d 0405     		.2byte	0x504
 2896 067f 6B000000 		.4byte	0x6b
 2897 0683 02       		.uleb128 0x2
 2898 0684 91       		.byte	0x91
 2899 0685 76       		.sleb128 -10
 2900 0686 00       		.byte	0
 2901 0687 0A       		.uleb128 0xa
 2902 0688 86010000 		.4byte	.LASF62
 2903 068c 01       		.byte	0x1
 2904 068d 2B05     		.2byte	0x52b
 2905 068f 00000000 		.4byte	.LFB61
 2906 0693 5C000000 		.4byte	.LFE61-.LFB61
 2907 0697 01       		.uleb128 0x1
 2908 0698 9C       		.byte	0x9c
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 102


 2909 0699 CB060000 		.4byte	0x6cb
 2910 069d 0C       		.uleb128 0xc
 2911 069e 18060000 		.4byte	.LASF20
 2912 06a2 01       		.byte	0x1
 2913 06a3 2B05     		.2byte	0x52b
 2914 06a5 81000000 		.4byte	0x81
 2915 06a9 02       		.uleb128 0x2
 2916 06aa 91       		.byte	0x91
 2917 06ab 6C       		.sleb128 -20
 2918 06ac 0B       		.uleb128 0xb
 2919 06ad 9D010000 		.4byte	.LASF57
 2920 06b1 01       		.byte	0x1
 2921 06b2 2D05     		.2byte	0x52d
 2922 06b4 6B000000 		.4byte	0x6b
 2923 06b8 02       		.uleb128 0x2
 2924 06b9 91       		.byte	0x91
 2925 06ba 77       		.sleb128 -9
 2926 06bb 0B       		.uleb128 0xb
 2927 06bc FD060000 		.4byte	.LASF58
 2928 06c0 01       		.byte	0x1
 2929 06c1 2E05     		.2byte	0x52e
 2930 06c3 6B000000 		.4byte	0x6b
 2931 06c7 02       		.uleb128 0x2
 2932 06c8 91       		.byte	0x91
 2933 06c9 76       		.sleb128 -10
 2934 06ca 00       		.byte	0
 2935 06cb 0D       		.uleb128 0xd
 2936 06cc 87070000 		.4byte	.LASF63
 2937 06d0 01       		.byte	0x1
 2938 06d1 BF09     		.2byte	0x9bf
 2939 06d3 76000000 		.4byte	0x76
 2940 06d7 00000000 		.4byte	.LFB62
 2941 06db 3C000000 		.4byte	.LFE62-.LFB62
 2942 06df 01       		.uleb128 0x1
 2943 06e0 9C       		.byte	0x9c
 2944 06e1 11070000 		.4byte	0x711
 2945 06e5 10       		.uleb128 0x10
 2946 06e6 783100   		.ascii	"x1\000"
 2947 06e9 01       		.byte	0x1
 2948 06ea BF09     		.2byte	0x9bf
 2949 06ec 76000000 		.4byte	0x76
 2950 06f0 02       		.uleb128 0x2
 2951 06f1 91       		.byte	0x91
 2952 06f2 6E       		.sleb128 -18
 2953 06f3 10       		.uleb128 0x10
 2954 06f4 783200   		.ascii	"x2\000"
 2955 06f7 01       		.byte	0x1
 2956 06f8 BF09     		.2byte	0x9bf
 2957 06fa 76000000 		.4byte	0x76
 2958 06fe 02       		.uleb128 0x2
 2959 06ff 91       		.byte	0x91
 2960 0700 6C       		.sleb128 -20
 2961 0701 09       		.uleb128 0x9
 2962 0702 746D7000 		.ascii	"tmp\000"
 2963 0706 01       		.byte	0x1
 2964 0707 C109     		.2byte	0x9c1
 2965 0709 81000000 		.4byte	0x81
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 103


 2966 070d 02       		.uleb128 0x2
 2967 070e 91       		.byte	0x91
 2968 070f 74       		.sleb128 -12
 2969 0710 00       		.byte	0
 2970 0711 0D       		.uleb128 0xd
 2971 0712 37070000 		.4byte	.LASF64
 2972 0716 01       		.byte	0x1
 2973 0717 A80A     		.2byte	0xaa8
 2974 0719 81000000 		.4byte	0x81
 2975 071d 00000000 		.4byte	.LFB63
 2976 0721 1C000000 		.4byte	.LFE63-.LFB63
 2977 0725 01       		.uleb128 0x1
 2978 0726 9C       		.byte	0x9c
 2979 0727 3B070000 		.4byte	0x73b
 2980 072b 0C       		.uleb128 0xc
 2981 072c 42030000 		.4byte	.LASF18
 2982 0730 01       		.byte	0x1
 2983 0731 A80A     		.2byte	0xaa8
 2984 0733 81000000 		.4byte	0x81
 2985 0737 02       		.uleb128 0x2
 2986 0738 91       		.byte	0x91
 2987 0739 74       		.sleb128 -12
 2988 073a 00       		.byte	0
 2989 073b 0D       		.uleb128 0xd
 2990 073c 02050000 		.4byte	.LASF65
 2991 0740 01       		.byte	0x1
 2992 0741 C20A     		.2byte	0xac2
 2993 0743 6B000000 		.4byte	0x6b
 2994 0747 00000000 		.4byte	.LFB64
 2995 074b 1C000000 		.4byte	.LFE64-.LFB64
 2996 074f 01       		.uleb128 0x1
 2997 0750 9C       		.byte	0x9c
 2998 0751 65070000 		.4byte	0x765
 2999 0755 0C       		.uleb128 0xc
 3000 0756 42030000 		.4byte	.LASF18
 3001 075a 01       		.byte	0x1
 3002 075b C20A     		.2byte	0xac2
 3003 075d 81000000 		.4byte	0x81
 3004 0761 02       		.uleb128 0x2
 3005 0762 91       		.byte	0x91
 3006 0763 74       		.sleb128 -12
 3007 0764 00       		.byte	0
 3008 0765 0D       		.uleb128 0xd
 3009 0766 CB000000 		.4byte	.LASF66
 3010 076a 01       		.byte	0x1
 3011 076b DC0A     		.2byte	0xadc
 3012 076d 6B000000 		.4byte	0x6b
 3013 0771 00000000 		.4byte	.LFB65
 3014 0775 1C000000 		.4byte	.LFE65-.LFB65
 3015 0779 01       		.uleb128 0x1
 3016 077a 9C       		.byte	0x9c
 3017 077b 8F070000 		.4byte	0x78f
 3018 077f 0C       		.uleb128 0xc
 3019 0780 18060000 		.4byte	.LASF20
 3020 0784 01       		.byte	0x1
 3021 0785 DC0A     		.2byte	0xadc
 3022 0787 81000000 		.4byte	0x81
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 104


 3023 078b 02       		.uleb128 0x2
 3024 078c 91       		.byte	0x91
 3025 078d 74       		.sleb128 -12
 3026 078e 00       		.byte	0
 3027 078f 11       		.uleb128 0x11
 3028 0790 50070000 		.4byte	.LASF67
 3029 0794 01       		.byte	0x1
 3030 0795 F60A     		.2byte	0xaf6
 3031 0797 00000000 		.4byte	.LFB66
 3032 079b 14000000 		.4byte	.LFE66-.LFB66
 3033 079f 01       		.uleb128 0x1
 3034 07a0 9C       		.byte	0x9c
 3035 07a1 11       		.uleb128 0x11
 3036 07a2 0E020000 		.4byte	.LASF68
 3037 07a6 01       		.byte	0x1
 3038 07a7 0F0B     		.2byte	0xb0f
 3039 07a9 00000000 		.4byte	.LFB67
 3040 07ad 14000000 		.4byte	.LFE67-.LFB67
 3041 07b1 01       		.uleb128 0x1
 3042 07b2 9C       		.byte	0x9c
 3043 07b3 12       		.uleb128 0x12
 3044 07b4 6B000000 		.4byte	0x6b
 3045 07b8 C3070000 		.4byte	0x7c3
 3046 07bc 13       		.uleb128 0x13
 3047 07bd A1000000 		.4byte	0xa1
 3048 07c1 01       		.byte	0x1
 3049 07c2 00       		.byte	0
 3050 07c3 07       		.uleb128 0x7
 3051 07c4 6E070000 		.4byte	.LASF69
 3052 07c8 01       		.byte	0x1
 3053 07c9 5D       		.byte	0x5d
 3054 07ca B3070000 		.4byte	0x7b3
 3055 07ce 05       		.uleb128 0x5
 3056 07cf 03       		.byte	0x3
 3057 07d0 10000000 		.4byte	CapSense_debounceCounter
 3058 07d4 12       		.uleb128 0x12
 3059 07d5 76000000 		.4byte	0x76
 3060 07d9 E4070000 		.4byte	0x7e4
 3061 07dd 13       		.uleb128 0x13
 3062 07de A1000000 		.4byte	0xa1
 3063 07e2 00       		.byte	0
 3064 07e3 00       		.byte	0
 3065 07e4 14       		.uleb128 0x14
 3066 07e5 0A070000 		.4byte	.LASF70
 3067 07e9 01       		.byte	0x1
 3068 07ea 2C       		.byte	0x2c
 3069 07eb D4070000 		.4byte	0x7d4
 3070 07ef 12       		.uleb128 0x12
 3071 07f0 6B000000 		.4byte	0x6b
 3072 07f4 FF070000 		.4byte	0x7ff
 3073 07f8 13       		.uleb128 0x13
 3074 07f9 A1000000 		.4byte	0xa1
 3075 07fd 00       		.byte	0
 3076 07fe 00       		.byte	0
 3077 07ff 14       		.uleb128 0x14
 3078 0800 49030000 		.4byte	.LASF71
 3079 0804 01       		.byte	0x1
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 105


 3080 0805 2D       		.byte	0x2d
 3081 0806 EF070000 		.4byte	0x7ef
 3082 080a 14       		.uleb128 0x14
 3083 080b 34020000 		.4byte	.LASF72
 3084 080f 01       		.byte	0x1
 3085 0810 2E       		.byte	0x2e
 3086 0811 15080000 		.4byte	0x815
 3087 0815 15       		.uleb128 0x15
 3088 0816 EF070000 		.4byte	0x7ef
 3089 081a 16       		.uleb128 0x16
 3090 081b 8A060000 		.4byte	.LASF73
 3091 081f 01       		.byte	0x1
 3092 0820 34       		.byte	0x34
 3093 0821 D4070000 		.4byte	0x7d4
 3094 0825 05       		.uleb128 0x5
 3095 0826 03       		.byte	0x3
 3096 0827 00000000 		.4byte	CapSense_sensorBaseline
 3097 082b 16       		.uleb128 0x16
 3098 082c DA020000 		.4byte	.LASF74
 3099 0830 01       		.byte	0x1
 3100 0831 35       		.byte	0x35
 3101 0832 EF070000 		.4byte	0x7ef
 3102 0836 05       		.uleb128 0x5
 3103 0837 03       		.byte	0x3
 3104 0838 00000000 		.4byte	CapSense_sensorBaselineLow
 3105 083c 16       		.uleb128 0x16
 3106 083d F7000000 		.4byte	.LASF75
 3107 0841 01       		.byte	0x1
 3108 0842 36       		.byte	0x36
 3109 0843 EF070000 		.4byte	0x7ef
 3110 0847 05       		.uleb128 0x5
 3111 0848 03       		.byte	0x3
 3112 0849 00000000 		.4byte	CapSense_sensorSignal
 3113 084d 16       		.uleb128 0x16
 3114 084e 41000000 		.4byte	.LASF76
 3115 0852 01       		.byte	0x1
 3116 0853 37       		.byte	0x37
 3117 0854 EF070000 		.4byte	0x7ef
 3118 0858 05       		.uleb128 0x5
 3119 0859 03       		.byte	0x3
 3120 085a 00000000 		.4byte	CapSense_sensorOnMask
 3121 085e 16       		.uleb128 0x16
 3122 085f 52060000 		.4byte	.LASF77
 3123 0863 01       		.byte	0x1
 3124 0864 39       		.byte	0x39
 3125 0865 EF070000 		.4byte	0x7ef
 3126 0869 05       		.uleb128 0x5
 3127 086a 03       		.byte	0x3
 3128 086b 00000000 		.4byte	CapSense_lowBaselineResetCnt
 3129 086f 16       		.uleb128 0x16
 3130 0870 F4010000 		.4byte	.LASF78
 3131 0874 01       		.byte	0x1
 3132 0875 3A       		.byte	0x3a
 3133 0876 EF070000 		.4byte	0x7ef
 3134 087a 05       		.uleb128 0x5
 3135 087b 03       		.byte	0x3
 3136 087c 00000000 		.4byte	CapSense_lowBaselineReset
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 106


 3137 0880 16       		.uleb128 0x16
 3138 0881 CB040000 		.4byte	.LASF79
 3139 0885 01       		.byte	0x1
 3140 0886 49       		.byte	0x49
 3141 0887 EF070000 		.4byte	0x7ef
 3142 088b 05       		.uleb128 0x5
 3143 088c 03       		.byte	0x3
 3144 088d 00000000 		.4byte	CapSense_fingerThreshold
 3145 0891 16       		.uleb128 0x16
 3146 0892 B3040000 		.4byte	.LASF80
 3147 0896 01       		.byte	0x1
 3148 0897 4D       		.byte	0x4d
 3149 0898 EF070000 		.4byte	0x7ef
 3150 089c 05       		.uleb128 0x5
 3151 089d 03       		.byte	0x3
 3152 089e 00000000 		.4byte	CapSense_noiseThreshold
 3153 08a2 16       		.uleb128 0x16
 3154 08a3 A3070000 		.4byte	.LASF81
 3155 08a7 01       		.byte	0x1
 3156 08a8 51       		.byte	0x51
 3157 08a9 EF070000 		.4byte	0x7ef
 3158 08ad 05       		.uleb128 0x5
 3159 08ae 03       		.byte	0x3
 3160 08af 00000000 		.4byte	CapSense_negativeNoiseThreshold
 3161 08b3 16       		.uleb128 0x16
 3162 08b4 17000000 		.4byte	.LASF82
 3163 08b8 01       		.byte	0x1
 3164 08b9 55       		.byte	0x55
 3165 08ba EF070000 		.4byte	0x7ef
 3166 08be 05       		.uleb128 0x5
 3167 08bf 03       		.byte	0x3
 3168 08c0 00000000 		.4byte	CapSense_hysteresis
 3169 08c4 16       		.uleb128 0x16
 3170 08c5 18030000 		.4byte	.LASF83
 3171 08c9 01       		.byte	0x1
 3172 08ca 59       		.byte	0x59
 3173 08cb EF070000 		.4byte	0x7ef
 3174 08cf 05       		.uleb128 0x5
 3175 08d0 03       		.byte	0x3
 3176 08d1 00000000 		.4byte	CapSense_debounce
 3177 08d5 16       		.uleb128 0x16
 3178 08d6 2B000000 		.4byte	.LASF84
 3179 08da 01       		.byte	0x1
 3180 08db 61       		.byte	0x61
 3181 08dc E6080000 		.4byte	0x8e6
 3182 08e0 05       		.uleb128 0x5
 3183 08e1 03       		.byte	0x3
 3184 08e2 00000000 		.4byte	CapSense_rawDataIndex
 3185 08e6 15       		.uleb128 0x15
 3186 08e7 EF070000 		.4byte	0x7ef
 3187 08eb 16       		.uleb128 0x16
 3188 08ec 63030000 		.4byte	.LASF85
 3189 08f0 01       		.byte	0x1
 3190 08f1 65       		.byte	0x65
 3191 08f2 FC080000 		.4byte	0x8fc
 3192 08f6 05       		.uleb128 0x5
 3193 08f7 03       		.byte	0x3
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 107


 3194 08f8 00000000 		.4byte	CapSense_numberOfSensors
 3195 08fc 15       		.uleb128 0x15
 3196 08fd EF070000 		.4byte	0x7ef
 3197 0901 16       		.uleb128 0x16
 3198 0902 E4040000 		.4byte	.LASF86
 3199 0906 01       		.byte	0x1
 3200 0907 27       		.byte	0x27
 3201 0908 D4070000 		.4byte	0x7d4
 3202 090c 05       		.uleb128 0x5
 3203 090d 03       		.byte	0x3
 3204 090e 00000000 		.4byte	CapSense_rawFilterData1
 3205 0912 16       		.uleb128 0x16
 3206 0913 A7060000 		.4byte	.LASF87
 3207 0917 01       		.byte	0x1
 3208 0918 45       		.byte	0x45
 3209 0919 6B000000 		.4byte	0x6b
 3210 091d 05       		.uleb128 0x5
 3211 091e 03       		.byte	0x3
 3212 091f 00000000 		.4byte	CapSense_enableRawFilters
 3213 0923 00       		.byte	0
 3214              		.section	.debug_abbrev,"",%progbits
 3215              	.Ldebug_abbrev0:
 3216 0000 01       		.uleb128 0x1
 3217 0001 11       		.uleb128 0x11
 3218 0002 01       		.byte	0x1
 3219 0003 25       		.uleb128 0x25
 3220 0004 0E       		.uleb128 0xe
 3221 0005 13       		.uleb128 0x13
 3222 0006 0B       		.uleb128 0xb
 3223 0007 03       		.uleb128 0x3
 3224 0008 0E       		.uleb128 0xe
 3225 0009 1B       		.uleb128 0x1b
 3226 000a 0E       		.uleb128 0xe
 3227 000b 55       		.uleb128 0x55
 3228 000c 17       		.uleb128 0x17
 3229 000d 11       		.uleb128 0x11
 3230 000e 01       		.uleb128 0x1
 3231 000f 10       		.uleb128 0x10
 3232 0010 17       		.uleb128 0x17
 3233 0011 00       		.byte	0
 3234 0012 00       		.byte	0
 3235 0013 02       		.uleb128 0x2
 3236 0014 24       		.uleb128 0x24
 3237 0015 00       		.byte	0
 3238 0016 0B       		.uleb128 0xb
 3239 0017 0B       		.uleb128 0xb
 3240 0018 3E       		.uleb128 0x3e
 3241 0019 0B       		.uleb128 0xb
 3242 001a 03       		.uleb128 0x3
 3243 001b 0E       		.uleb128 0xe
 3244 001c 00       		.byte	0
 3245 001d 00       		.byte	0
 3246 001e 03       		.uleb128 0x3
 3247 001f 24       		.uleb128 0x24
 3248 0020 00       		.byte	0
 3249 0021 0B       		.uleb128 0xb
 3250 0022 0B       		.uleb128 0xb
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 108


 3251 0023 3E       		.uleb128 0x3e
 3252 0024 0B       		.uleb128 0xb
 3253 0025 03       		.uleb128 0x3
 3254 0026 08       		.uleb128 0x8
 3255 0027 00       		.byte	0
 3256 0028 00       		.byte	0
 3257 0029 04       		.uleb128 0x4
 3258 002a 16       		.uleb128 0x16
 3259 002b 00       		.byte	0
 3260 002c 03       		.uleb128 0x3
 3261 002d 0E       		.uleb128 0xe
 3262 002e 3A       		.uleb128 0x3a
 3263 002f 0B       		.uleb128 0xb
 3264 0030 3B       		.uleb128 0x3b
 3265 0031 0B       		.uleb128 0xb
 3266 0032 49       		.uleb128 0x49
 3267 0033 13       		.uleb128 0x13
 3268 0034 00       		.byte	0
 3269 0035 00       		.byte	0
 3270 0036 05       		.uleb128 0x5
 3271 0037 2E       		.uleb128 0x2e
 3272 0038 01       		.byte	0x1
 3273 0039 3F       		.uleb128 0x3f
 3274 003a 19       		.uleb128 0x19
 3275 003b 03       		.uleb128 0x3
 3276 003c 0E       		.uleb128 0xe
 3277 003d 3A       		.uleb128 0x3a
 3278 003e 0B       		.uleb128 0xb
 3279 003f 3B       		.uleb128 0x3b
 3280 0040 0B       		.uleb128 0xb
 3281 0041 27       		.uleb128 0x27
 3282 0042 19       		.uleb128 0x19
 3283 0043 11       		.uleb128 0x11
 3284 0044 01       		.uleb128 0x1
 3285 0045 12       		.uleb128 0x12
 3286 0046 06       		.uleb128 0x6
 3287 0047 40       		.uleb128 0x40
 3288 0048 18       		.uleb128 0x18
 3289 0049 9742     		.uleb128 0x2117
 3290 004b 19       		.uleb128 0x19
 3291 004c 01       		.uleb128 0x1
 3292 004d 13       		.uleb128 0x13
 3293 004e 00       		.byte	0
 3294 004f 00       		.byte	0
 3295 0050 06       		.uleb128 0x6
 3296 0051 05       		.uleb128 0x5
 3297 0052 00       		.byte	0
 3298 0053 03       		.uleb128 0x3
 3299 0054 0E       		.uleb128 0xe
 3300 0055 3A       		.uleb128 0x3a
 3301 0056 0B       		.uleb128 0xb
 3302 0057 3B       		.uleb128 0x3b
 3303 0058 0B       		.uleb128 0xb
 3304 0059 49       		.uleb128 0x49
 3305 005a 13       		.uleb128 0x13
 3306 005b 02       		.uleb128 0x2
 3307 005c 18       		.uleb128 0x18
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 109


 3308 005d 00       		.byte	0
 3309 005e 00       		.byte	0
 3310 005f 07       		.uleb128 0x7
 3311 0060 34       		.uleb128 0x34
 3312 0061 00       		.byte	0
 3313 0062 03       		.uleb128 0x3
 3314 0063 0E       		.uleb128 0xe
 3315 0064 3A       		.uleb128 0x3a
 3316 0065 0B       		.uleb128 0xb
 3317 0066 3B       		.uleb128 0x3b
 3318 0067 0B       		.uleb128 0xb
 3319 0068 49       		.uleb128 0x49
 3320 0069 13       		.uleb128 0x13
 3321 006a 02       		.uleb128 0x2
 3322 006b 18       		.uleb128 0x18
 3323 006c 00       		.byte	0
 3324 006d 00       		.byte	0
 3325 006e 08       		.uleb128 0x8
 3326 006f 2E       		.uleb128 0x2e
 3327 0070 01       		.byte	0x1
 3328 0071 3F       		.uleb128 0x3f
 3329 0072 19       		.uleb128 0x19
 3330 0073 03       		.uleb128 0x3
 3331 0074 0E       		.uleb128 0xe
 3332 0075 3A       		.uleb128 0x3a
 3333 0076 0B       		.uleb128 0xb
 3334 0077 3B       		.uleb128 0x3b
 3335 0078 0B       		.uleb128 0xb
 3336 0079 27       		.uleb128 0x27
 3337 007a 19       		.uleb128 0x19
 3338 007b 11       		.uleb128 0x11
 3339 007c 01       		.uleb128 0x1
 3340 007d 12       		.uleb128 0x12
 3341 007e 06       		.uleb128 0x6
 3342 007f 40       		.uleb128 0x40
 3343 0080 18       		.uleb128 0x18
 3344 0081 9642     		.uleb128 0x2116
 3345 0083 19       		.uleb128 0x19
 3346 0084 01       		.uleb128 0x1
 3347 0085 13       		.uleb128 0x13
 3348 0086 00       		.byte	0
 3349 0087 00       		.byte	0
 3350 0088 09       		.uleb128 0x9
 3351 0089 34       		.uleb128 0x34
 3352 008a 00       		.byte	0
 3353 008b 03       		.uleb128 0x3
 3354 008c 08       		.uleb128 0x8
 3355 008d 3A       		.uleb128 0x3a
 3356 008e 0B       		.uleb128 0xb
 3357 008f 3B       		.uleb128 0x3b
 3358 0090 05       		.uleb128 0x5
 3359 0091 49       		.uleb128 0x49
 3360 0092 13       		.uleb128 0x13
 3361 0093 02       		.uleb128 0x2
 3362 0094 18       		.uleb128 0x18
 3363 0095 00       		.byte	0
 3364 0096 00       		.byte	0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 110


 3365 0097 0A       		.uleb128 0xa
 3366 0098 2E       		.uleb128 0x2e
 3367 0099 01       		.byte	0x1
 3368 009a 3F       		.uleb128 0x3f
 3369 009b 19       		.uleb128 0x19
 3370 009c 03       		.uleb128 0x3
 3371 009d 0E       		.uleb128 0xe
 3372 009e 3A       		.uleb128 0x3a
 3373 009f 0B       		.uleb128 0xb
 3374 00a0 3B       		.uleb128 0x3b
 3375 00a1 05       		.uleb128 0x5
 3376 00a2 27       		.uleb128 0x27
 3377 00a3 19       		.uleb128 0x19
 3378 00a4 11       		.uleb128 0x11
 3379 00a5 01       		.uleb128 0x1
 3380 00a6 12       		.uleb128 0x12
 3381 00a7 06       		.uleb128 0x6
 3382 00a8 40       		.uleb128 0x40
 3383 00a9 18       		.uleb128 0x18
 3384 00aa 9642     		.uleb128 0x2116
 3385 00ac 19       		.uleb128 0x19
 3386 00ad 01       		.uleb128 0x1
 3387 00ae 13       		.uleb128 0x13
 3388 00af 00       		.byte	0
 3389 00b0 00       		.byte	0
 3390 00b1 0B       		.uleb128 0xb
 3391 00b2 34       		.uleb128 0x34
 3392 00b3 00       		.byte	0
 3393 00b4 03       		.uleb128 0x3
 3394 00b5 0E       		.uleb128 0xe
 3395 00b6 3A       		.uleb128 0x3a
 3396 00b7 0B       		.uleb128 0xb
 3397 00b8 3B       		.uleb128 0x3b
 3398 00b9 05       		.uleb128 0x5
 3399 00ba 49       		.uleb128 0x49
 3400 00bb 13       		.uleb128 0x13
 3401 00bc 02       		.uleb128 0x2
 3402 00bd 18       		.uleb128 0x18
 3403 00be 00       		.byte	0
 3404 00bf 00       		.byte	0
 3405 00c0 0C       		.uleb128 0xc
 3406 00c1 05       		.uleb128 0x5
 3407 00c2 00       		.byte	0
 3408 00c3 03       		.uleb128 0x3
 3409 00c4 0E       		.uleb128 0xe
 3410 00c5 3A       		.uleb128 0x3a
 3411 00c6 0B       		.uleb128 0xb
 3412 00c7 3B       		.uleb128 0x3b
 3413 00c8 05       		.uleb128 0x5
 3414 00c9 49       		.uleb128 0x49
 3415 00ca 13       		.uleb128 0x13
 3416 00cb 02       		.uleb128 0x2
 3417 00cc 18       		.uleb128 0x18
 3418 00cd 00       		.byte	0
 3419 00ce 00       		.byte	0
 3420 00cf 0D       		.uleb128 0xd
 3421 00d0 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 111


 3422 00d1 01       		.byte	0x1
 3423 00d2 3F       		.uleb128 0x3f
 3424 00d3 19       		.uleb128 0x19
 3425 00d4 03       		.uleb128 0x3
 3426 00d5 0E       		.uleb128 0xe
 3427 00d6 3A       		.uleb128 0x3a
 3428 00d7 0B       		.uleb128 0xb
 3429 00d8 3B       		.uleb128 0x3b
 3430 00d9 05       		.uleb128 0x5
 3431 00da 27       		.uleb128 0x27
 3432 00db 19       		.uleb128 0x19
 3433 00dc 49       		.uleb128 0x49
 3434 00dd 13       		.uleb128 0x13
 3435 00de 11       		.uleb128 0x11
 3436 00df 01       		.uleb128 0x1
 3437 00e0 12       		.uleb128 0x12
 3438 00e1 06       		.uleb128 0x6
 3439 00e2 40       		.uleb128 0x40
 3440 00e3 18       		.uleb128 0x18
 3441 00e4 9742     		.uleb128 0x2117
 3442 00e6 19       		.uleb128 0x19
 3443 00e7 01       		.uleb128 0x1
 3444 00e8 13       		.uleb128 0x13
 3445 00e9 00       		.byte	0
 3446 00ea 00       		.byte	0
 3447 00eb 0E       		.uleb128 0xe
 3448 00ec 2E       		.uleb128 0x2e
 3449 00ed 01       		.byte	0x1
 3450 00ee 3F       		.uleb128 0x3f
 3451 00ef 19       		.uleb128 0x19
 3452 00f0 03       		.uleb128 0x3
 3453 00f1 0E       		.uleb128 0xe
 3454 00f2 3A       		.uleb128 0x3a
 3455 00f3 0B       		.uleb128 0xb
 3456 00f4 3B       		.uleb128 0x3b
 3457 00f5 05       		.uleb128 0x5
 3458 00f6 27       		.uleb128 0x27
 3459 00f7 19       		.uleb128 0x19
 3460 00f8 11       		.uleb128 0x11
 3461 00f9 01       		.uleb128 0x1
 3462 00fa 12       		.uleb128 0x12
 3463 00fb 06       		.uleb128 0x6
 3464 00fc 40       		.uleb128 0x40
 3465 00fd 18       		.uleb128 0x18
 3466 00fe 9742     		.uleb128 0x2117
 3467 0100 19       		.uleb128 0x19
 3468 0101 01       		.uleb128 0x1
 3469 0102 13       		.uleb128 0x13
 3470 0103 00       		.byte	0
 3471 0104 00       		.byte	0
 3472 0105 0F       		.uleb128 0xf
 3473 0106 2E       		.uleb128 0x2e
 3474 0107 01       		.byte	0x1
 3475 0108 3F       		.uleb128 0x3f
 3476 0109 19       		.uleb128 0x19
 3477 010a 03       		.uleb128 0x3
 3478 010b 0E       		.uleb128 0xe
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 112


 3479 010c 3A       		.uleb128 0x3a
 3480 010d 0B       		.uleb128 0xb
 3481 010e 3B       		.uleb128 0x3b
 3482 010f 05       		.uleb128 0x5
 3483 0110 27       		.uleb128 0x27
 3484 0111 19       		.uleb128 0x19
 3485 0112 49       		.uleb128 0x49
 3486 0113 13       		.uleb128 0x13
 3487 0114 11       		.uleb128 0x11
 3488 0115 01       		.uleb128 0x1
 3489 0116 12       		.uleb128 0x12
 3490 0117 06       		.uleb128 0x6
 3491 0118 40       		.uleb128 0x40
 3492 0119 18       		.uleb128 0x18
 3493 011a 9642     		.uleb128 0x2116
 3494 011c 19       		.uleb128 0x19
 3495 011d 01       		.uleb128 0x1
 3496 011e 13       		.uleb128 0x13
 3497 011f 00       		.byte	0
 3498 0120 00       		.byte	0
 3499 0121 10       		.uleb128 0x10
 3500 0122 05       		.uleb128 0x5
 3501 0123 00       		.byte	0
 3502 0124 03       		.uleb128 0x3
 3503 0125 08       		.uleb128 0x8
 3504 0126 3A       		.uleb128 0x3a
 3505 0127 0B       		.uleb128 0xb
 3506 0128 3B       		.uleb128 0x3b
 3507 0129 05       		.uleb128 0x5
 3508 012a 49       		.uleb128 0x49
 3509 012b 13       		.uleb128 0x13
 3510 012c 02       		.uleb128 0x2
 3511 012d 18       		.uleb128 0x18
 3512 012e 00       		.byte	0
 3513 012f 00       		.byte	0
 3514 0130 11       		.uleb128 0x11
 3515 0131 2E       		.uleb128 0x2e
 3516 0132 00       		.byte	0
 3517 0133 3F       		.uleb128 0x3f
 3518 0134 19       		.uleb128 0x19
 3519 0135 03       		.uleb128 0x3
 3520 0136 0E       		.uleb128 0xe
 3521 0137 3A       		.uleb128 0x3a
 3522 0138 0B       		.uleb128 0xb
 3523 0139 3B       		.uleb128 0x3b
 3524 013a 05       		.uleb128 0x5
 3525 013b 27       		.uleb128 0x27
 3526 013c 19       		.uleb128 0x19
 3527 013d 11       		.uleb128 0x11
 3528 013e 01       		.uleb128 0x1
 3529 013f 12       		.uleb128 0x12
 3530 0140 06       		.uleb128 0x6
 3531 0141 40       		.uleb128 0x40
 3532 0142 18       		.uleb128 0x18
 3533 0143 9742     		.uleb128 0x2117
 3534 0145 19       		.uleb128 0x19
 3535 0146 00       		.byte	0
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 113


 3536 0147 00       		.byte	0
 3537 0148 12       		.uleb128 0x12
 3538 0149 01       		.uleb128 0x1
 3539 014a 01       		.byte	0x1
 3540 014b 49       		.uleb128 0x49
 3541 014c 13       		.uleb128 0x13
 3542 014d 01       		.uleb128 0x1
 3543 014e 13       		.uleb128 0x13
 3544 014f 00       		.byte	0
 3545 0150 00       		.byte	0
 3546 0151 13       		.uleb128 0x13
 3547 0152 21       		.uleb128 0x21
 3548 0153 00       		.byte	0
 3549 0154 49       		.uleb128 0x49
 3550 0155 13       		.uleb128 0x13
 3551 0156 2F       		.uleb128 0x2f
 3552 0157 0B       		.uleb128 0xb
 3553 0158 00       		.byte	0
 3554 0159 00       		.byte	0
 3555 015a 14       		.uleb128 0x14
 3556 015b 34       		.uleb128 0x34
 3557 015c 00       		.byte	0
 3558 015d 03       		.uleb128 0x3
 3559 015e 0E       		.uleb128 0xe
 3560 015f 3A       		.uleb128 0x3a
 3561 0160 0B       		.uleb128 0xb
 3562 0161 3B       		.uleb128 0x3b
 3563 0162 0B       		.uleb128 0xb
 3564 0163 49       		.uleb128 0x49
 3565 0164 13       		.uleb128 0x13
 3566 0165 3F       		.uleb128 0x3f
 3567 0166 19       		.uleb128 0x19
 3568 0167 3C       		.uleb128 0x3c
 3569 0168 19       		.uleb128 0x19
 3570 0169 00       		.byte	0
 3571 016a 00       		.byte	0
 3572 016b 15       		.uleb128 0x15
 3573 016c 26       		.uleb128 0x26
 3574 016d 00       		.byte	0
 3575 016e 49       		.uleb128 0x49
 3576 016f 13       		.uleb128 0x13
 3577 0170 00       		.byte	0
 3578 0171 00       		.byte	0
 3579 0172 16       		.uleb128 0x16
 3580 0173 34       		.uleb128 0x34
 3581 0174 00       		.byte	0
 3582 0175 03       		.uleb128 0x3
 3583 0176 0E       		.uleb128 0xe
 3584 0177 3A       		.uleb128 0x3a
 3585 0178 0B       		.uleb128 0xb
 3586 0179 3B       		.uleb128 0x3b
 3587 017a 0B       		.uleb128 0xb
 3588 017b 49       		.uleb128 0x49
 3589 017c 13       		.uleb128 0x13
 3590 017d 3F       		.uleb128 0x3f
 3591 017e 19       		.uleb128 0x19
 3592 017f 02       		.uleb128 0x2
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 114


 3593 0180 18       		.uleb128 0x18
 3594 0181 00       		.byte	0
 3595 0182 00       		.byte	0
 3596 0183 00       		.byte	0
 3597              		.section	.debug_aranges,"",%progbits
 3598 0000 1C010000 		.4byte	0x11c
 3599 0004 0200     		.2byte	0x2
 3600 0006 00000000 		.4byte	.Ldebug_info0
 3601 000a 04       		.byte	0x4
 3602 000b 00       		.byte	0
 3603 000c 0000     		.2byte	0
 3604 000e 0000     		.2byte	0
 3605 0010 00000000 		.4byte	.LFB35
 3606 0014 84000000 		.4byte	.LFE35-.LFB35
 3607 0018 00000000 		.4byte	.LFB36
 3608 001c 2A000000 		.4byte	.LFE36-.LFB36
 3609 0020 00000000 		.4byte	.LFB37
 3610 0024 26000000 		.4byte	.LFE37-.LFB37
 3611 0028 00000000 		.4byte	.LFB38
 3612 002c 50000000 		.4byte	.LFE38-.LFB38
 3613 0030 00000000 		.4byte	.LFB39
 3614 0034 14020000 		.4byte	.LFE39-.LFB39
 3615 0038 00000000 		.4byte	.LFB40
 3616 003c 16000000 		.4byte	.LFE40-.LFB40
 3617 0040 00000000 		.4byte	.LFB41
 3618 0044 40000000 		.4byte	.LFE41-.LFB41
 3619 0048 00000000 		.4byte	.LFB42
 3620 004c 58000000 		.4byte	.LFE42-.LFB42
 3621 0050 00000000 		.4byte	.LFB43
 3622 0054 1C000000 		.4byte	.LFE43-.LFB43
 3623 0058 00000000 		.4byte	.LFB44
 3624 005c 24000000 		.4byte	.LFE44-.LFB44
 3625 0060 00000000 		.4byte	.LFB45
 3626 0064 1C000000 		.4byte	.LFE45-.LFB45
 3627 0068 00000000 		.4byte	.LFB46
 3628 006c 24000000 		.4byte	.LFE46-.LFB46
 3629 0070 00000000 		.4byte	.LFB47
 3630 0074 1C000000 		.4byte	.LFE47-.LFB47
 3631 0078 00000000 		.4byte	.LFB48
 3632 007c 1C000000 		.4byte	.LFE48-.LFB48
 3633 0080 00000000 		.4byte	.LFB49
 3634 0084 1C000000 		.4byte	.LFE49-.LFB49
 3635 0088 00000000 		.4byte	.LFB50
 3636 008c 1C000000 		.4byte	.LFE50-.LFB50
 3637 0090 00000000 		.4byte	.LFB51
 3638 0094 24000000 		.4byte	.LFE51-.LFB51
 3639 0098 00000000 		.4byte	.LFB52
 3640 009c 24000000 		.4byte	.LFE52-.LFB52
 3641 00a0 00000000 		.4byte	.LFB53
 3642 00a4 24000000 		.4byte	.LFE53-.LFB53
 3643 00a8 00000000 		.4byte	.LFB54
 3644 00ac 24000000 		.4byte	.LFE54-.LFB54
 3645 00b0 00000000 		.4byte	.LFB55
 3646 00b4 24000000 		.4byte	.LFE55-.LFB55
 3647 00b8 00000000 		.4byte	.LFB56
 3648 00bc 24000000 		.4byte	.LFE56-.LFB56
 3649 00c0 00000000 		.4byte	.LFB57
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 115


 3650 00c4 38010000 		.4byte	.LFE57-.LFB57
 3651 00c8 00000000 		.4byte	.LFB58
 3652 00cc 44000000 		.4byte	.LFE58-.LFB58
 3653 00d0 00000000 		.4byte	.LFB59
 3654 00d4 38000000 		.4byte	.LFE59-.LFB59
 3655 00d8 00000000 		.4byte	.LFB60
 3656 00dc 5C000000 		.4byte	.LFE60-.LFB60
 3657 00e0 00000000 		.4byte	.LFB61
 3658 00e4 5C000000 		.4byte	.LFE61-.LFB61
 3659 00e8 00000000 		.4byte	.LFB62
 3660 00ec 3C000000 		.4byte	.LFE62-.LFB62
 3661 00f0 00000000 		.4byte	.LFB63
 3662 00f4 1C000000 		.4byte	.LFE63-.LFB63
 3663 00f8 00000000 		.4byte	.LFB64
 3664 00fc 1C000000 		.4byte	.LFE64-.LFB64
 3665 0100 00000000 		.4byte	.LFB65
 3666 0104 1C000000 		.4byte	.LFE65-.LFB65
 3667 0108 00000000 		.4byte	.LFB66
 3668 010c 14000000 		.4byte	.LFE66-.LFB66
 3669 0110 00000000 		.4byte	.LFB67
 3670 0114 14000000 		.4byte	.LFE67-.LFB67
 3671 0118 00000000 		.4byte	0
 3672 011c 00000000 		.4byte	0
 3673              		.section	.debug_ranges,"",%progbits
 3674              	.Ldebug_ranges0:
 3675 0000 00000000 		.4byte	.LFB35
 3676 0004 84000000 		.4byte	.LFE35
 3677 0008 00000000 		.4byte	.LFB36
 3678 000c 2A000000 		.4byte	.LFE36
 3679 0010 00000000 		.4byte	.LFB37
 3680 0014 26000000 		.4byte	.LFE37
 3681 0018 00000000 		.4byte	.LFB38
 3682 001c 50000000 		.4byte	.LFE38
 3683 0020 00000000 		.4byte	.LFB39
 3684 0024 14020000 		.4byte	.LFE39
 3685 0028 00000000 		.4byte	.LFB40
 3686 002c 16000000 		.4byte	.LFE40
 3687 0030 00000000 		.4byte	.LFB41
 3688 0034 40000000 		.4byte	.LFE41
 3689 0038 00000000 		.4byte	.LFB42
 3690 003c 58000000 		.4byte	.LFE42
 3691 0040 00000000 		.4byte	.LFB43
 3692 0044 1C000000 		.4byte	.LFE43
 3693 0048 00000000 		.4byte	.LFB44
 3694 004c 24000000 		.4byte	.LFE44
 3695 0050 00000000 		.4byte	.LFB45
 3696 0054 1C000000 		.4byte	.LFE45
 3697 0058 00000000 		.4byte	.LFB46
 3698 005c 24000000 		.4byte	.LFE46
 3699 0060 00000000 		.4byte	.LFB47
 3700 0064 1C000000 		.4byte	.LFE47
 3701 0068 00000000 		.4byte	.LFB48
 3702 006c 1C000000 		.4byte	.LFE48
 3703 0070 00000000 		.4byte	.LFB49
 3704 0074 1C000000 		.4byte	.LFE49
 3705 0078 00000000 		.4byte	.LFB50
 3706 007c 1C000000 		.4byte	.LFE50
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 116


 3707 0080 00000000 		.4byte	.LFB51
 3708 0084 24000000 		.4byte	.LFE51
 3709 0088 00000000 		.4byte	.LFB52
 3710 008c 24000000 		.4byte	.LFE52
 3711 0090 00000000 		.4byte	.LFB53
 3712 0094 24000000 		.4byte	.LFE53
 3713 0098 00000000 		.4byte	.LFB54
 3714 009c 24000000 		.4byte	.LFE54
 3715 00a0 00000000 		.4byte	.LFB55
 3716 00a4 24000000 		.4byte	.LFE55
 3717 00a8 00000000 		.4byte	.LFB56
 3718 00ac 24000000 		.4byte	.LFE56
 3719 00b0 00000000 		.4byte	.LFB57
 3720 00b4 38010000 		.4byte	.LFE57
 3721 00b8 00000000 		.4byte	.LFB58
 3722 00bc 44000000 		.4byte	.LFE58
 3723 00c0 00000000 		.4byte	.LFB59
 3724 00c4 38000000 		.4byte	.LFE59
 3725 00c8 00000000 		.4byte	.LFB60
 3726 00cc 5C000000 		.4byte	.LFE60
 3727 00d0 00000000 		.4byte	.LFB61
 3728 00d4 5C000000 		.4byte	.LFE61
 3729 00d8 00000000 		.4byte	.LFB62
 3730 00dc 3C000000 		.4byte	.LFE62
 3731 00e0 00000000 		.4byte	.LFB63
 3732 00e4 1C000000 		.4byte	.LFE63
 3733 00e8 00000000 		.4byte	.LFB64
 3734 00ec 1C000000 		.4byte	.LFE64
 3735 00f0 00000000 		.4byte	.LFB65
 3736 00f4 1C000000 		.4byte	.LFE65
 3737 00f8 00000000 		.4byte	.LFB66
 3738 00fc 14000000 		.4byte	.LFE66
 3739 0100 00000000 		.4byte	.LFB67
 3740 0104 14000000 		.4byte	.LFE67
 3741 0108 00000000 		.4byte	0
 3742 010c 00000000 		.4byte	0
 3743              		.section	.debug_line,"",%progbits
 3744              	.Ldebug_line0:
 3745 0000 A4030000 		.section	.debug_str,"MS",%progbits,1
 3745      02004C00 
 3745      00000201 
 3745      FB0E0D00 
 3745      01010101 
 3746              	.LASF10:
 3747 0000 75696E74 		.ascii	"uint16\000"
 3747      313600
 3748              	.LASF27:
 3749 0007 66696C74 		.ascii	"filteredRawData\000"
 3749      65726564 
 3749      52617744 
 3749      61746100 
 3750              	.LASF82:
 3751 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 3751      656E7365 
 3751      5F687973 
 3751      74657265 
 3751      73697300 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 117


 3752              	.LASF84:
 3753 002b 43617053 		.ascii	"CapSense_rawDataIndex\000"
 3753      656E7365 
 3753      5F726177 
 3753      44617461 
 3753      496E6465 
 3754              	.LASF76:
 3755 0041 43617053 		.ascii	"CapSense_sensorOnMask\000"
 3755      656E7365 
 3755      5F73656E 
 3755      736F724F 
 3755      6E4D6173 
 3756              	.LASF44:
 3757 0057 43617053 		.ascii	"CapSense_GetNegativeNoiseThreshold\000"
 3757      656E7365 
 3757      5F476574 
 3757      4E656761 
 3757      74697665 
 3758              	.LASF54:
 3759 007a 66696E67 		.ascii	"fingerThreshold\000"
 3759      65725468 
 3759      72657368 
 3759      6F6C6400 
 3760              	.LASF48:
 3761 008a 43617053 		.ascii	"CapSense_SetNegativeNoiseThreshold\000"
 3761      656E7365 
 3761      5F536574 
 3761      4E656761 
 3761      74697665 
 3762              	.LASF31:
 3763 00ad 43617053 		.ascii	"CapSense_UpdateWidgetBaseline\000"
 3763      656E7365 
 3763      5F557064 
 3763      61746557 
 3763      69646765 
 3764              	.LASF66:
 3765 00cb 43617053 		.ascii	"CapSense_GetDebounce\000"
 3765      656E7365 
 3765      5F476574 
 3765      4465626F 
 3765      756E6365 
 3766              	.LASF7:
 3767 00e0 6C6F6E67 		.ascii	"long long unsigned int\000"
 3767      206C6F6E 
 3767      6720756E 
 3767      7369676E 
 3767      65642069 
 3768              	.LASF75:
 3769 00f7 43617053 		.ascii	"CapSense_sensorSignal\000"
 3769      656E7365 
 3769      5F73656E 
 3769      736F7253 
 3769      69676E61 
 3770              	.LASF42:
 3771 010d 43617053 		.ascii	"CapSense_GetNoiseThreshold\000"
 3771      656E7365 
 3771      5F476574 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 118


 3771      4E6F6973 
 3771      65546872 
 3772              	.LASF21:
 3773 0128 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 3773      656E7365 
 3773      5F496E69 
 3773      7469616C 
 3773      697A6545 
 3774              	.LASF30:
 3775 014c 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 3775      656E7365 
 3775      5F557064 
 3775      61746545 
 3775      6E61626C 
 3776              	.LASF6:
 3777 016c 6C6F6E67 		.ascii	"long long int\000"
 3777      206C6F6E 
 3777      6720696E 
 3777      7400
 3778              	.LASF0:
 3779 017a 7369676E 		.ascii	"signed char\000"
 3779      65642063 
 3779      68617200 
 3780              	.LASF62:
 3781 0186 43617053 		.ascii	"CapSense_DisableWidget\000"
 3781      656E7365 
 3781      5F446973 
 3781      61626C65 
 3781      57696467 
 3782              	.LASF57:
 3783 019d 72617749 		.ascii	"rawIndex\000"
 3783      6E646578 
 3783      00
 3784              	.LASF37:
 3785 01a6 43617053 		.ascii	"CapSense_GetBaselineData\000"
 3785      656E7365 
 3785      5F476574 
 3785      42617365 
 3785      6C696E65 
 3786              	.LASF59:
 3787 01bf 73746174 		.ascii	"state\000"
 3787      6500
 3788              	.LASF4:
 3789 01c5 6C6F6E67 		.ascii	"long int\000"
 3789      20696E74 
 3789      00
 3790              	.LASF60:
 3791 01ce 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 3791      656E7365 
 3791      5F436865 
 3791      636B4973 
 3791      416E7957 
 3792              	.LASF9:
 3793 01ee 75696E74 		.ascii	"uint8\000"
 3793      3800
 3794              	.LASF78:
 3795 01f4 43617053 		.ascii	"CapSense_lowBaselineReset\000"
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 119


 3795      656E7365 
 3795      5F6C6F77 
 3795      42617365 
 3795      6C696E65 
 3796              	.LASF68:
 3797 020e 43617053 		.ascii	"CapSense_DisableRawDataFilters\000"
 3797      656E7365 
 3797      5F446973 
 3797      61626C65 
 3797      52617744 
 3798              	.LASF13:
 3799 022d 646F7562 		.ascii	"double\000"
 3799      6C6500
 3800              	.LASF72:
 3801 0234 43617053 		.ascii	"CapSense_widgetNumber\000"
 3801      656E7365 
 3801      5F776964 
 3801      6765744E 
 3801      756D6265 
 3802              	.LASF11:
 3803 024a 75696E74 		.ascii	"uint32\000"
 3803      333200
 3804              	.LASF55:
 3805 0251 68797374 		.ascii	"hysteresis\000"
 3805      65726573 
 3805      697300
 3806              	.LASF45:
 3807 025c 43617053 		.ascii	"CapSense_SetFingerThreshold\000"
 3807      656E7365 
 3807      5F536574 
 3807      46696E67 
 3807      65725468 
 3808              	.LASF49:
 3809 0278 43617053 		.ascii	"CapSense_SetDebounce\000"
 3809      656E7365 
 3809      5F536574 
 3809      4465626F 
 3809      756E6365 
 3810              	.LASF40:
 3811 028d 76616C75 		.ascii	"value\000"
 3811      6500
 3812              	.LASF50:
 3813 0293 43617053 		.ascii	"CapSense_SetLowBaselineReset\000"
 3813      656E7365 
 3813      5F536574 
 3813      4C6F7742 
 3813      6173656C 
 3814              	.LASF34:
 3815 02b0 6C617374 		.ascii	"lastSensor\000"
 3815      53656E73 
 3815      6F7200
 3816              	.LASF8:
 3817 02bb 756E7369 		.ascii	"unsigned int\000"
 3817      676E6564 
 3817      20696E74 
 3817      00
 3818              	.LASF5:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 120


 3819 02c8 6C6F6E67 		.ascii	"long unsigned int\000"
 3819      20756E73 
 3819      69676E65 
 3819      6420696E 
 3819      7400
 3820              	.LASF74:
 3821 02da 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 3821      656E7365 
 3821      5F73656E 
 3821      736F7242 
 3821      6173656C 
 3822              	.LASF23:
 3823 02f5 43617053 		.ascii	"CapSense_UpdateBaselineNoThreshold\000"
 3823      656E7365 
 3823      5F557064 
 3823      61746542 
 3823      6173656C 
 3824              	.LASF83:
 3825 0318 43617053 		.ascii	"CapSense_debounce\000"
 3825      656E7365 
 3825      5F646562 
 3825      6F756E63 
 3825      6500
 3826              	.LASF36:
 3827 032a 64617461 		.ascii	"data\000"
 3827      00
 3828              	.LASF3:
 3829 032f 73686F72 		.ascii	"short unsigned int\000"
 3829      7420756E 
 3829      7369676E 
 3829      65642069 
 3829      6E7400
 3830              	.LASF18:
 3831 0342 73656E73 		.ascii	"sensor\000"
 3831      6F7200
 3832              	.LASF71:
 3833 0349 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 3833      656E7365 
 3833      5F73656E 
 3833      736F7245 
 3833      6E61626C 
 3834              	.LASF85:
 3835 0363 43617053 		.ascii	"CapSense_numberOfSensors\000"
 3835      656E7365 
 3835      5F6E756D 
 3835      6265724F 
 3835      6653656E 
 3836              	.LASF29:
 3837 037c 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 3837      656E7365 
 3837      5F557064 
 3837      61746553 
 3837      656E736F 
 3838              	.LASF24:
 3839 039a 63616C63 		.ascii	"calc\000"
 3839      00
 3840              	.LASF89:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 121


 3841 039f 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\CapSense_CSHL.c\000"
 3841      6E657261 
 3841      7465645F 
 3841      536F7572 
 3841      63655C50 
 3842              	.LASF38:
 3843 03c8 43617053 		.ascii	"CapSense_GetDiffCountData\000"
 3843      656E7365 
 3843      5F476574 
 3843      44696666 
 3843      436F756E 
 3844              	.LASF52:
 3845 03e2 6465626F 		.ascii	"debounce\000"
 3845      756E6365 
 3845      00
 3846              	.LASF15:
 3847 03eb 73697A65 		.ascii	"sizetype\000"
 3847      74797065 
 3847      00
 3848              	.LASF61:
 3849 03f4 43617053 		.ascii	"CapSense_EnableWidget\000"
 3849      656E7365 
 3849      5F456E61 
 3849      626C6557 
 3849      69646765 
 3850              	.LASF17:
 3851 040a 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 3851      656E7365 
 3851      5F496E69 
 3851      7469616C 
 3851      697A6553 
 3852              	.LASF47:
 3853 042c 43617053 		.ascii	"CapSense_SetFingerHysteresis\000"
 3853      656E7365 
 3853      5F536574 
 3853      46696E67 
 3853      65724879 
 3854              	.LASF90:
 3855 0449 433A5C55 		.ascii	"C:\\Users\\Heidi\\Desktop\\BLE_Lab_4\\BLE Lab 4.cyd"
 3855      73657273 
 3855      5C486569 
 3855      64695C44 
 3855      65736B74 
 3856 0477 736E00   		.ascii	"sn\000"
 3857              	.LASF51:
 3858 047a 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 3858      656E7365 
 3858      5F436865 
 3858      636B4973 
 3858      53656E73 
 3859              	.LASF41:
 3860 0497 43617053 		.ascii	"CapSense_GetFingerThreshold\000"
 3860      656E7365 
 3860      5F476574 
 3860      46696E67 
 3860      65725468 
 3861              	.LASF80:
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 122


 3862 04b3 43617053 		.ascii	"CapSense_noiseThreshold\000"
 3862      656E7365 
 3862      5F6E6F69 
 3862      73655468 
 3862      72657368 
 3863              	.LASF79:
 3864 04cb 43617053 		.ascii	"CapSense_fingerThreshold\000"
 3864      656E7365 
 3864      5F66696E 
 3864      67657254 
 3864      68726573 
 3865              	.LASF86:
 3866 04e4 43617053 		.ascii	"CapSense_rawFilterData1\000"
 3866      656E7365 
 3866      5F726177 
 3866      46696C74 
 3866      65724461 
 3867              	.LASF12:
 3868 04fc 666C6F61 		.ascii	"float\000"
 3868      7400
 3869              	.LASF65:
 3870 0502 43617053 		.ascii	"CapSense_GetLowBaselineReset\000"
 3870      656E7365 
 3870      5F476574 
 3870      4C6F7742 
 3870      6173656C 
 3871              	.LASF88:
 3872 051f 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3872      4320342E 
 3872      382E3420 
 3872      32303134 
 3872      30353236 
 3873 0552 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3873      20726576 
 3873      6973696F 
 3873      6E203231 
 3873      31333538 
 3874 0585 30202D66 		.ascii	"0 -ffunction-sections\000"
 3874      66756E63 
 3874      74696F6E 
 3874      2D736563 
 3874      74696F6E 
 3875              	.LASF56:
 3876 059b 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 3876      656E7365 
 3876      5F436865 
 3876      636B4973 
 3876      57696467 
 3877              	.LASF1:
 3878 05b8 756E7369 		.ascii	"unsigned char\000"
 3878      676E6564 
 3878      20636861 
 3878      7200
 3879              	.LASF19:
 3880 05c6 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 3880      656E7365 
 3880      5F496E69 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 123


 3880      7469616C 
 3880      697A6541 
 3881              	.LASF35:
 3882 05e6 43617053 		.ascii	"CapSense_SetBaselineData\000"
 3882      656E7365 
 3882      5F536574 
 3882      42617365 
 3882      6C696E65 
 3883              	.LASF28:
 3884 05ff 6E6F6973 		.ascii	"noiseThreshold\000"
 3884      65546872 
 3884      6573686F 
 3884      6C6400
 3885              	.LASF2:
 3886 060e 73686F72 		.ascii	"short int\000"
 3886      7420696E 
 3886      7400
 3887              	.LASF20:
 3888 0618 77696467 		.ascii	"widget\000"
 3888      657400
 3889              	.LASF22:
 3890 061f 69735365 		.ascii	"isSensorEnabled\000"
 3890      6E736F72 
 3890      456E6162 
 3890      6C656400 
 3891              	.LASF16:
 3892 062f 43617053 		.ascii	"CapSense_BaseInit\000"
 3892      656E7365 
 3892      5F426173 
 3892      65496E69 
 3892      7400
 3893              	.LASF32:
 3894 0641 73656E73 		.ascii	"sensorsPerWidget\000"
 3894      6F727350 
 3894      65725769 
 3894      64676574 
 3894      00
 3895              	.LASF77:
 3896 0652 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 3896      656E7365 
 3896      5F6C6F77 
 3896      42617365 
 3896      6C696E65 
 3897              	.LASF46:
 3898 066f 43617053 		.ascii	"CapSense_SetNoiseThreshold\000"
 3898      656E7365 
 3898      5F536574 
 3898      4E6F6973 
 3898      65546872 
 3899              	.LASF73:
 3900 068a 43617053 		.ascii	"CapSense_sensorBaseline\000"
 3900      656E7365 
 3900      5F73656E 
 3900      736F7242 
 3900      6173656C 
 3901              	.LASF14:
 3902 06a2 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 124


 3902      00
 3903              	.LASF87:
 3904 06a7 43617053 		.ascii	"CapSense_enableRawFilters\000"
 3904      656E7365 
 3904      5F656E61 
 3904      626C6552 
 3904      61774669 
 3905              	.LASF43:
 3906 06c1 43617053 		.ascii	"CapSense_GetFingerHysteresis\000"
 3906      656E7365 
 3906      5F476574 
 3906      46696E67 
 3906      65724879 
 3907              	.LASF33:
 3908 06de 66697273 		.ascii	"firstSensor\000"
 3908      7453656E 
 3908      736F7200 
 3909              	.LASF53:
 3910 06ea 6465626F 		.ascii	"debounceIndex\000"
 3910      756E6365 
 3910      496E6465 
 3910      7800
 3911              	.LASF25:
 3912 06f8 7369676E 		.ascii	"sign\000"
 3912      00
 3913              	.LASF58:
 3914 06fd 6E756D4F 		.ascii	"numOfSensors\000"
 3914      6653656E 
 3914      736F7273 
 3914      00
 3915              	.LASF70:
 3916 070a 43617053 		.ascii	"CapSense_sensorRaw\000"
 3916      656E7365 
 3916      5F73656E 
 3916      736F7252 
 3916      617700
 3917              	.LASF39:
 3918 071d 43617053 		.ascii	"CapSense_SetDiffCountData\000"
 3918      656E7365 
 3918      5F536574 
 3918      44696666 
 3918      436F756E 
 3919              	.LASF64:
 3920 0737 43617053 		.ascii	"CapSense_GetWidgetNumber\000"
 3920      656E7365 
 3920      5F476574 
 3920      57696467 
 3920      65744E75 
 3921              	.LASF67:
 3922 0750 43617053 		.ascii	"CapSense_EnableRawDataFilters\000"
 3922      656E7365 
 3922      5F456E61 
 3922      626C6552 
 3922      61774461 
 3923              	.LASF69:
 3924 076e 43617053 		.ascii	"CapSense_debounceCounter\000"
 3924      656E7365 
ARM GAS  C:\Users\Heidi\AppData\Local\Temp\ccJMNBpd.s 			page 125


 3924      5F646562 
 3924      6F756E63 
 3924      65436F75 
 3925              	.LASF63:
 3926 0787 43617053 		.ascii	"CapSense_IIR4Filter\000"
 3926      656E7365 
 3926      5F494952 
 3926      3446696C 
 3926      74657200 
 3927              	.LASF26:
 3928 079b 74656D70 		.ascii	"tempRaw\000"
 3928      52617700 
 3929              	.LASF81:
 3930 07a3 43617053 		.ascii	"CapSense_negativeNoiseThreshold\000"
 3930      656E7365 
 3930      5F6E6567 
 3930      61746976 
 3930      654E6F69 
 3931              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
